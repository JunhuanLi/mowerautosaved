; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\cmd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\cmd.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\cmd.crf ..\OS\components\finsh\cmd.c]
                          THUMB

                          AREA ||i._list_device||, CODE, READONLY, ALIGN=2

                  _list_device PROC
;;;446    #ifdef RT_USING_DEVICE
;;;447    static long _list_device(struct rt_list_node *list)
000000  b570              PUSH     {r4-r6,lr}
;;;448    {
000002  b094              SUB      sp,sp,#0x50
000004  4605              MOV      r5,r0
;;;449        struct rt_device *device;
;;;450        struct rt_list_node *node;
;;;451        char * const device_type_str[] =
000006  224c              MOVS     r2,#0x4c
000008  490f              LDR      r1,|L1.72|
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;452        {
;;;453            "Character Device",
;;;454            "Block Device",
;;;455            "Network Interface",
;;;456            "MTD Device",
;;;457            "CAN Device",
;;;458            "RTC",
;;;459            "Sound Device",
;;;460            "Graphic Device",
;;;461            "I2C Bus",
;;;462            "USB Slave Device",
;;;463            "USB Host Bus",
;;;464            "SPI Bus",
;;;465            "SPI Device",
;;;466            "SDIO Bus",
;;;467    		"PM Pseudo Device",
;;;468            "Pipe",
;;;469            "Portal Device",
;;;470    		"Miscellaneous Device",
;;;471            "Unknown"
;;;472        };
;;;473    
;;;474        rt_kprintf("device    type      \n");
000010  a00e              ADR      r0,|L1.76|
000012  f7fffffe          BL       rt_kprintf
;;;475        rt_kprintf("-------- ---------- \n");
000016  a013              ADR      r0,|L1.100|
000018  f7fffffe          BL       rt_kprintf
00001c  466e              MOV      r6,sp                 ;451
;;;476        for (node = list->next; node != list; node = node->next)
00001e  682c              LDR      r4,[r5,#0]
000020  e00d              B        |L1.62|
                  |L1.34|
;;;477        {
;;;478            device = (struct rt_device *)(rt_list_entry(node, struct rt_object, list));
;;;479            rt_kprintf("%-8.*s %-8s \n",
000022  7a20              LDRB     r0,[r4,#8]
000024  f1a4020c          SUB      r2,r4,#0xc            ;478
000028  2812              CMP      r0,#0x12
00002a  d802              BHI      |L1.50|
;;;480                       RT_NAME_MAX,
;;;481                       device->parent.name,
;;;482                       (device->type <= RT_Device_Class_Unknown) ?
;;;483                       device_type_str[device->type] :
00002c  f8563020          LDR      r3,[r6,r0,LSL #2]
000030  e000              B        |L1.52|
                  |L1.50|
;;;484                       device_type_str[RT_Device_Class_Unknown]);
000032  9b12              LDR      r3,[sp,#0x48]
                  |L1.52|
000034  2108              MOVS     r1,#8
000036  a011              ADR      r0,|L1.124|
000038  f7fffffe          BL       rt_kprintf
00003c  6824              LDR      r4,[r4,#0]            ;476
                  |L1.62|
00003e  42ac              CMP      r4,r5                 ;476
000040  d1ef              BNE      |L1.34|
;;;485        }
;;;486    
;;;487        return 0;
;;;488    }
000042  b014              ADD      sp,sp,#0x50
000044  2000              MOVS     r0,#0                 ;487
000046  bd70              POP      {r4-r6,pc}
;;;489    
                          ENDP

                  |L1.72|
                          DCD      ||area_number.56||
                  |L1.76|
00004c  64657669          DCB      "device    type      \n",0
000050  63652020
000054  20207479
000058  70652020
00005c  20202020
000060  0a00    
000062  00                DCB      0
000063  00                DCB      0
                  |L1.100|
000064  2d2d2d2d          DCB      "-------- ---------- \n",0
000068  2d2d2d2d
00006c  202d2d2d
000070  2d2d2d2d
000074  2d2d2d20
000078  0a00    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L1.124|
00007c  252d382e          DCB      "%-8.*s %-8s \n",0
000080  2a732025
000084  2d387320
000088  0a00    
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i._list_event||, CODE, READONLY, ALIGN=2

                  _list_event PROC
;;;180    #ifdef RT_USING_EVENT
;;;181    static long _list_event(struct rt_list_node *list)
000000  b5f8              PUSH     {r3-r7,lr}
;;;182    {
000002  4606              MOV      r6,r0
;;;183        struct rt_event *e;
;;;184        struct rt_list_node *node;
;;;185    
;;;186        rt_kprintf("event    set        suspend thread\n");
000004  a015              ADR      r0,|L2.92|
000006  f7fffffe          BL       rt_kprintf
;;;187        rt_kprintf("-------- ---------- --------------\n");
00000a  a01d              ADR      r0,|L2.128|
00000c  f7fffffe          BL       rt_kprintf
;;;188        for (node = list->next; node != list; node = node->next)
000010  6834              LDR      r4,[r6,#0]
000012  e00e              B        |L2.50|
                  |L2.20|
;;;189        {
;;;190            e = (struct rt_event *)(rt_list_entry(node, struct rt_object, list));
;;;191            if (!rt_list_isempty(&e->parent.suspend_thread))
000014  f1040008          ADD      r0,r4,#8
000018  f1a4050c          SUB      r5,r4,#0xc            ;190
00001c  4607              MOV      r7,r0
00001e  f7fffffe          BL       rt_list_isempty
000022  b150              CBZ      r0,|L2.58|
;;;192            {
;;;193                rt_kprintf("%-8.*s  0x%08x %03d:",
;;;194                           RT_NAME_MAX,
;;;195                           e->parent.parent.name,
;;;196                           e->set,
;;;197                           rt_list_len(&e->parent.suspend_thread));
;;;198                show_wait_queue(&(e->parent.suspend_thread));
;;;199                rt_kprintf("\n");
;;;200            }
;;;201            else
;;;202            {
;;;203                rt_kprintf("%-8.*s  0x%08x 0\n",
000024  462a              MOV      r2,r5
000026  2108              MOVS     r1,#8
000028  a01e              ADR      r0,|L2.164|
00002a  69eb              LDR      r3,[r5,#0x1c]
00002c  f7fffffe          BL       rt_kprintf
                  |L2.48|
000030  6824              LDR      r4,[r4,#0]            ;188
                  |L2.50|
000032  42b4              CMP      r4,r6                 ;188
000034  d1ee              BNE      |L2.20|
;;;204                           RT_NAME_MAX, e->parent.parent.name, e->set);
;;;205            }
;;;206        }
;;;207    
;;;208        return 0;
000036  2000              MOVS     r0,#0
;;;209    }
000038  bdf8              POP      {r3-r7,pc}
                  |L2.58|
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       rt_list_len
000040  9000              STR      r0,[sp,#0]            ;193
000042  462a              MOV      r2,r5                 ;193
000044  2108              MOVS     r1,#8                 ;193
000046  a01c              ADR      r0,|L2.184|
000048  69eb              LDR      r3,[r5,#0x1c]         ;193
00004a  f7fffffe          BL       rt_kprintf
00004e  4638              MOV      r0,r7                 ;193
000050  f7fffffe          BL       show_wait_queue
000054  481e              LDR      r0,|L2.208|
000056  f7fffffe          BL       rt_kprintf
00005a  e7e9              B        |L2.48|
;;;210    
                          ENDP

                  |L2.92|
00005c  6576656e          DCB      "event    set        suspend thread\n",0
000060  74202020
000064  20736574
000068  20202020
00006c  20202020
000070  73757370
000074  656e6420
000078  74687265
00007c  61640a00
                  |L2.128|
000080  2d2d2d2d          DCB      "-------- ---------- --------------\n",0
000084  2d2d2d2d
000088  202d2d2d
00008c  2d2d2d2d
000090  2d2d2d20
000094  2d2d2d2d
000098  2d2d2d2d
00009c  2d2d2d2d
0000a0  2d2d0a00
                  |L2.164|
0000a4  252d382e          DCB      "%-8.*s  0x%08x 0\n",0
0000a8  2a732020
0000ac  30782530
0000b0  38782030
0000b4  0a00    
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L2.184|
0000b8  252d382e          DCB      "%-8.*s  0x%08x %03d:",0
0000bc  2a732020
0000c0  30782530
0000c4  38782025
0000c8  3033643a
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L2.208|
                          DCD      ||i._list_sem||+0x80

                          AREA ||i._list_mailbox||, CODE, READONLY, ALIGN=2

                  _list_mailbox PROC
;;;250    #ifdef RT_USING_MAILBOX
;;;251    static long _list_mailbox(struct rt_list_node *list)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;252    {
000004  4606              MOV      r6,r0
;;;253        struct rt_mailbox *m;
;;;254        struct rt_list_node *node;
;;;255    
;;;256        rt_kprintf("mailbox  entry size suspend thread\n");
000006  a01a              ADR      r0,|L3.112|
000008  f7fffffe          BL       rt_kprintf
;;;257        rt_kprintf("-------- ----  ---- --------------\n");
00000c  a021              ADR      r0,|L3.148|
00000e  f7fffffe          BL       rt_kprintf
;;;258        for (node = list->next; node != list; node = node->next)
000012  6835              LDR      r5,[r6,#0]
000014  e015              B        |L3.66|
                  |L3.22|
;;;259        {
;;;260            m = (struct rt_mailbox *)(rt_list_entry(node, struct rt_object, list));
;;;261            if (!rt_list_isempty(&m->parent.suspend_thread))
000016  f1050008          ADD      r0,r5,#8
00001a  f1a5040c          SUB      r4,r5,#0xc            ;260
00001e  4607              MOV      r7,r0
000020  f7fffffe          BL       rt_list_isempty
000024  2800              CMP      r0,#0
000026  4638              MOV      r0,r7
000028  d010              BEQ      |L3.76|
;;;262            {
;;;263                rt_kprintf("%-8.*s %04d  %04d %d:",
;;;264                           RT_NAME_MAX,
;;;265                           m->parent.parent.name,
;;;266                           m->entry,
;;;267                           m->size,
;;;268                           rt_list_len(&m->parent.suspend_thread));
;;;269                show_wait_queue(&(m->parent.suspend_thread));
;;;270                rt_kprintf("\n");
;;;271            }
;;;272            else
;;;273            {
;;;274                rt_kprintf("%-8.*s %04d  %04d %d\n",
00002a  f7fffffe          BL       rt_list_len
00002e  8c21              LDRH     r1,[r4,#0x20]
000030  e9cd1000          STRD     r1,r0,[sp,#0]
000034  8c63              LDRH     r3,[r4,#0x22]
000036  4622              MOV      r2,r4
000038  2108              MOVS     r1,#8
00003a  a01f              ADR      r0,|L3.184|
00003c  f7fffffe          BL       rt_kprintf
                  |L3.64|
000040  682d              LDR      r5,[r5,#0]            ;258
                  |L3.66|
000042  42b5              CMP      r5,r6                 ;258
000044  d1e7              BNE      |L3.22|
;;;275                           RT_NAME_MAX,
;;;276                           m->parent.parent.name,
;;;277                           m->entry,
;;;278                           m->size,
;;;279                           rt_list_len(&m->parent.suspend_thread));
;;;280            }
;;;281        }
;;;282    
;;;283        return 0;
000046  2000              MOVS     r0,#0
;;;284    }
000048  e8bd81fc          POP      {r2-r8,pc}
                  |L3.76|
00004c  f7fffffe          BL       rt_list_len
000050  8c21              LDRH     r1,[r4,#0x20]         ;263
000052  e9cd1000          STRD     r1,r0,[sp,#0]         ;263
000056  8c63              LDRH     r3,[r4,#0x22]         ;263
000058  4622              MOV      r2,r4                 ;263
00005a  2108              MOVS     r1,#8                 ;263
00005c  a01c              ADR      r0,|L3.208|
00005e  f7fffffe          BL       rt_kprintf
000062  4638              MOV      r0,r7                 ;263
000064  f7fffffe          BL       show_wait_queue
000068  481f              LDR      r0,|L3.232|
00006a  f7fffffe          BL       rt_kprintf
00006e  e7e7              B        |L3.64|
;;;285    
                          ENDP

                  |L3.112|
000070  6d61696c          DCB      "mailbox  entry size suspend thread\n",0
000074  626f7820
000078  20656e74
00007c  72792073
000080  697a6520
000084  73757370
000088  656e6420
00008c  74687265
000090  61640a00
                  |L3.148|
000094  2d2d2d2d          DCB      "-------- ----  ---- --------------\n",0
000098  2d2d2d2d
00009c  202d2d2d
0000a0  2d20202d
0000a4  2d2d2d20
0000a8  2d2d2d2d
0000ac  2d2d2d2d
0000b0  2d2d2d2d
0000b4  2d2d0a00
                  |L3.184|
0000b8  252d382e          DCB      "%-8.*s %04d  %04d %d\n",0
0000bc  2a732025
0000c0  30346420
0000c4  20253034
0000c8  64202564
0000cc  0a00    
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L3.208|
0000d0  252d382e          DCB      "%-8.*s %04d  %04d %d:",0
0000d4  2a732025
0000d8  30346420
0000dc  20253034
0000e0  64202564
0000e4  3a00    
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L3.232|
                          DCD      ||i._list_sem||+0x80

                          AREA ||i._list_mempool||, CODE, READONLY, ALIGN=2

                  _list_mempool PROC
;;;367    #ifdef RT_USING_MEMPOOL
;;;368    static long _list_mempool(struct rt_list_node *list)
000000  b5fe              PUSH     {r1-r7,lr}
;;;369    {
000002  4606              MOV      r6,r0
;;;370        struct rt_mempool *mp;
;;;371        struct rt_list_node *node;
;;;372    
;;;373        rt_kprintf("mempool  block total free suspend thread\n");
000004  a013              ADR      r0,|L4.84|
000006  f7fffffe          BL       rt_kprintf
;;;374        rt_kprintf("-------- ----  ----  ---- --------------\n");
00000a  a01d              ADR      r0,|L4.128|
00000c  f7fffffe          BL       rt_kprintf
;;;375        for (node = list->next; node != list; node = node->next)
000010  6835              LDR      r5,[r6,#0]
000012  e01b              B        |L4.76|
                  |L4.20|
;;;376        {
;;;377            mp = (struct rt_mempool *)rt_list_entry(node, struct rt_object, list);
000014  f1a5040c          SUB      r4,r5,#0xc
;;;378            if (mp->suspend_thread_count > 0)
;;;379            {
;;;380                rt_kprintf("%-8.*s %04d  %04d  %04d %d:",
;;;381                           RT_NAME_MAX,
;;;382                           mp->parent.name,
;;;383                           mp->block_size,
;;;384                           mp->block_total_count,
;;;385                           mp->block_free_count,
;;;386                           mp->suspend_thread_count);
;;;387                show_wait_queue(&(mp->suspend_thread));
;;;388                rt_kprintf("\n");
;;;389            }
;;;390            else
;;;391            {
;;;392                rt_kprintf("%-8.*s %04d  %04d  %04d %d\n",
000018  6aa8              LDR      r0,[r5,#0x28]
00001a  e9d41209          LDRD     r1,r2,[r4,#0x24]      ;378
00001e  9100              STR      r1,[sp,#0]
000020  e9cd2001          STRD     r2,r0,[sp,#4]
000024  692b              LDR      r3,[r5,#0x10]         ;378
000026  4622              MOV      r2,r4
000028  f04f0108          MOV      r1,#8
00002c  b150              CBZ      r0,|L4.68|
00002e  a01f              ADR      r0,|L4.172|
000030  f7fffffe          BL       rt_kprintf
000034  f104002c          ADD      r0,r4,#0x2c           ;387
000038  f7fffffe          BL       show_wait_queue
00003c  4822              LDR      r0,|L4.200|
00003e  f7fffffe          BL       rt_kprintf
000042  e002              B        |L4.74|
                  |L4.68|
000044  a021              ADR      r0,|L4.204|
000046  f7fffffe          BL       rt_kprintf
                  |L4.74|
00004a  682d              LDR      r5,[r5,#0]            ;375
                  |L4.76|
00004c  42b5              CMP      r5,r6                 ;375
00004e  d1e1              BNE      |L4.20|
;;;393                           RT_NAME_MAX,
;;;394                           mp->parent.name,
;;;395                           mp->block_size,
;;;396                           mp->block_total_count,
;;;397                           mp->block_free_count,
;;;398                           mp->suspend_thread_count);
;;;399            }
;;;400        }
;;;401    
;;;402        return 0;
000050  2000              MOVS     r0,#0
;;;403    }
000052  bdfe              POP      {r1-r7,pc}
;;;404    
                          ENDP

                  |L4.84|
000054  6d656d70          DCB      "mempool  block total free suspend thread\n",0
000058  6f6f6c20
00005c  20626c6f
000060  636b2074
000064  6f74616c
000068  20667265
00006c  65207375
000070  7370656e
000074  64207468
000078  72656164
00007c  0a00    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L4.128|
000080  2d2d2d2d          DCB      "-------- ----  ----  ---- --------------\n",0
000084  2d2d2d2d
000088  202d2d2d
00008c  2d20202d
000090  2d2d2d20
000094  202d2d2d
000098  2d202d2d
00009c  2d2d2d2d
0000a0  2d2d2d2d
0000a4  2d2d2d2d
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L4.172|
0000ac  252d382e          DCB      "%-8.*s %04d  %04d  %04d %d:",0
0000b0  2a732025
0000b4  30346420
0000b8  20253034
0000bc  64202025
0000c0  30346420
0000c4  25643a00
                  |L4.200|
                          DCD      ||i._list_sem||+0x80
                  |L4.204|
0000cc  252d382e          DCB      "%-8.*s %04d  %04d  %04d %d\n",0
0000d0  2a732025
0000d4  30346420
0000d8  20253034
0000dc  64202025
0000e0  30346420
0000e4  25640a00

                          AREA ||i._list_msgqueue||, CODE, READONLY, ALIGN=2

                  _list_msgqueue PROC
;;;294    #ifdef RT_USING_MESSAGEQUEUE
;;;295    static long _list_msgqueue(struct rt_list_node *list)
000000  b5f8              PUSH     {r3-r7,lr}
;;;296    {
000002  4606              MOV      r6,r0
;;;297        struct rt_messagequeue *m;
;;;298        struct rt_list_node *node;
;;;299    
;;;300        rt_kprintf("msgqueue entry suspend thread\n");
000004  a017              ADR      r0,|L5.100|
000006  f7fffffe          BL       rt_kprintf
;;;301        rt_kprintf("-------- ----  --------------\n");
00000a  a01e              ADR      r0,|L5.132|
00000c  f7fffffe          BL       rt_kprintf
;;;302        for (node = list->next; node != list; node = node->next)
000010  6834              LDR      r4,[r6,#0]
000012  e013              B        |L5.60|
                  |L5.20|
;;;303        {
;;;304            m = (struct rt_messagequeue *)(rt_list_entry(node, struct rt_object, list));
;;;305            if (!rt_list_isempty(&m->parent.suspend_thread))
000014  f1040008          ADD      r0,r4,#8
000018  f1a4050c          SUB      r5,r4,#0xc            ;304
00001c  4607              MOV      r7,r0
00001e  f7fffffe          BL       rt_list_isempty
000022  2800              CMP      r0,#0
000024  4638              MOV      r0,r7
000026  d00d              BEQ      |L5.68|
;;;306            {
;;;307                rt_kprintf("%-8.*s %04d  %d:",
;;;308                           RT_NAME_MAX,
;;;309                           m->parent.parent.name,
;;;310                           m->entry,
;;;311                           rt_list_len(&m->parent.suspend_thread));
;;;312                show_wait_queue(&(m->parent.suspend_thread));
;;;313                rt_kprintf("\n");
;;;314            }
;;;315            else
;;;316            {
;;;317                rt_kprintf("%-8.*s %04d  %d\n",
000028  f7fffffe          BL       rt_list_len
00002c  9000              STR      r0,[sp,#0]
00002e  8cab              LDRH     r3,[r5,#0x24]
000030  462a              MOV      r2,r5
000032  2108              MOVS     r1,#8
000034  a01b              ADR      r0,|L5.164|
000036  f7fffffe          BL       rt_kprintf
                  |L5.58|
00003a  6824              LDR      r4,[r4,#0]            ;302
                  |L5.60|
00003c  42b4              CMP      r4,r6                 ;302
00003e  d1e9              BNE      |L5.20|
;;;318                           RT_NAME_MAX,
;;;319                           m->parent.parent.name,
;;;320                           m->entry,
;;;321                           rt_list_len(&m->parent.suspend_thread));
;;;322            }
;;;323        }
;;;324    
;;;325        return 0;
000040  2000              MOVS     r0,#0
;;;326    }
000042  bdf8              POP      {r3-r7,pc}
                  |L5.68|
000044  f7fffffe          BL       rt_list_len
000048  9000              STR      r0,[sp,#0]            ;307
00004a  8cab              LDRH     r3,[r5,#0x24]         ;307
00004c  462a              MOV      r2,r5                 ;307
00004e  2108              MOVS     r1,#8                 ;307
000050  a019              ADR      r0,|L5.184|
000052  f7fffffe          BL       rt_kprintf
000056  4638              MOV      r0,r7                 ;307
000058  f7fffffe          BL       show_wait_queue
00005c  481b              LDR      r0,|L5.204|
00005e  f7fffffe          BL       rt_kprintf
000062  e7ea              B        |L5.58|
;;;327    
                          ENDP

                  |L5.100|
000064  6d736771          DCB      "msgqueue entry suspend thread\n",0
000068  75657565
00006c  20656e74
000070  72792073
000074  75737065
000078  6e642074
00007c  68726561
000080  640a00  
000083  00                DCB      0
                  |L5.132|
000084  2d2d2d2d          DCB      "-------- ----  --------------\n",0
000088  2d2d2d2d
00008c  202d2d2d
000090  2d20202d
000094  2d2d2d2d
000098  2d2d2d2d
00009c  2d2d2d2d
0000a0  2d0a00  
0000a3  00                DCB      0
                  |L5.164|
0000a4  252d382e          DCB      "%-8.*s %04d  %d\n",0
0000a8  2a732025
0000ac  30346420
0000b0  2025640a
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L5.184|
0000b8  252d382e          DCB      "%-8.*s %04d  %d:",0
0000bc  2a732025
0000c0  30346420
0000c4  2025643a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L5.204|
                          DCD      ||i._list_sem||+0x80

                          AREA ||i._list_mutex||, CODE, READONLY, ALIGN=2

                  _list_mutex PROC
;;;219    #ifdef RT_USING_MUTEX
;;;220    static long _list_mutex(struct rt_list_node *list)
000000  b5fe              PUSH     {r1-r7,lr}
;;;221    {
000002  4606              MOV      r6,r0
;;;222        struct rt_mutex *m;
;;;223        struct rt_list_node *node;
;;;224    
;;;225        rt_kprintf("mutex    owner    hold suspend thread\n");
000004  a00e              ADR      r0,|L6.64|
000006  f7fffffe          BL       rt_kprintf
;;;226        rt_kprintf("-------- -------- ---- --------------\n");
00000a  a017              ADR      r0,|L6.104|
00000c  f7fffffe          BL       rt_kprintf
;;;227        for (node = list->next; node != list; node = node->next)
000010  6835              LDR      r5,[r6,#0]
000012  e011              B        |L6.56|
                  |L6.20|
;;;228        {
;;;229            m = (struct rt_mutex *)(rt_list_entry(node, struct rt_object, list));
000014  f1a5040c          SUB      r4,r5,#0xc
;;;230            rt_kprintf("%-8.*s %-8.*s %04d %d\n",
000018  f1050008          ADD      r0,r5,#8
00001c  f7fffffe          BL       rt_list_len
000020  7fe1              LDRB     r1,[r4,#0x1f]
000022  6a22              LDR      r2,[r4,#0x20]
000024  e9cd2100          STRD     r2,r1,[sp,#0]
000028  2308              MOVS     r3,#8
00002a  9002              STR      r0,[sp,#8]
00002c  4622              MOV      r2,r4
00002e  4619              MOV      r1,r3
000030  a017              ADR      r0,|L6.144|
000032  f7fffffe          BL       rt_kprintf
000036  682d              LDR      r5,[r5,#0]            ;227
                  |L6.56|
000038  42b5              CMP      r5,r6                 ;227
00003a  d1eb              BNE      |L6.20|
;;;231                       RT_NAME_MAX,
;;;232                       m->parent.parent.name,
;;;233                       RT_NAME_MAX,
;;;234                       m->owner->name,
;;;235                       m->hold,
;;;236                       rt_list_len(&m->parent.suspend_thread));
;;;237        }
;;;238    
;;;239        return 0;
00003c  2000              MOVS     r0,#0
;;;240    }
00003e  bdfe              POP      {r1-r7,pc}
;;;241    
                          ENDP

                  |L6.64|
000040  6d757465          DCB      "mutex    owner    hold suspend thread\n",0
000044  78202020
000048  206f776e
00004c  65722020
000050  2020686f
000054  6c642073
000058  75737065
00005c  6e642074
000060  68726561
000064  640a00  
000067  00                DCB      0
                  |L6.104|
000068  2d2d2d2d          DCB      "-------- -------- ---- --------------\n",0
00006c  2d2d2d2d
000070  202d2d2d
000074  2d2d2d2d
000078  2d202d2d
00007c  2d2d202d
000080  2d2d2d2d
000084  2d2d2d2d
000088  2d2d2d2d
00008c  2d0a00  
00008f  00                DCB      0
                  |L6.144|
000090  252d382e          DCB      "%-8.*s %-8.*s %04d %d\n",0
000094  2a732025
000098  2d382e2a
00009c  73202530
0000a0  34642025
0000a4  640a00  
0000a7  00                DCB      0

                          AREA ||i._list_sem||, CODE, READONLY, ALIGN=2

                  _list_sem PROC
;;;138    #ifdef RT_USING_SEMAPHORE
;;;139    static long _list_sem(struct rt_list_node *list)
000000  b5f8              PUSH     {r3-r7,lr}
;;;140    {
000002  4606              MOV      r6,r0
;;;141        struct rt_semaphore *sem;
;;;142        struct rt_list_node *node;
;;;143    
;;;144        rt_kprintf("semaphore v   suspend thread\n");
000004  a017              ADR      r0,|L7.100|
000006  f7fffffe          BL       rt_kprintf
;;;145        rt_kprintf("--------  --- --------------\n");
00000a  a01e              ADR      r0,|L7.132|
00000c  f7fffffe          BL       rt_kprintf
;;;146        for (node = list->next; node != list; node = node->next)
000010  6834              LDR      r4,[r6,#0]
000012  e013              B        |L7.60|
                  |L7.20|
;;;147        {
;;;148            sem = (struct rt_semaphore *)(rt_list_entry(node, struct rt_object, list));
;;;149            if (!rt_list_isempty(&sem->parent.suspend_thread))
000014  f1040008          ADD      r0,r4,#8
000018  f1a4050c          SUB      r5,r4,#0xc            ;148
00001c  4607              MOV      r7,r0
00001e  f7fffffe          BL       rt_list_isempty
000022  2800              CMP      r0,#0
000024  4638              MOV      r0,r7
000026  d00d              BEQ      |L7.68|
;;;150            {
;;;151                rt_kprintf("%-8.*s  %03d %d:", 
;;;152                           RT_NAME_MAX,
;;;153                           sem->parent.parent.name,
;;;154                           sem->value,
;;;155                           rt_list_len(&sem->parent.suspend_thread));
;;;156                show_wait_queue(&(sem->parent.suspend_thread));
;;;157                rt_kprintf("\n");
;;;158            }
;;;159            else
;;;160            {
;;;161                rt_kprintf("%-8.*s  %03d %d\n",
000028  f7fffffe          BL       rt_list_len
00002c  9000              STR      r0,[sp,#0]
00002e  8bab              LDRH     r3,[r5,#0x1c]
000030  462a              MOV      r2,r5
000032  2108              MOVS     r1,#8
000034  a01b              ADR      r0,|L7.164|
000036  f7fffffe          BL       rt_kprintf
                  |L7.58|
00003a  6824              LDR      r4,[r4,#0]            ;146
                  |L7.60|
00003c  42b4              CMP      r4,r6                 ;146
00003e  d1e9              BNE      |L7.20|
;;;162                           RT_NAME_MAX,
;;;163                           sem->parent.parent.name,
;;;164                           sem->value,
;;;165                           rt_list_len(&sem->parent.suspend_thread));
;;;166            }
;;;167        }
;;;168    
;;;169        return 0;
000040  2000              MOVS     r0,#0
;;;170    }
000042  bdf8              POP      {r3-r7,pc}
                  |L7.68|
000044  f7fffffe          BL       rt_list_len
000048  9000              STR      r0,[sp,#0]            ;151
00004a  8bab              LDRH     r3,[r5,#0x1c]         ;151
00004c  462a              MOV      r2,r5                 ;151
00004e  2108              MOVS     r1,#8                 ;151
000050  a019              ADR      r0,|L7.184|
000052  f7fffffe          BL       rt_kprintf
000056  4638              MOV      r0,r7                 ;151
000058  f7fffffe          BL       show_wait_queue
00005c  a008              ADR      r0,|L7.128|
00005e  f7fffffe          BL       rt_kprintf
000062  e7ea              B        |L7.58|
;;;171    
                          ENDP

                  |L7.100|
000064  73656d61          DCB      "semaphore v   suspend thread"
000068  70686f72
00006c  65207620
000070  20207375
000074  7370656e
000078  64207468
00007c  72656164
                  |L7.128|
000080  0a00              DCB      "\n",0
000082  00                DCB      0
000083  00                DCB      0
                  |L7.132|
000084  2d2d2d2d          DCB      "--------  --- --------------\n",0
000088  2d2d2d2d
00008c  20202d2d
000090  2d202d2d
000094  2d2d2d2d
000098  2d2d2d2d
00009c  2d2d2d2d
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L7.164|
0000a4  252d382e          DCB      "%-8.*s  %03d %d\n",0
0000a8  2a732020
0000ac  25303364
0000b0  2025640a
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L7.184|
0000b8  252d382e          DCB      "%-8.*s  %03d %d:",0
0000bc  2a732020
0000c0  25303364
0000c4  2025643a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0

                          AREA ||i._list_thread||, CODE, READONLY, ALIGN=2

                  _list_thread PROC
;;;83     
;;;84     static long _list_thread(struct rt_list_node *list)
000000  b57c              PUSH     {r2-r6,lr}
;;;85     {
000002  4606              MOV      r6,r0
;;;86         struct rt_thread *thread;
;;;87         struct rt_list_node *node;
;;;88         rt_uint8_t *ptr;
;;;89     
;;;90         rt_kprintf(" thread  pri  status      sp     stack size max used   left tick  error\n");
000004  481e              LDR      r0,|L8.128|
000006  f7fffffe          BL       rt_kprintf
;;;91         rt_kprintf("-------- ---- ------- ---------- ---------- ---------- ---------- ---\n");
00000a  481e              LDR      r0,|L8.132|
00000c  f7fffffe          BL       rt_kprintf
;;;92         for (node = list->next; node != list; node = node->next)
000010  6835              LDR      r5,[r6,#0]
000012  e030              B        |L8.118|
                  |L8.20|
;;;93         {
;;;94             thread = rt_list_entry(node, struct rt_thread, list);
000014  f1a5040c          SUB      r4,r5,#0xc
;;;95             rt_kprintf("%-8.*s 0x%02x", RT_NAME_MAX, thread->name, thread->current_priority);
000018  f8953029          LDRB     r3,[r5,#0x29]
00001c  4622              MOV      r2,r4
00001e  2108              MOVS     r1,#8
000020  a019              ADR      r0,|L8.136|
000022  f7fffffe          BL       rt_kprintf
;;;96     
;;;97             if (thread->stat == RT_THREAD_READY)        rt_kprintf(" ready  ");
000026  f8940034          LDRB     r0,[r4,#0x34]
00002a  2801              CMP      r0,#1
00002c  d005              BEQ      |L8.58|
;;;98             else if (thread->stat == RT_THREAD_SUSPEND) rt_kprintf(" suspend");
00002e  2802              CMP      r0,#2
000030  d005              BEQ      |L8.62|
;;;99             else if (thread->stat == RT_THREAD_INIT)    rt_kprintf(" init   ");
000032  b130              CBZ      r0,|L8.66|
;;;100            else if (thread->stat == RT_THREAD_CLOSE)   rt_kprintf(" close  ");
000034  2804              CMP      r0,#4
000036  d006              BEQ      |L8.70|
000038  e008              B        |L8.76|
                  |L8.58|
00003a  a017              ADR      r0,|L8.152|
00003c  e004              B        |L8.72|
                  |L8.62|
00003e  a019              ADR      r0,|L8.164|
000040  e002              B        |L8.72|
                  |L8.66|
000042  a01b              ADR      r0,|L8.176|
000044  e000              B        |L8.72|
                  |L8.70|
000046  a01d              ADR      r0,|L8.188|
                  |L8.72|
000048  f7fffffe          BL       rt_kprintf
                  |L8.76|
;;;101    
;;;102            ptr = (rt_uint8_t*)thread->stack_addr;
00004c  6aa0              LDR      r0,[r4,#0x28]
00004e  4601              MOV      r1,r0
;;;103            while (*ptr == '#')ptr ++;
000050  e000              B        |L8.84|
                  |L8.82|
000052  1c49              ADDS     r1,r1,#1
                  |L8.84|
000054  780a              LDRB     r2,[r1,#0]
000056  2a23              CMP      r2,#0x23
000058  d0fb              BEQ      |L8.82|
;;;104    
;;;105            rt_kprintf(" 0x%08x 0x%08x 0x%08x 0x%08x %03d\n",
00005a  6b23              LDR      r3,[r4,#0x30]
00005c  6ca2              LDR      r2,[r4,#0x48]
00005e  e9cd2300          STRD     r2,r3,[sp,#0]
000062  8da2              LDRH     r2,[r4,#0x2c]
000064  1a09              SUBS     r1,r1,r0
000066  1a53              SUBS     r3,r2,r1
000068  69e1              LDR      r1,[r4,#0x1c]
00006a  1a40              SUBS     r0,r0,r1
00006c  1881              ADDS     r1,r0,r2
00006e  a016              ADR      r0,|L8.200|
000070  f7fffffe          BL       rt_kprintf
000074  682d              LDR      r5,[r5,#0]            ;92
                  |L8.118|
000076  42b5              CMP      r5,r6                 ;92
000078  d1cc              BNE      |L8.20|
;;;106                thread->stack_size + ((rt_uint32_t)thread->stack_addr - (rt_uint32_t)thread->sp),
;;;107                thread->stack_size,
;;;108                thread->stack_size - ((rt_uint32_t) ptr - (rt_uint32_t)thread->stack_addr),
;;;109                thread->remaining_tick,
;;;110                thread->error);
;;;111        }
;;;112    	
;;;113        return 0;
00007a  2000              MOVS     r0,#0
;;;114    }
00007c  bd7c              POP      {r2-r6,pc}
;;;115    
                          ENDP

00007e  0000              DCW      0x0000
                  |L8.128|
                          DCD      ||.conststring||+0x10c
                  |L8.132|
                          DCD      ||.conststring||+0x158
                  |L8.136|
000088  252d382e          DCB      "%-8.*s 0x%02x",0
00008c  2a732030
000090  78253032
000094  7800    
000096  00                DCB      0
000097  00                DCB      0
                  |L8.152|
000098  20726561          DCB      " ready  ",0
00009c  64792020
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L8.164|
0000a4  20737573          DCB      " suspend",0
0000a8  70656e64
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L8.176|
0000b0  20696e69          DCB      " init   ",0
0000b4  74202020
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L8.188|
0000bc  20636c6f          DCB      " close  ",0
0000c0  73652020
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L8.200|
0000c8  20307825          DCB      " 0x%08x 0x%08x 0x%08x 0x%08x %03d\n",0
0000cc  30387820
0000d0  30782530
0000d4  38782030
0000d8  78253038
0000dc  78203078
0000e0  25303878
0000e4  20253033
0000e8  640a00  
0000eb  00                DCB      0

                          AREA ||i._list_timer||, CODE, READONLY, ALIGN=2

                  _list_timer PROC
;;;412    
;;;413    static long _list_timer(struct rt_list_node *list)
000000  b5f8              PUSH     {r3-r7,lr}
;;;414    {
000002  4606              MOV      r6,r0
;;;415        struct rt_timer *timer;
;;;416        struct rt_list_node *node;
;;;417    
;;;418        rt_kprintf("timer    periodic   timeout    flag\n");
000004  a012              ADR      r0,|L9.80|
000006  f7fffffe          BL       rt_kprintf
;;;419        rt_kprintf("-------- ---------- ---------- -----------\n");
00000a  a01b              ADR      r0,|L9.120|
00000c  f7fffffe          BL       rt_kprintf
;;;420        for (node = list->next; node != list; node = node->next)
000010  6834              LDR      r4,[r6,#0]
000012  e012              B        |L9.58|
                  |L9.20|
;;;421        {
;;;422            timer = (struct rt_timer *)(rt_list_entry(node, struct rt_object, list));
;;;423            rt_kprintf("%-8.*s 0x%08x 0x%08x ",
000014  69e0              LDR      r0,[r4,#0x1c]
000016  9000              STR      r0,[sp,#0]
000018  f1a4050c          SUB      r5,r4,#0xc            ;422
00001c  462a              MOV      r2,r5
00001e  2108              MOVS     r1,#8
000020  a020              ADR      r0,|L9.164|
000022  69a3              LDR      r3,[r4,#0x18]
000024  f7fffffe          BL       rt_kprintf
;;;424                       RT_NAME_MAX,
;;;425                       timer->parent.name,
;;;426                       timer->init_tick,
;;;427                       timer->timeout_tick);
;;;428            if (timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
000028  7a68              LDRB     r0,[r5,#9]
00002a  07c0              LSLS     r0,r0,#31
00002c  d001              BEQ      |L9.50|
;;;429                rt_kprintf("activated\n");
00002e  a023              ADR      r0,|L9.188|
000030  e000              B        |L9.52|
                  |L9.50|
;;;430            else
;;;431                rt_kprintf("deactivated\n");
000032  a025              ADR      r0,|L9.200|
                  |L9.52|
000034  f7fffffe          BL       rt_kprintf
000038  6824              LDR      r4,[r4,#0]            ;420
                  |L9.58|
00003a  42b4              CMP      r4,r6                 ;420
00003c  d1ea              BNE      |L9.20|
;;;432        }
;;;433    
;;;434        rt_kprintf("current tick:0x%08x\n", rt_tick_get());
00003e  f7fffffe          BL       rt_tick_get
000042  4601              MOV      r1,r0
000044  a024              ADR      r0,|L9.216|
000046  f7fffffe          BL       rt_kprintf
;;;435    
;;;436        return 0;
00004a  2000              MOVS     r0,#0
;;;437    }
00004c  bdf8              POP      {r3-r7,pc}
;;;438    
                          ENDP

00004e  0000              DCW      0x0000
                  |L9.80|
000050  74696d65          DCB      "timer    periodic   timeout    flag\n",0
000054  72202020
000058  20706572
00005c  696f6469
000060  63202020
000064  74696d65
000068  6f757420
00006c  20202066
000070  6c61670a
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
                  |L9.120|
000078  2d2d2d2d          DCB      "-------- ---------- ---------- -----------\n",0
00007c  2d2d2d2d
000080  202d2d2d
000084  2d2d2d2d
000088  2d2d2d20
00008c  2d2d2d2d
000090  2d2d2d2d
000094  2d2d202d
000098  2d2d2d2d
00009c  2d2d2d2d
0000a0  2d2d0a00
                  |L9.164|
0000a4  252d382e          DCB      "%-8.*s 0x%08x 0x%08x ",0
0000a8  2a732030
0000ac  78253038
0000b0  78203078
0000b4  25303878
0000b8  2000    
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L9.188|
0000bc  61637469          DCB      "activated\n",0
0000c0  76617465
0000c4  640a00  
0000c7  00                DCB      0
                  |L9.200|
0000c8  64656163          DCB      "deactivated\n",0
0000cc  74697661
0000d0  7465640a
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L9.216|
0000d8  63757272          DCB      "current tick:0x%08x\n",0
0000dc  656e7420
0000e0  7469636b
0000e4  3a307825
0000e8  3038780a
0000ec  00      
0000ed  00                DCB      0
0000ee  00                DCB      0
0000ef  00                DCB      0

                          AREA ||i.hello||, CODE, READONLY, ALIGN=2

                  hello PROC
;;;63     
;;;64     long hello(void)
000000  b510              PUSH     {r4,lr}
;;;65     {
;;;66         rt_kprintf("Hello RT-Thread!\n");
000002  a002              ADR      r0,|L10.12|
000004  f7fffffe          BL       rt_kprintf
;;;67     
;;;68         return 0;
000008  2000              MOVS     r0,#0
;;;69     }
00000a  bd10              POP      {r4,pc}
;;;70     FINSH_FUNCTION_EXPORT(hello, say hello world);
                          ENDP

                  |L10.12|
00000c  48656c6c          DCB      "Hello RT-Thread!\n",0
000010  6f205254
000014  2d546872
000018  65616421
00001c  0a00    
00001e  00                DCB      0
00001f  00                DCB      0

                          AREA ||i.list||, CODE, READONLY, ALIGN=2

                  list PROC
;;;627    
;;;628    long list(void)
000000  b570              PUSH     {r4-r6,lr}
;;;629    {
;;;630    #ifndef FINSH_USING_MSH_ONLY
;;;631        struct finsh_syscall_item *syscall_item;
;;;632        struct finsh_sysvar_item *sysvar_item;
;;;633    #endif
;;;634    	
;;;635        rt_kprintf("--Function List:\n");
000002  a01e              ADR      r0,|L11.124|
000004  f7fffffe          BL       rt_kprintf
;;;636        {
;;;637            struct finsh_syscall *index;
;;;638            for (index = _syscall_table_begin;
000008  4821              LDR      r0,|L11.144|
;;;639                 index < _syscall_table_end;
00000a  4d22              LDR      r5,|L11.148|
00000c  6804              LDR      r4,[r0,#0]            ;638  ; _syscall_table_begin
00000e  e00b              B        |L11.40|
                  |L11.16|
;;;640                 FINSH_NEXT_SYSCALL(index))
;;;641            {
;;;642    			/* skip the internal command */
;;;643    			if (strncmp((char*)index->name, "__", 2) == 0) continue;
000010  2202              MOVS     r2,#2
000012  a121              ADR      r1,|L11.152|
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       strncmp
00001a  b120              CBZ      r0,|L11.38|
;;;644    
;;;645    #ifdef FINSH_USING_DESCRIPTION
;;;646                rt_kprintf("%-16s -- %s\n", index->name, index->desc);
00001c  e9d41200          LDRD     r1,r2,[r4,#0]
000020  a01e              ADR      r0,|L11.156|
000022  f7fffffe          BL       rt_kprintf
                  |L11.38|
000026  340c              ADDS     r4,r4,#0xc
                  |L11.40|
000028  6828              LDR      r0,[r5,#0]            ;639  ; _syscall_table_end
00002a  4284              CMP      r4,r0                 ;639
00002c  d3f0              BCC      |L11.16|
;;;647    #else
;;;648                rt_kprintf("%s\n", index->name);
;;;649    #endif
;;;650            }
;;;651        }
;;;652    
;;;653    #ifndef FINSH_USING_MSH_ONLY
;;;654        /* list syscall list */
;;;655        syscall_item = global_syscall_list;
00002e  481f              LDR      r0,|L11.172|
;;;656        while (syscall_item != NULL)
000030  6804              LDR      r4,[r0,#0]  ; global_syscall_list
000032  e004              B        |L11.62|
                  |L11.52|
;;;657        {
;;;658            rt_kprintf("[l] %s\n", syscall_item->syscall.name);
000034  a01e              ADR      r0,|L11.176|
000036  6861              LDR      r1,[r4,#4]
000038  f7fffffe          BL       rt_kprintf
;;;659            syscall_item = syscall_item->next;
00003c  6824              LDR      r4,[r4,#0]
                  |L11.62|
00003e  2c00              CMP      r4,#0                 ;656
000040  d1f8              BNE      |L11.52|
;;;660        }
;;;661    
;;;662        rt_kprintf("--Variable List:\n");
000042  a01d              ADR      r0,|L11.184|
000044  f7fffffe          BL       rt_kprintf
;;;663        {
;;;664            struct finsh_sysvar *index;
;;;665            for (index = _sysvar_table_begin;
000048  4820              LDR      r0,|L11.204|
;;;666                 index < _sysvar_table_end;
00004a  4d21              LDR      r5,|L11.208|
00004c  6804              LDR      r4,[r0,#0]            ;665  ; _sysvar_table_begin
00004e  e005              B        |L11.92|
                  |L11.80|
;;;667                 FINSH_NEXT_SYSVAR(index))
;;;668            {
;;;669    #ifdef FINSH_USING_DESCRIPTION
;;;670                rt_kprintf("%-16s -- %s\n", index->name, index->desc);
000050  e9d41200          LDRD     r1,r2,[r4,#0]
000054  a011              ADR      r0,|L11.156|
000056  f7fffffe          BL       rt_kprintf
00005a  3410              ADDS     r4,r4,#0x10
                  |L11.92|
00005c  6828              LDR      r0,[r5,#0]            ;666  ; _sysvar_table_end
00005e  4284              CMP      r4,r0                 ;666
000060  d3f6              BCC      |L11.80|
;;;671    #else
;;;672                rt_kprintf("%s\n", index->name);
;;;673    #endif
;;;674            }
;;;675        }
;;;676    
;;;677        sysvar_item = global_sysvar_list;
000062  481c              LDR      r0,|L11.212|
;;;678        while (sysvar_item != NULL)
000064  6804              LDR      r4,[r0,#0]  ; global_sysvar_list
000066  e004              B        |L11.114|
                  |L11.104|
;;;679        {
;;;680            rt_kprintf("[l] %s\n", sysvar_item->sysvar.name);
000068  a011              ADR      r0,|L11.176|
00006a  6861              LDR      r1,[r4,#4]
00006c  f7fffffe          BL       rt_kprintf
;;;681            sysvar_item = sysvar_item->next;
000070  6824              LDR      r4,[r4,#0]
                  |L11.114|
000072  2c00              CMP      r4,#0                 ;678
000074  d1f8              BNE      |L11.104|
;;;682        }
;;;683    #endif
;;;684    	
;;;685        return 0;
000076  2000              MOVS     r0,#0
;;;686    }
000078  bd70              POP      {r4-r6,pc}
;;;687    FINSH_FUNCTION_EXPORT(list, list all symbol in system)
                          ENDP

00007a  0000              DCW      0x0000
                  |L11.124|
00007c  2d2d4675          DCB      "--Function List:\n",0
000080  6e637469
000084  6f6e204c
000088  6973743a
00008c  0a00    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L11.144|
                          DCD      _syscall_table_begin
                  |L11.148|
                          DCD      _syscall_table_end
                  |L11.152|
000098  5f5f00            DCB      "__",0
00009b  00                DCB      0
                  |L11.156|
00009c  252d3136          DCB      "%-16s -- %s\n",0
0000a0  73202d2d
0000a4  2025730a
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L11.172|
                          DCD      global_syscall_list
                  |L11.176|
0000b0  5b6c5d20          DCB      "[l] %s\n",0
0000b4  25730a00
                  |L11.184|
0000b8  2d2d5661          DCB      "--Variable List:\n",0
0000bc  72696162
0000c0  6c65204c
0000c4  6973743a
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L11.204|
                          DCD      _sysvar_table_begin
                  |L11.208|
                          DCD      _sysvar_table_end
                  |L11.212|
                          DCD      global_sysvar_list

                          AREA ||i.list_device||, CODE, READONLY, ALIGN=2

                  list_device PROC
;;;489    
;;;490    long list_device(void)
000000  4801              LDR      r0,|L12.8|
;;;491    {
;;;492        return _list_device(&rt_object_container[RT_Object_Class_Device].object_list);
000002  f7ffbffe          B.W      _list_device
;;;493    }
;;;494    FINSH_FUNCTION_EXPORT(list_device, list device in system);
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      rt_object_container+0x74

                          AREA ||i.list_event||, CODE, READONLY, ALIGN=2

                  list_event PROC
;;;210    
;;;211    long list_event(void)
000000  4801              LDR      r0,|L13.8|
;;;212    {
;;;213        return _list_event(&rt_object_container[RT_Object_Class_Event].object_list);
000002  f7ffbffe          B.W      _list_event
;;;214    }
;;;215    FINSH_FUNCTION_EXPORT(list_event, list event in system);
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      rt_object_container+0x34

                          AREA ||i.list_mailbox||, CODE, READONLY, ALIGN=2

                  list_mailbox PROC
;;;285    
;;;286    long list_mailbox(void)
000000  4801              LDR      r0,|L14.8|
;;;287    {
;;;288        return _list_mailbox(&rt_object_container[RT_Object_Class_MailBox].object_list);
000002  f7ffbffe          B.W      _list_mailbox
;;;289    }
;;;290    FINSH_FUNCTION_EXPORT(list_mailbox, list mail box in system);
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      rt_object_container+0x44

                          AREA ||i.list_mempool||, CODE, READONLY, ALIGN=2

                  list_mempool PROC
;;;404    
;;;405    long list_mempool(void)
000000  4801              LDR      r0,|L15.8|
;;;406    {
;;;407        return _list_mempool(&rt_object_container[RT_Object_Class_MemPool].object_list);
000002  f7ffbffe          B.W      _list_mempool
;;;408    }
;;;409    FINSH_FUNCTION_EXPORT(list_mempool, list memory pool in system)
                          ENDP

000006  0000              DCW      0x0000
                  |L15.8|
                          DCD      rt_object_container+0x64

                          AREA ||i.list_msgqueue||, CODE, READONLY, ALIGN=2

                  list_msgqueue PROC
;;;327    
;;;328    long list_msgqueue(void)
000000  4801              LDR      r0,|L16.8|
;;;329    {
;;;330        return _list_msgqueue(&rt_object_container[RT_Object_Class_MessageQueue].object_list);
000002  f7ffbffe          B.W      _list_msgqueue
;;;331    }
;;;332    FINSH_FUNCTION_EXPORT(list_msgqueue, list message queue in system);
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      rt_object_container+0x54

                          AREA ||i.list_mutex||, CODE, READONLY, ALIGN=2

                  list_mutex PROC
;;;241    
;;;242    long list_mutex(void)
000000  4801              LDR      r0,|L17.8|
;;;243    {
;;;244        return _list_mutex(&rt_object_container[RT_Object_Class_Mutex].object_list);
000002  f7ffbffe          B.W      _list_mutex
;;;245    }
;;;246    FINSH_FUNCTION_EXPORT(list_mutex, list mutex in system);
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      rt_object_container+0x24

                          AREA ||i.list_prefix||, CODE, READONLY, ALIGN=2

                  list_prefix PROC
;;;716    
;;;717    void list_prefix(char *prefix)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;718    {
000004  4607              MOV      r7,r0
;;;719        struct finsh_syscall_item *syscall_item;
;;;720        struct finsh_sysvar_item *sysvar_item;
;;;721        rt_uint16_t func_cnt, var_cnt;
;;;722        int length, min_length;
;;;723        const char *name_ptr;
;;;724    
;;;725        func_cnt = 0;
000006  f04f0800          MOV      r8,#0
;;;726        var_cnt  = 0;
;;;727        min_length = 0;
;;;728        name_ptr = RT_NULL;
;;;729    
;;;730        /* checks in system function call */
;;;731        {
;;;732            struct finsh_syscall *index;
;;;733            for (index = _syscall_table_begin;
00000a  4862              LDR      r0,|L18.404|
00000c  46c1              MOV      r9,r8                 ;726
00000e  4645              MOV      r5,r8                 ;727
000010  4646              MOV      r6,r8                 ;728
;;;734                 index < _syscall_table_end;
000012  f8dfa184          LDR      r10,|L18.408|
000016  6804              LDR      r4,[r0,#0]            ;718  ; _syscall_table_begin
000018  e029              B        |L18.110|
                  |L18.26|
;;;735                 FINSH_NEXT_SYSCALL(index))
;;;736            {
;;;737    			/* skip internal command */
;;;738    			if (str_is_prefix("__", index->name) == 0) continue;
00001a  a060              ADR      r0,|L18.412|
00001c  6821              LDR      r1,[r4,#0]
00001e  f7fffffe          BL       str_is_prefix
000022  b318              CBZ      r0,|L18.108|
;;;739    			
;;;740                if (str_is_prefix(prefix, index->name) == 0)
000024  4638              MOV      r0,r7
000026  6821              LDR      r1,[r4,#0]
000028  f7fffffe          BL       str_is_prefix
00002c  b9f0              CBNZ     r0,|L18.108|
;;;741                {
;;;742                    if (func_cnt == 0)
00002e  f1b80f00          CMP      r8,#0
000032  d109              BNE      |L18.72|
;;;743                    {
;;;744                        rt_kprintf("--function:\n");
000034  a05a              ADR      r0,|L18.416|
000036  f7fffffe          BL       rt_kprintf
;;;745    
;;;746                        if (*prefix != 0)
00003a  7838              LDRB     r0,[r7,#0]
00003c  b120              CBZ      r0,|L18.72|
;;;747                        {
;;;748                            /* set name_ptr */
;;;749                            name_ptr = index->name;
;;;750    
;;;751                            /* set initial length */
;;;752                            min_length = strlen(name_ptr);
00003e  6826              LDR      r6,[r4,#0]
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       strlen
000046  4605              MOV      r5,r0
                  |L18.72|
;;;753                        }
;;;754                    }
;;;755    
;;;756                    func_cnt ++;
000048  f1080001          ADD      r0,r8,#1
00004c  fa1ff880          UXTH     r8,r0
;;;757    
;;;758                    if (*prefix != 0)
000050  7838              LDRB     r0,[r7,#0]
000052  b130              CBZ      r0,|L18.98|
;;;759                    {
;;;760                        length = str_common(name_ptr, index->name);
000054  4630              MOV      r0,r6
000056  6821              LDR      r1,[r4,#0]
000058  f7fffffe          BL       str_common
;;;761                        if (length < min_length)
00005c  42a8              CMP      r0,r5
00005e  da00              BGE      |L18.98|
;;;762                            min_length = length;
000060  4605              MOV      r5,r0
                  |L18.98|
;;;763                    }
;;;764    
;;;765    #ifdef FINSH_USING_DESCRIPTION
;;;766                    rt_kprintf("%-16s -- %s\n", index->name, index->desc);
000062  e9d41200          LDRD     r1,r2,[r4,#0]
000066  a052              ADR      r0,|L18.432|
000068  f7fffffe          BL       rt_kprintf
                  |L18.108|
00006c  340c              ADDS     r4,r4,#0xc
                  |L18.110|
00006e  f8da0000          LDR      r0,[r10,#0]           ;734  ; _syscall_table_end
000072  4284              CMP      r4,r0                 ;734
000074  d3d1              BCC      |L18.26|
;;;767    #else
;;;768                    rt_kprintf("%s\n", index->name);
;;;769    #endif
;;;770                }
;;;771            }
;;;772        }
;;;773    
;;;774        /* checks in dynamic system function call */
;;;775        syscall_item = global_syscall_list;
000076  4852              LDR      r0,|L18.448|
;;;776        while (syscall_item != NULL)
000078  6804              LDR      r4,[r0,#0]  ; global_syscall_list
00007a  e024              B        |L18.198|
                  |L18.124|
;;;777        {
;;;778            if (str_is_prefix(prefix, syscall_item->syscall.name) == 0)
00007c  4638              MOV      r0,r7
00007e  6861              LDR      r1,[r4,#4]
000080  f7fffffe          BL       str_is_prefix
000084  b9f0              CBNZ     r0,|L18.196|
;;;779            {
;;;780                if (func_cnt == 0)
000086  f1b80f00          CMP      r8,#0
00008a  d10a              BNE      |L18.162|
;;;781                {
;;;782                    rt_kprintf("--function:\n");
00008c  a044              ADR      r0,|L18.416|
00008e  f7fffffe          BL       rt_kprintf
;;;783                    if (*prefix != 0 && name_ptr == NULL)
000092  7838              LDRB     r0,[r7,#0]
000094  b128              CBZ      r0,|L18.162|
000096  b926              CBNZ     r6,|L18.162|
;;;784                    {
;;;785                        /* set name_ptr */
;;;786                        name_ptr = syscall_item->syscall.name;
;;;787    
;;;788                        /* set initial length */
;;;789                        min_length = strlen(name_ptr);
000098  6866              LDR      r6,[r4,#4]
00009a  4630              MOV      r0,r6
00009c  f7fffffe          BL       strlen
0000a0  4605              MOV      r5,r0
                  |L18.162|
;;;790                    }
;;;791                }
;;;792    
;;;793                func_cnt ++;
0000a2  f1080001          ADD      r0,r8,#1
0000a6  fa1ff880          UXTH     r8,r0
;;;794    
;;;795                if (*prefix != 0)
0000aa  7838              LDRB     r0,[r7,#0]
0000ac  b130              CBZ      r0,|L18.188|
;;;796                {
;;;797                    length = str_common(name_ptr, syscall_item->syscall.name);
0000ae  4630              MOV      r0,r6
0000b0  6861              LDR      r1,[r4,#4]
0000b2  f7fffffe          BL       str_common
;;;798                    if (length < min_length)
0000b6  42a8              CMP      r0,r5
0000b8  da00              BGE      |L18.188|
;;;799                        min_length = length;
0000ba  4605              MOV      r5,r0
                  |L18.188|
;;;800                }
;;;801    
;;;802                rt_kprintf("[l] %s\n", syscall_item->syscall.name);
0000bc  a041              ADR      r0,|L18.452|
0000be  6861              LDR      r1,[r4,#4]
0000c0  f7fffffe          BL       rt_kprintf
                  |L18.196|
;;;803            }
;;;804            syscall_item = syscall_item->next;
0000c4  6824              LDR      r4,[r4,#0]
                  |L18.198|
0000c6  2c00              CMP      r4,#0                 ;776
0000c8  d1d8              BNE      |L18.124|
;;;805        }
;;;806    
;;;807        /* checks in system variable */
;;;808        {
;;;809            struct finsh_sysvar* index;
;;;810            for (index = _sysvar_table_begin;
0000ca  4840              LDR      r0,|L18.460|
;;;811                 index < _sysvar_table_end;
0000cc  f8df8100          LDR      r8,|L18.464|
0000d0  6804              LDR      r4,[r0,#0]            ;810  ; _sysvar_table_begin
0000d2  e025              B        |L18.288|
                  |L18.212|
;;;812                 FINSH_NEXT_SYSVAR(index))
;;;813            {
;;;814                if (str_is_prefix(prefix, index->name) == 0)
0000d4  4638              MOV      r0,r7
0000d6  6821              LDR      r1,[r4,#0]
0000d8  f7fffffe          BL       str_is_prefix
0000dc  b9f8              CBNZ     r0,|L18.286|
;;;815                {
;;;816                    if (var_cnt == 0)
0000de  f1b90f00          CMP      r9,#0
0000e2  d10a              BNE      |L18.250|
;;;817                    {
;;;818                        rt_kprintf("--variable:\n");
0000e4  a03b              ADR      r0,|L18.468|
0000e6  f7fffffe          BL       rt_kprintf
;;;819    
;;;820                        if (*prefix != 0 && name_ptr == NULL)
0000ea  7838              LDRB     r0,[r7,#0]
0000ec  b128              CBZ      r0,|L18.250|
0000ee  b926              CBNZ     r6,|L18.250|
;;;821                        {
;;;822                            /* set name_ptr */
;;;823                            name_ptr = index->name;
;;;824    
;;;825                            /* set initial length */
;;;826                            min_length = strlen(name_ptr);
0000f0  6826              LDR      r6,[r4,#0]
0000f2  4630              MOV      r0,r6
0000f4  f7fffffe          BL       strlen
0000f8  4605              MOV      r5,r0
                  |L18.250|
;;;827    
;;;828                        }
;;;829                    }
;;;830    
;;;831                    var_cnt ++;
0000fa  f1090001          ADD      r0,r9,#1
0000fe  fa1ff980          UXTH     r9,r0
;;;832    
;;;833                    if (*prefix != 0)
000102  7838              LDRB     r0,[r7,#0]
000104  b130              CBZ      r0,|L18.276|
;;;834                    {
;;;835                        length = str_common(name_ptr, index->name);
000106  4630              MOV      r0,r6
000108  6821              LDR      r1,[r4,#0]
00010a  f7fffffe          BL       str_common
;;;836                        if (length < min_length)
00010e  42a8              CMP      r0,r5
000110  da00              BGE      |L18.276|
;;;837                            min_length = length;
000112  4605              MOV      r5,r0
                  |L18.276|
;;;838                    }
;;;839    
;;;840    #ifdef FINSH_USING_DESCRIPTION
;;;841                    rt_kprintf("%-16s -- %s\n", index->name, index->desc);
000114  e9d41200          LDRD     r1,r2,[r4,#0]
000118  a025              ADR      r0,|L18.432|
00011a  f7fffffe          BL       rt_kprintf
                  |L18.286|
00011e  3410              ADDS     r4,r4,#0x10
                  |L18.288|
000120  f8d80000          LDR      r0,[r8,#0]            ;811  ; _sysvar_table_end
000124  4284              CMP      r4,r0                 ;811
000126  d3d5              BCC      |L18.212|
;;;842    #else
;;;843                    rt_kprintf("%s\n", index->name);
;;;844    #endif
;;;845                }
;;;846            }
;;;847        }
;;;848    
;;;849        /* checks in dynamic system variable */
;;;850        sysvar_item = global_sysvar_list;
000128  482e              LDR      r0,|L18.484|
;;;851        while (sysvar_item != NULL)
00012a  6804              LDR      r4,[r0,#0]  ; global_sysvar_list
00012c  e024              B        |L18.376|
                  |L18.302|
;;;852        {
;;;853            if (str_is_prefix(prefix, sysvar_item->sysvar.name) == 0)
00012e  4638              MOV      r0,r7
000130  6861              LDR      r1,[r4,#4]
000132  f7fffffe          BL       str_is_prefix
000136  b9f0              CBNZ     r0,|L18.374|
;;;854            {
;;;855                if (var_cnt == 0)
000138  f1b90f00          CMP      r9,#0
00013c  d10a              BNE      |L18.340|
;;;856                {
;;;857                    rt_kprintf("--variable:\n");
00013e  a025              ADR      r0,|L18.468|
000140  f7fffffe          BL       rt_kprintf
;;;858                    if (*prefix != 0 && name_ptr == NULL)
000144  7838              LDRB     r0,[r7,#0]
000146  b128              CBZ      r0,|L18.340|
000148  b926              CBNZ     r6,|L18.340|
;;;859                    {
;;;860                        /* set name_ptr */
;;;861                        name_ptr = sysvar_item->sysvar.name;
;;;862    
;;;863                        /* set initial length */
;;;864                        min_length = strlen(name_ptr);
00014a  6866              LDR      r6,[r4,#4]
00014c  4630              MOV      r0,r6
00014e  f7fffffe          BL       strlen
000152  4605              MOV      r5,r0
                  |L18.340|
;;;865                    }
;;;866                }
;;;867    
;;;868                var_cnt ++;
000154  f1090001          ADD      r0,r9,#1
000158  fa1ff980          UXTH     r9,r0
;;;869    
;;;870                if (*prefix != 0)
00015c  7838              LDRB     r0,[r7,#0]
00015e  b130              CBZ      r0,|L18.366|
;;;871                {
;;;872                    length = str_common(name_ptr, sysvar_item->sysvar.name);
000160  4630              MOV      r0,r6
000162  6861              LDR      r1,[r4,#4]
000164  f7fffffe          BL       str_common
;;;873                    if (length < min_length)
000168  42a8              CMP      r0,r5
00016a  da00              BGE      |L18.366|
;;;874                        min_length = length;
00016c  4605              MOV      r5,r0
                  |L18.366|
;;;875                }
;;;876    
;;;877                rt_kprintf("[v] %s\n", sysvar_item->sysvar.name);
00016e  a01e              ADR      r0,|L18.488|
000170  6861              LDR      r1,[r4,#4]
000172  f7fffffe          BL       rt_kprintf
                  |L18.374|
;;;878            }
;;;879            sysvar_item = sysvar_item->next;
000176  6824              LDR      r4,[r4,#0]
                  |L18.376|
000178  2c00              CMP      r4,#0                 ;851
00017a  d1d8              BNE      |L18.302|
;;;880        }
;;;881    
;;;882        /* only one matched */
;;;883        if (name_ptr != NULL)
00017c  2e00              CMP      r6,#0
00017e  d006              BEQ      |L18.398|
;;;884        {
;;;885            rt_strncpy(prefix, name_ptr, min_length);
000180  462a              MOV      r2,r5
000182  4631              MOV      r1,r6
000184  4638              MOV      r0,r7
000186  e8bd47f0          POP      {r4-r10,lr}
00018a  f7ffbffe          B.W      rt_strncpy
                  |L18.398|
;;;886        }
;;;887    }
00018e  e8bd87f0          POP      {r4-r10,pc}
;;;888    #endif
                          ENDP

000192  0000              DCW      0x0000
                  |L18.404|
                          DCD      _syscall_table_begin
                  |L18.408|
                          DCD      _syscall_table_end
                  |L18.412|
00019c  5f5f00            DCB      "__",0
00019f  00                DCB      0
                  |L18.416|
0001a0  2d2d6675          DCB      "--function:\n",0
0001a4  6e637469
0001a8  6f6e3a0a
0001ac  00      
0001ad  00                DCB      0
0001ae  00                DCB      0
0001af  00                DCB      0
                  |L18.432|
0001b0  252d3136          DCB      "%-16s -- %s\n",0
0001b4  73202d2d
0001b8  2025730a
0001bc  00      
0001bd  00                DCB      0
0001be  00                DCB      0
0001bf  00                DCB      0
                  |L18.448|
                          DCD      global_syscall_list
                  |L18.452|
0001c4  5b6c5d20          DCB      "[l] %s\n",0
0001c8  25730a00
                  |L18.460|
                          DCD      _sysvar_table_begin
                  |L18.464|
                          DCD      _sysvar_table_end
                  |L18.468|
0001d4  2d2d7661          DCB      "--variable:\n",0
0001d8  72696162
0001dc  6c653a0a
0001e0  00      
0001e1  00                DCB      0
0001e2  00                DCB      0
0001e3  00                DCB      0
                  |L18.484|
                          DCD      global_sysvar_list
                  |L18.488|
0001e8  5b765d20          DCB      "[v] %s\n",0
0001ec  25730a00

                          AREA ||i.list_sem||, CODE, READONLY, ALIGN=2

                  list_sem PROC
;;;171    
;;;172    long list_sem(void)
000000  4801              LDR      r0,|L19.8|
;;;173    {
;;;174        return _list_sem(&rt_object_container[RT_Object_Class_Semaphore].object_list);
000002  f7ffbffe          B.W      _list_sem
;;;175    }
;;;176    FINSH_FUNCTION_EXPORT(list_sem, list semaphone in system);
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      rt_object_container+0x14

                          AREA ||i.list_thread||, CODE, READONLY, ALIGN=2

                  list_thread PROC
;;;115    
;;;116    long list_thread(void)
000000  4801              LDR      r0,|L20.8|
;;;117    {
;;;118        return _list_thread(&rt_object_container[RT_Object_Class_Thread].object_list);
000002  f7ffbffe          B.W      _list_thread
;;;119    }
;;;120    FINSH_FUNCTION_EXPORT(list_thread, list thread);
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      rt_object_container+0x4

                          AREA ||i.list_timer||, CODE, READONLY, ALIGN=2

                  list_timer PROC
;;;438    
;;;439    long list_timer(void)
000000  4801              LDR      r0,|L21.8|
;;;440    {
;;;441        return _list_timer(&rt_object_container[RT_Object_Class_Timer].object_list);
000002  f7ffbffe          B.W      _list_timer
;;;442    }
;;;443    FINSH_FUNCTION_EXPORT(list_timer, list timer in system);
                          ENDP

000006  0000              DCW      0x0000
                  |L21.8|
                          DCD      rt_object_container+0x84

                          AREA ||i.rt_list_isempty||, CODE, READONLY, ALIGN=1

                  rt_list_isempty PROC
;;;101     */
;;;102    rt_inline int rt_list_isempty(const rt_list_t *l)
000000  6801              LDR      r1,[r0,#0]
;;;103    {
;;;104        return l->next == l;
000002  4281              CMP      r1,r0
000004  d101              BNE      |L22.10|
000006  2001              MOVS     r0,#1
;;;105    }
000008  4770              BX       lr
                  |L22.10|
00000a  2000              MOVS     r0,#0                 ;104
00000c  4770              BX       lr
;;;106    
                          ENDP


                          AREA ||i.rt_list_len||, CODE, READONLY, ALIGN=1

                  rt_list_len PROC
;;;50     
;;;51     rt_inline unsigned int rt_list_len(const rt_list_t *l)
000000  4602              MOV      r2,r0
;;;52     {
;;;53         unsigned int len = 0;
000002  2000              MOVS     r0,#0
;;;54         const rt_list_t *p = l;
000004  4611              MOV      r1,r2
000006  e000              B        |L23.10|
                  |L23.8|
000008  1c40              ADDS     r0,r0,#1              ;52
                  |L23.10|
;;;55         while (p->next != l)
00000a  6809              LDR      r1,[r1,#0]
00000c  4291              CMP      r1,r2
00000e  d1fb              BNE      |L23.8|
;;;56         {
;;;57             p = p->next;
;;;58             len ++;
;;;59         }
;;;60     
;;;61         return len;
;;;62     }
000010  4770              BX       lr
;;;63     
                          ENDP


                          AREA ||i.show_wait_queue||, CODE, READONLY, ALIGN=2

                  show_wait_queue PROC
;;;122    
;;;123    static void show_wait_queue(struct rt_list_node *list)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4605              MOV      r5,r0
000004  6804              LDR      r4,[r0,#0]
000006  e00b              B        |L24.32|
                  |L24.8|
;;;125        struct rt_thread *thread;
;;;126        struct rt_list_node *node;
;;;127    
;;;128        for (node = list->next; node != list; node = node->next)
;;;129        {
;;;130            thread = rt_list_entry(node, struct rt_thread, tlist);
000008  f1a40114          SUB      r1,r4,#0x14
;;;131            rt_kprintf("%s", thread->name);
00000c  a006              ADR      r0,|L24.40|
00000e  f7fffffe          BL       rt_kprintf
;;;132    
;;;133            if (node->next != list)
000012  6820              LDR      r0,[r4,#0]
000014  42a8              CMP      r0,r5
000016  d002              BEQ      |L24.30|
;;;134                rt_kprintf("/");
000018  a004              ADR      r0,|L24.44|
00001a  f7fffffe          BL       rt_kprintf
                  |L24.30|
00001e  6824              LDR      r4,[r4,#0]            ;128
                  |L24.32|
000020  42ac              CMP      r4,r5                 ;128
000022  d1f1              BNE      |L24.8|
;;;135        }
;;;136    }
000024  bd70              POP      {r4-r6,pc}
;;;137    
                          ENDP

000026  0000              DCW      0x0000
                  |L24.40|
000028  257300            DCB      "%s",0
00002b  00                DCB      0
                  |L24.44|
00002c  2f00              DCB      "/",0
00002e  00                DCB      0
00002f  00                DCB      0

                          AREA ||i.str_common||, CODE, READONLY, ALIGN=1

                  str_common PROC
;;;703    
;;;704    static int str_common(const char *str1, const char *str2)
000000  b510              PUSH     {r4,lr}
;;;705    {
;;;706        const char *str = str1;
000002  4602              MOV      r2,r0
000004  e001              B        |L25.10|
                  |L25.6|
000006  1c49              ADDS     r1,r1,#1              ;705
000008  1c52              ADDS     r2,r2,#1              ;705
                  |L25.10|
;;;707    
;;;708        while ((*str != 0) && (*str2 != 0) && (*str == *str2))
00000a  7814              LDRB     r4,[r2,#0]
00000c  b11c              CBZ      r4,|L25.22|
00000e  780b              LDRB     r3,[r1,#0]
000010  b10b              CBZ      r3,|L25.22|
000012  429c              CMP      r4,r3
000014  d0f7              BEQ      |L25.6|
                  |L25.22|
;;;709        {
;;;710            str ++;
;;;711            str2 ++;
;;;712        }
;;;713    
;;;714        return (str - str1);
000016  1a10              SUBS     r0,r2,r0
;;;715    }
000018  bd10              POP      {r4,pc}
;;;716    
                          ENDP


                          AREA ||i.str_is_prefix||, CODE, READONLY, ALIGN=1

                  str_is_prefix PROC
;;;689    #ifndef FINSH_USING_MSH_ONLY
;;;690    static int str_is_prefix(const char *prefix, const char *str)
000000  e001              B        |L26.6|
                  |L26.2|
;;;691    {
;;;692        while ((*prefix) && (*prefix == *str))
;;;693        {
;;;694            prefix ++;
;;;695            str ++;
000002  1c40              ADDS     r0,r0,#1
000004  1c49              ADDS     r1,r1,#1
                  |L26.6|
000006  7802              LDRB     r2,[r0,#0]            ;692
000008  b12a              CBZ      r2,|L26.22|
00000a  780b              LDRB     r3,[r1,#0]            ;692
00000c  429a              CMP      r2,r3                 ;692
00000e  d0f8              BEQ      |L26.2|
;;;696        }
;;;697    
;;;698        if (*prefix == 0)
;;;699            return 0;
;;;700    
;;;701        return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
;;;702    }
000014  4770              BX       lr
                  |L26.22|
000016  2000              MOVS     r0,#0                 ;699
000018  4770              BX       lr
;;;703    
                          ENDP


                          AREA ||i.version||, CODE, READONLY, ALIGN=1

                  version PROC
;;;72     extern void rt_show_version(void);
;;;73     long version(void)
000000  b510              PUSH     {r4,lr}
;;;74     {
;;;75         rt_show_version();
000002  f7fffffe          BL       rt_show_version
;;;76     
;;;77         return 0;
000006  2000              MOVS     r0,#0
;;;78     }
000008  bd10              POP      {r4,pc}
;;;79     FINSH_FUNCTION_EXPORT(version, show RT-Thread version information);
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __fsym_hello_name
000000  68656c6c          DCB      0x68,0x65,0x6c,0x6c
000004  6f00              DCB      0x6f,0x00

                          AREA ||area_number.31||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.constdata||
                  __fsym_hello_desc
000000  73617920          DCB      0x73,0x61,0x79,0x20
000004  68656c6c          DCB      0x68,0x65,0x6c,0x6c
000008  6f20776f          DCB      0x6f,0x20,0x77,0x6f
00000c  726c6400          DCB      0x72,0x6c,0x64,0x00

                          AREA ||area_number.32||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.constdata||
                  __fsym_version_name
000000  76657273          DCB      0x76,0x65,0x72,0x73
000004  696f6e00          DCB      0x69,0x6f,0x6e,0x00

                          AREA ||area_number.33||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.constdata||
                  __fsym_version_desc
000000  73686f77          DCB      0x73,0x68,0x6f,0x77
000004  2052542d          DCB      0x20,0x52,0x54,0x2d
000008  54687265          DCB      0x54,0x68,0x72,0x65
00000c  61642076          DCB      0x61,0x64,0x20,0x76
000010  65727369          DCB      0x65,0x72,0x73,0x69
000014  6f6e2069          DCB      0x6f,0x6e,0x20,0x69
000018  6e666f72          DCB      0x6e,0x66,0x6f,0x72
00001c  6d617469          DCB      0x6d,0x61,0x74,0x69
000020  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||area_number.34||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.constdata||
                  __fsym_list_thread_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f746872          DCB      0x5f,0x74,0x68,0x72
000008  65616400          DCB      0x65,0x61,0x64,0x00

                          AREA ||area_number.35||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.constdata||
                  __fsym_list_thread_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20746872          DCB      0x20,0x74,0x68,0x72
000008  65616400          DCB      0x65,0x61,0x64,0x00

                          AREA ||area_number.36||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.constdata||
                  __fsym_list_sem_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f73656d          DCB      0x5f,0x73,0x65,0x6d
000008  00                DCB      0x00

                          AREA ||area_number.37||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.37||, ||.constdata||
                  __fsym_list_sem_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  2073656d          DCB      0x20,0x73,0x65,0x6d
000008  6170686f          DCB      0x61,0x70,0x68,0x6f
00000c  6e652069          DCB      0x6e,0x65,0x20,0x69
000010  6e207379          DCB      0x6e,0x20,0x73,0x79
000014  7374656d          DCB      0x73,0x74,0x65,0x6d
000018  00                DCB      0x00

                          AREA ||area_number.38||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.38||, ||.constdata||
                  __fsym_list_event_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f657665          DCB      0x5f,0x65,0x76,0x65
000008  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||area_number.39||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.constdata||
                  __fsym_list_event_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20657665          DCB      0x20,0x65,0x76,0x65
000008  6e742069          DCB      0x6e,0x74,0x20,0x69
00000c  6e207379          DCB      0x6e,0x20,0x73,0x79
000010  7374656d          DCB      0x73,0x74,0x65,0x6d
000014  00                DCB      0x00

                          AREA ||area_number.40||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.constdata||
                  __fsym_list_mutex_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f6d7574          DCB      0x5f,0x6d,0x75,0x74
000008  657800            DCB      0x65,0x78,0x00

                          AREA ||area_number.41||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.41||, ||.constdata||
                  __fsym_list_mutex_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  206d7574          DCB      0x20,0x6d,0x75,0x74
000008  65782069          DCB      0x65,0x78,0x20,0x69
00000c  6e207379          DCB      0x6e,0x20,0x73,0x79
000010  7374656d          DCB      0x73,0x74,0x65,0x6d
000014  00                DCB      0x00

                          AREA ||area_number.42||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.42||, ||.constdata||
                  __fsym_list_mailbox_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f6d6169          DCB      0x5f,0x6d,0x61,0x69
000008  6c626f78          DCB      0x6c,0x62,0x6f,0x78
00000c  00                DCB      0x00

                          AREA ||area_number.43||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.43||, ||.constdata||
                  __fsym_list_mailbox_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  206d6169          DCB      0x20,0x6d,0x61,0x69
000008  6c20626f          DCB      0x6c,0x20,0x62,0x6f
00000c  7820696e          DCB      0x78,0x20,0x69,0x6e
000010  20737973          DCB      0x20,0x73,0x79,0x73
000014  74656d00          DCB      0x74,0x65,0x6d,0x00

                          AREA ||area_number.44||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.44||, ||.constdata||
                  __fsym_list_msgqueue_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f6d7367          DCB      0x5f,0x6d,0x73,0x67
000008  71756575          DCB      0x71,0x75,0x65,0x75
00000c  6500              DCB      0x65,0x00

                          AREA ||area_number.45||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.constdata||
                  __fsym_list_msgqueue_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  206d6573          DCB      0x20,0x6d,0x65,0x73
000008  73616765          DCB      0x73,0x61,0x67,0x65
00000c  20717565          DCB      0x20,0x71,0x75,0x65
000010  75652069          DCB      0x75,0x65,0x20,0x69
000014  6e207379          DCB      0x6e,0x20,0x73,0x79
000018  7374656d          DCB      0x73,0x74,0x65,0x6d
00001c  00                DCB      0x00

                          AREA ||area_number.46||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.constdata||
                  __fsym_list_mempool_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f6d656d          DCB      0x5f,0x6d,0x65,0x6d
000008  706f6f6c          DCB      0x70,0x6f,0x6f,0x6c
00000c  00                DCB      0x00

                          AREA ||area_number.47||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.constdata||
                  __fsym_list_mempool_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  206d656d          DCB      0x20,0x6d,0x65,0x6d
000008  6f727920          DCB      0x6f,0x72,0x79,0x20
00000c  706f6f6c          DCB      0x70,0x6f,0x6f,0x6c
000010  20696e20          DCB      0x20,0x69,0x6e,0x20
000014  73797374          DCB      0x73,0x79,0x73,0x74
000018  656d00            DCB      0x65,0x6d,0x00

                          AREA ||area_number.48||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.constdata||
                  __fsym_list_timer_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f74696d          DCB      0x5f,0x74,0x69,0x6d
000008  657200            DCB      0x65,0x72,0x00

                          AREA ||area_number.49||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.constdata||
                  __fsym_list_timer_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  2074696d          DCB      0x20,0x74,0x69,0x6d
000008  65722069          DCB      0x65,0x72,0x20,0x69
00000c  6e207379          DCB      0x6e,0x20,0x73,0x79
000010  7374656d          DCB      0x73,0x74,0x65,0x6d
000014  00                DCB      0x00

                          AREA ||area_number.50||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.constdata||
                  __fsym_list_device_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f646576          DCB      0x5f,0x64,0x65,0x76
000008  69636500          DCB      0x69,0x63,0x65,0x00

                          AREA ||area_number.51||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.constdata||
                  __fsym_list_device_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20646576          DCB      0x20,0x64,0x65,0x76
000008  69636520          DCB      0x69,0x63,0x65,0x20
00000c  696e2073          DCB      0x69,0x6e,0x20,0x73
000010  79737465          DCB      0x79,0x73,0x74,0x65
000014  6d00              DCB      0x6d,0x00

                          AREA ||area_number.52||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.52||, ||.constdata||
                  __fsym_list_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  00                DCB      0x00

                          AREA ||area_number.53||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.53||, ||.constdata||
                  __fsym_list_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20616c6c          DCB      0x20,0x61,0x6c,0x6c
000008  2073796d          DCB      0x20,0x73,0x79,0x6d
00000c  626f6c20          DCB      0x62,0x6f,0x6c,0x20
000010  696e2073          DCB      0x69,0x6e,0x20,0x73
000014  79737465          DCB      0x79,0x73,0x74,0x65
000018  6d00              DCB      0x6d,0x00

                          AREA ||area_number.54||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.54||, ||.constdata||
                  __vsym_dummy_name
000000  64756d6d          DCB      0x64,0x75,0x6d,0x6d
000004  7900              DCB      0x79,0x00

                          AREA ||area_number.55||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.constdata||
                  __vsym_dummy_desc
000000  64756d6d          DCB      0x64,0x75,0x6d,0x6d
000004  79207661          DCB      0x79,0x20,0x76,0x61
000008  72696162          DCB      0x72,0x69,0x61,0x62
00000c  6c652066          DCB      0x6c,0x65,0x20,0x66
000010  6f722066          DCB      0x6f,0x72,0x20,0x66
000014  696e7368          DCB      0x69,0x6e,0x73,0x68
000018  00                DCB      0x00

                          AREA ||area_number.56||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.constdata||
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x14
                          DCD      ||.conststring||+0x24
                          DCD      ||.conststring||+0x38
                          DCD      ||.conststring||+0x44
                          DCD      ||.conststring||+0x50
                          DCD      ||.conststring||+0x54
                          DCD      ||.conststring||+0x64
                          DCD      ||.conststring||+0x74
                          DCD      ||.conststring||+0x7c
                          DCD      ||.conststring||+0x90
                          DCD      ||.conststring||+0xa0
                          DCD      ||.conststring||+0xa8
                          DCD      ||.conststring||+0xb4
                          DCD      ||.conststring||+0xc0
                          DCD      ||.conststring||+0xd4
                          DCD      ||.conststring||+0xdc
                          DCD      ||.conststring||+0xec
                          DCD      ||.conststring||+0x104

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  43686172          DCB      "Character Device",0
000004  61637465
000008  72204465
00000c  76696365
000010  00      
000011  00                DCB      0
000012  00                DCB      0
000013  00                DCB      0
000014  426c6f63          DCB      "Block Device",0
000018  6b204465
00001c  76696365
000020  00      
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
000024  4e657477          DCB      "Network Interface",0
000028  6f726b20
00002c  496e7465
000030  72666163
000034  6500    
000036  00                DCB      0
000037  00                DCB      0
000038  4d544420          DCB      "MTD Device",0
00003c  44657669
000040  636500  
000043  00                DCB      0
000044  43414e20          DCB      "CAN Device",0
000048  44657669
00004c  636500  
00004f  00                DCB      0
000050  52544300          DCB      "RTC",0
000054  536f756e          DCB      "Sound Device",0
000058  64204465
00005c  76696365
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
000064  47726170          DCB      "Graphic Device",0
000068  68696320
00006c  44657669
000070  636500  
000073  00                DCB      0
000074  49324320          DCB      "I2C Bus",0
000078  42757300
00007c  55534220          DCB      "USB Slave Device",0
000080  536c6176
000084  65204465
000088  76696365
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
000090  55534220          DCB      "USB Host Bus",0
000094  486f7374
000098  20427573
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
0000a0  53504920          DCB      "SPI Bus",0
0000a4  42757300
0000a8  53504920          DCB      "SPI Device",0
0000ac  44657669
0000b0  636500  
0000b3  00                DCB      0
0000b4  5344494f          DCB      "SDIO Bus",0
0000b8  20427573
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
0000c0  504d2050          DCB      "PM Pseudo Device",0
0000c4  73657564
0000c8  6f204465
0000cc  76696365
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
0000d4  50697065          DCB      "Pipe",0
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
0000dc  506f7274          DCB      "Portal Device",0
0000e0  616c2044
0000e4  65766963
0000e8  6500    
0000ea  00                DCB      0
0000eb  00                DCB      0
0000ec  4d697363          DCB      "Miscellaneous Device",0
0000f0  656c6c61
0000f4  6e656f75
0000f8  73204465
0000fc  76696365
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
000104  556e6b6e          DCB      "Unknown",0
000108  6f776e00
00010c  20746872          DCB      " thread  pri  status      sp     stack size max used   "
000110  65616420
000114  20707269
000118  20207374
00011c  61747573
000120  20202020
000124  20207370
000128  20202020
00012c  20737461
000130  636b2073
000134  697a6520
000138  6d617820
00013c  75736564
000140  202020  
000143  6c656674          DCB      "left tick  error\n",0
000147  20746963
00014b  6b202065
00014f  72726f72
000153  0a00    
000155  00                DCB      0
000156  00                DCB      0
000157  00                DCB      0
000158  2d2d2d2d          DCB      "-------- ---- ------- ---------- ---------- ---------- "
00015c  2d2d2d2d
000160  202d2d2d
000164  2d202d2d
000168  2d2d2d2d
00016c  2d202d2d
000170  2d2d2d2d
000174  2d2d2d2d
000178  202d2d2d
00017c  2d2d2d2d
000180  2d2d2d20
000184  2d2d2d2d
000188  2d2d2d2d
00018c  2d2d20  
00018f  2d2d2d2d          DCB      "---------- ---\n",0
000193  2d2d2d2d
000197  2d2d202d
00019b  2d2d0a00

                          AREA ||.data||, DATA, ALIGN=2

                  dummy
                          DCD      0x00000000

                          AREA FSymTab, DATA, READONLY, ALIGN=2

                  __fsym_hello
                          DCD      __fsym_hello_name
                          DCD      __fsym_hello_desc
                          DCD      hello

                          AREA ||area_number.60||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.60||, FSymTab
                  __fsym_version
                          DCD      __fsym_version_name
                          DCD      __fsym_version_desc
                          DCD      version

                          AREA ||area_number.61||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.61||, FSymTab
                  __fsym_list_thread
                          DCD      __fsym_list_thread_name
                          DCD      __fsym_list_thread_desc
                          DCD      list_thread

                          AREA ||area_number.62||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.62||, FSymTab
                  __fsym_list_sem
                          DCD      __fsym_list_sem_name
                          DCD      __fsym_list_sem_desc
                          DCD      list_sem

                          AREA ||area_number.63||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.63||, FSymTab
                  __fsym_list_event
                          DCD      __fsym_list_event_name
                          DCD      __fsym_list_event_desc
                          DCD      list_event

                          AREA ||area_number.64||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.64||, FSymTab
                  __fsym_list_mutex
                          DCD      __fsym_list_mutex_name
                          DCD      __fsym_list_mutex_desc
                          DCD      list_mutex

                          AREA ||area_number.65||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.65||, FSymTab
                  __fsym_list_mailbox
                          DCD      __fsym_list_mailbox_name
                          DCD      __fsym_list_mailbox_desc
                          DCD      list_mailbox

                          AREA ||area_number.66||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.66||, FSymTab
                  __fsym_list_msgqueue
                          DCD      __fsym_list_msgqueue_name
                          DCD      __fsym_list_msgqueue_desc
                          DCD      list_msgqueue

                          AREA ||area_number.67||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.67||, FSymTab
                  __fsym_list_mempool
                          DCD      __fsym_list_mempool_name
                          DCD      __fsym_list_mempool_desc
                          DCD      list_mempool

                          AREA ||area_number.68||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.68||, FSymTab
                  __fsym_list_timer
                          DCD      __fsym_list_timer_name
                          DCD      __fsym_list_timer_desc
                          DCD      list_timer

                          AREA ||area_number.69||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.69||, FSymTab
                  __fsym_list_device
                          DCD      __fsym_list_device_name
                          DCD      __fsym_list_device_desc
                          DCD      list_device

                          AREA ||area_number.70||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.70||, FSymTab
                  __fsym_list
                          DCD      __fsym_list_name
                          DCD      __fsym_list_desc
                          DCD      list

                          AREA VSymTab, DATA, READONLY, ALIGN=2

                  __vsym_dummy
                          DCD      __vsym_dummy_name
                          DCD      __vsym_dummy_desc
000008  09000000          DCB      0x09,0x00,0x00,0x00
                          DCD      dummy
