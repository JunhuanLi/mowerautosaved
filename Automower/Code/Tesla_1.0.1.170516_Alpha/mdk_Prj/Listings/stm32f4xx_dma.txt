; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f4xx_dma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_dma.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\stm32f4xx_dma.crf ..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;1052     */
;;;1053   void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;1054   {
000002  4604              MOV      r4,r0
;;;1055     DMA_TypeDef* DMAy;
;;;1056   
;;;1057     /* Check the parameters */
;;;1058     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  4831              LDR      r0,|L1.204|
000006  4e32              LDR      r6,|L1.208|
000008  460d              MOV      r5,r1                 ;1054
00000a  4284              CMP      r4,r0
00000c  d03e              BEQ      |L1.140|
00000e  482f              LDR      r0,|L1.204|
000010  3018              ADDS     r0,r0,#0x18
000012  4284              CMP      r4,r0
000014  d03a              BEQ      |L1.140|
000016  482d              LDR      r0,|L1.204|
000018  3030              ADDS     r0,r0,#0x30
00001a  4284              CMP      r4,r0
00001c  d036              BEQ      |L1.140|
00001e  482b              LDR      r0,|L1.204|
000020  3048              ADDS     r0,r0,#0x48
000022  4284              CMP      r4,r0
000024  d032              BEQ      |L1.140|
000026  4829              LDR      r0,|L1.204|
000028  3060              ADDS     r0,r0,#0x60
00002a  4284              CMP      r4,r0
00002c  d02e              BEQ      |L1.140|
00002e  4827              LDR      r0,|L1.204|
000030  3078              ADDS     r0,r0,#0x78
000032  4284              CMP      r4,r0
000034  d02a              BEQ      |L1.140|
000036  4825              LDR      r0,|L1.204|
000038  3090              ADDS     r0,r0,#0x90
00003a  4284              CMP      r4,r0
00003c  d026              BEQ      |L1.140|
00003e  4823              LDR      r0,|L1.204|
000040  30a8              ADDS     r0,r0,#0xa8
000042  4284              CMP      r4,r0
000044  d022              BEQ      |L1.140|
000046  42b4              CMP      r4,r6
000048  d020              BEQ      |L1.140|
00004a  4821              LDR      r0,|L1.208|
00004c  3018              ADDS     r0,r0,#0x18
00004e  4284              CMP      r4,r0
000050  d01c              BEQ      |L1.140|
000052  481f              LDR      r0,|L1.208|
000054  3030              ADDS     r0,r0,#0x30
000056  4284              CMP      r4,r0
000058  d018              BEQ      |L1.140|
00005a  481d              LDR      r0,|L1.208|
00005c  3048              ADDS     r0,r0,#0x48
00005e  4284              CMP      r4,r0
000060  d014              BEQ      |L1.140|
000062  481b              LDR      r0,|L1.208|
000064  3060              ADDS     r0,r0,#0x60
000066  4284              CMP      r4,r0
000068  d010              BEQ      |L1.140|
00006a  4819              LDR      r0,|L1.208|
00006c  3078              ADDS     r0,r0,#0x78
00006e  4284              CMP      r4,r0
000070  d00c              BEQ      |L1.140|
000072  4817              LDR      r0,|L1.208|
000074  3090              ADDS     r0,r0,#0x90
000076  4284              CMP      r4,r0
000078  d008              BEQ      |L1.140|
00007a  4815              LDR      r0,|L1.208|
00007c  30a8              ADDS     r0,r0,#0xa8
00007e  4284              CMP      r4,r0
000080  d004              BEQ      |L1.140|
000082  f2404122          MOV      r1,#0x422
000086  4813              LDR      r0,|L1.212|
000088  f7fffffe          BL       assert_failed
                  |L1.140|
;;;1059     assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
00008c  f3c57001          UBFX     r0,r5,#28,#2
000090  2803              CMP      r0,#3
000092  d006              BEQ      |L1.162|
000094  f0155f40          TST      r5,#0x30000000
000098  d003              BEQ      |L1.162|
00009a  480f              LDR      r0,|L1.216|
00009c  4205              TST      r5,r0
00009e  d100              BNE      |L1.162|
0000a0  b925              CBNZ     r5,|L1.172|
                  |L1.162|
0000a2  f2404123          MOV      r1,#0x423
0000a6  480b              LDR      r0,|L1.212|
0000a8  f7fffffe          BL       assert_failed
                  |L1.172|
;;;1060   
;;;1061     /* Determine the DMA to which belongs the stream */
;;;1062     if (DMAy_Streamx < DMA2_Stream0)
0000ac  42b4              CMP      r4,r6
0000ae  d202              BCS      |L1.182|
;;;1063     {
;;;1064       /* DMAy_Streamx belongs to DMA1 */
;;;1065       DMAy = DMA1; 
0000b0  4806              LDR      r0,|L1.204|
0000b2  3810              SUBS     r0,r0,#0x10
0000b4  e001              B        |L1.186|
                  |L1.182|
;;;1066     } 
;;;1067     else 
;;;1068     {
;;;1069       /* DMAy_Streamx belongs to DMA2 */
;;;1070       DMAy = DMA2; 
0000b6  4806              LDR      r0,|L1.208|
0000b8  3810              SUBS     r0,r0,#0x10
                  |L1.186|
;;;1071     }
;;;1072   
;;;1073     /* Check if LIFCR or HIFCR register is targeted */
;;;1074     if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
;;;1075     {
;;;1076       /* Set DMAy HIFCR register clear flag bits */
;;;1077       DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
0000ba  4908              LDR      r1,|L1.220|
0000bc  00aa              LSLS     r2,r5,#2              ;1074
0000be  ea050501          AND      r5,r5,r1
0000c2  d501              BPL      |L1.200|
0000c4  60c5              STR      r5,[r0,#0xc]
;;;1078     }
;;;1079     else 
;;;1080     {
;;;1081       /* Set DMAy LIFCR register clear flag bits */
;;;1082       DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
;;;1083     }    
;;;1084   }
0000c6  bd70              POP      {r4-r6,pc}
                  |L1.200|
0000c8  6085              STR      r5,[r0,#8]            ;1082
0000ca  bd70              POP      {r4-r6,pc}
;;;1085   
                          ENDP

                  |L1.204|
                          DCD      0x40026010
                  |L1.208|
                          DCD      0x40026410
                  |L1.212|
                          DCD      ||.conststring||
                  |L1.216|
                          DCD      0xc082f082
                  |L1.220|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;1233     */
;;;1234   void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;1235   {
000002  4604              MOV      r4,r0
;;;1236     DMA_TypeDef* DMAy;
;;;1237   
;;;1238     /* Check the parameters */
;;;1239     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  4831              LDR      r0,|L2.204|
000006  4e32              LDR      r6,|L2.208|
000008  460d              MOV      r5,r1                 ;1235
00000a  4284              CMP      r4,r0
00000c  d03e              BEQ      |L2.140|
00000e  482f              LDR      r0,|L2.204|
000010  3018              ADDS     r0,r0,#0x18
000012  4284              CMP      r4,r0
000014  d03a              BEQ      |L2.140|
000016  482d              LDR      r0,|L2.204|
000018  3030              ADDS     r0,r0,#0x30
00001a  4284              CMP      r4,r0
00001c  d036              BEQ      |L2.140|
00001e  482b              LDR      r0,|L2.204|
000020  3048              ADDS     r0,r0,#0x48
000022  4284              CMP      r4,r0
000024  d032              BEQ      |L2.140|
000026  4829              LDR      r0,|L2.204|
000028  3060              ADDS     r0,r0,#0x60
00002a  4284              CMP      r4,r0
00002c  d02e              BEQ      |L2.140|
00002e  4827              LDR      r0,|L2.204|
000030  3078              ADDS     r0,r0,#0x78
000032  4284              CMP      r4,r0
000034  d02a              BEQ      |L2.140|
000036  4825              LDR      r0,|L2.204|
000038  3090              ADDS     r0,r0,#0x90
00003a  4284              CMP      r4,r0
00003c  d026              BEQ      |L2.140|
00003e  4823              LDR      r0,|L2.204|
000040  30a8              ADDS     r0,r0,#0xa8
000042  4284              CMP      r4,r0
000044  d022              BEQ      |L2.140|
000046  42b4              CMP      r4,r6
000048  d020              BEQ      |L2.140|
00004a  4821              LDR      r0,|L2.208|
00004c  3018              ADDS     r0,r0,#0x18
00004e  4284              CMP      r4,r0
000050  d01c              BEQ      |L2.140|
000052  481f              LDR      r0,|L2.208|
000054  3030              ADDS     r0,r0,#0x30
000056  4284              CMP      r4,r0
000058  d018              BEQ      |L2.140|
00005a  481d              LDR      r0,|L2.208|
00005c  3048              ADDS     r0,r0,#0x48
00005e  4284              CMP      r4,r0
000060  d014              BEQ      |L2.140|
000062  481b              LDR      r0,|L2.208|
000064  3060              ADDS     r0,r0,#0x60
000066  4284              CMP      r4,r0
000068  d010              BEQ      |L2.140|
00006a  4819              LDR      r0,|L2.208|
00006c  3078              ADDS     r0,r0,#0x78
00006e  4284              CMP      r4,r0
000070  d00c              BEQ      |L2.140|
000072  4817              LDR      r0,|L2.208|
000074  3090              ADDS     r0,r0,#0x90
000076  4284              CMP      r4,r0
000078  d008              BEQ      |L2.140|
00007a  4815              LDR      r0,|L2.208|
00007c  30a8              ADDS     r0,r0,#0xa8
00007e  4284              CMP      r4,r0
000080  d004              BEQ      |L2.140|
000082  f24041d7          MOV      r1,#0x4d7
000086  4813              LDR      r0,|L2.212|
000088  f7fffffe          BL       assert_failed
                  |L2.140|
;;;1240     assert_param(IS_DMA_CLEAR_IT(DMA_IT));
00008c  f3c57001          UBFX     r0,r5,#28,#2
000090  2803              CMP      r0,#3
000092  d006              BEQ      |L2.162|
000094  f0155f40          TST      r5,#0x30000000
000098  d003              BEQ      |L2.162|
00009a  b115              CBZ      r5,|L2.162|
00009c  480e              LDR      r0,|L2.216|
00009e  4205              TST      r5,r0
0000a0  d004              BEQ      |L2.172|
                  |L2.162|
0000a2  f44f619b          MOV      r1,#0x4d8
0000a6  480b              LDR      r0,|L2.212|
0000a8  f7fffffe          BL       assert_failed
                  |L2.172|
;;;1241   
;;;1242     /* Determine the DMA to which belongs the stream */
;;;1243     if (DMAy_Streamx < DMA2_Stream0)
0000ac  42b4              CMP      r4,r6
0000ae  d202              BCS      |L2.182|
;;;1244     {
;;;1245       /* DMAy_Streamx belongs to DMA1 */
;;;1246       DMAy = DMA1; 
0000b0  4806              LDR      r0,|L2.204|
0000b2  3810              SUBS     r0,r0,#0x10
0000b4  e001              B        |L2.186|
                  |L2.182|
;;;1247     } 
;;;1248     else 
;;;1249     {
;;;1250       /* DMAy_Streamx belongs to DMA2 */
;;;1251       DMAy = DMA2; 
0000b6  4806              LDR      r0,|L2.208|
0000b8  3810              SUBS     r0,r0,#0x10
                  |L2.186|
;;;1252     }
;;;1253   
;;;1254     /* Check if LIFCR or HIFCR register is targeted */
;;;1255     if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
;;;1256     {
;;;1257       /* Set DMAy HIFCR register clear interrupt bits */
;;;1258       DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
0000ba  4908              LDR      r1,|L2.220|
0000bc  00aa              LSLS     r2,r5,#2              ;1255
0000be  ea050501          AND      r5,r5,r1
0000c2  d501              BPL      |L2.200|
0000c4  60c5              STR      r5,[r0,#0xc]
;;;1259     }
;;;1260     else 
;;;1261     {
;;;1262       /* Set DMAy LIFCR register clear interrupt bits */
;;;1263       DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
;;;1264     }   
;;;1265   }
0000c6  bd70              POP      {r4-r6,pc}
                  |L2.200|
0000c8  6085              STR      r5,[r0,#8]            ;1263
0000ca  bd70              POP      {r4-r6,pc}
;;;1266   
                          ENDP

                  |L2.204|
                          DCD      0x40026010
                  |L2.208|
                          DCD      0x40026410
                  |L2.212|
                          DCD      ||.conststring||
                  |L2.216|
                          DCD      0x40820082
                  |L2.220|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=2

                  DMA_Cmd PROC
;;;469      */
;;;470    void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;471    {
000002  4604              MOV      r4,r0
;;;472      /* Check the parameters */
;;;473      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  482a              LDR      r0,|L3.176|
000006  460d              MOV      r5,r1                 ;471
000008  4284              CMP      r4,r0
00000a  d03f              BEQ      |L3.140|
00000c  4828              LDR      r0,|L3.176|
00000e  3018              ADDS     r0,r0,#0x18
000010  4284              CMP      r4,r0
000012  d03b              BEQ      |L3.140|
000014  4826              LDR      r0,|L3.176|
000016  3030              ADDS     r0,r0,#0x30
000018  4284              CMP      r4,r0
00001a  d037              BEQ      |L3.140|
00001c  4824              LDR      r0,|L3.176|
00001e  3048              ADDS     r0,r0,#0x48
000020  4284              CMP      r4,r0
000022  d033              BEQ      |L3.140|
000024  4822              LDR      r0,|L3.176|
000026  3060              ADDS     r0,r0,#0x60
000028  4284              CMP      r4,r0
00002a  d02f              BEQ      |L3.140|
00002c  4820              LDR      r0,|L3.176|
00002e  3078              ADDS     r0,r0,#0x78
000030  4284              CMP      r4,r0
000032  d02b              BEQ      |L3.140|
000034  481e              LDR      r0,|L3.176|
000036  3090              ADDS     r0,r0,#0x90
000038  4284              CMP      r4,r0
00003a  d027              BEQ      |L3.140|
00003c  481c              LDR      r0,|L3.176|
00003e  30a8              ADDS     r0,r0,#0xa8
000040  4284              CMP      r4,r0
000042  d023              BEQ      |L3.140|
000044  481b              LDR      r0,|L3.180|
000046  4284              CMP      r4,r0
000048  d020              BEQ      |L3.140|
00004a  481a              LDR      r0,|L3.180|
00004c  3018              ADDS     r0,r0,#0x18
00004e  4284              CMP      r4,r0
000050  d01c              BEQ      |L3.140|
000052  4818              LDR      r0,|L3.180|
000054  3030              ADDS     r0,r0,#0x30
000056  4284              CMP      r4,r0
000058  d018              BEQ      |L3.140|
00005a  4816              LDR      r0,|L3.180|
00005c  3048              ADDS     r0,r0,#0x48
00005e  4284              CMP      r4,r0
000060  d014              BEQ      |L3.140|
000062  4814              LDR      r0,|L3.180|
000064  3060              ADDS     r0,r0,#0x60
000066  4284              CMP      r4,r0
000068  d010              BEQ      |L3.140|
00006a  4812              LDR      r0,|L3.180|
00006c  3078              ADDS     r0,r0,#0x78
00006e  4284              CMP      r4,r0
000070  d00c              BEQ      |L3.140|
000072  4810              LDR      r0,|L3.180|
000074  3090              ADDS     r0,r0,#0x90
000076  4284              CMP      r4,r0
000078  d008              BEQ      |L3.140|
00007a  480e              LDR      r0,|L3.180|
00007c  30a8              ADDS     r0,r0,#0xa8
00007e  4284              CMP      r4,r0
000080  d004              BEQ      |L3.140|
000082  f24011d9          MOV      r1,#0x1d9
000086  480c              LDR      r0,|L3.184|
000088  f7fffffe          BL       assert_failed
                  |L3.140|
;;;474      assert_param(IS_FUNCTIONAL_STATE(NewState));
00008c  b155              CBZ      r5,|L3.164|
00008e  2d01              CMP      r5,#1
000090  d004              BEQ      |L3.156|
000092  f44f71ed          MOV      r1,#0x1da
000096  4808              LDR      r0,|L3.184|
000098  f7fffffe          BL       assert_failed
                  |L3.156|
;;;475    
;;;476      if (NewState != DISABLE)
;;;477      {
;;;478        /* Enable the selected DMAy Streamx by setting EN bit */
;;;479        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
00009c  6820              LDR      r0,[r4,#0]
00009e  f0400001          ORR      r0,r0,#1
0000a2  e002              B        |L3.170|
                  |L3.164|
;;;480      }
;;;481      else
;;;482      {
;;;483        /* Disable the selected DMAy Streamx by clearing EN bit */
;;;484        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
0000a4  6820              LDR      r0,[r4,#0]
0000a6  f0200001          BIC      r0,r0,#1
                  |L3.170|
0000aa  6020              STR      r0,[r4,#0]            ;479
;;;485      }
;;;486    }
0000ac  bd70              POP      {r4-r6,pc}
;;;487    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L3.176|
                          DCD      0x40026010
                  |L3.180|
                          DCD      0x40026410
                  |L3.184|
                          DCD      ||.conststring||

                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;187      */
;;;188    void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;189    {
;;;190      /* Check the parameters */
;;;191      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  4e61              LDR      r6,|L4.396|
000006  4f61              LDR      r7,|L4.396|
000008  4d60              LDR      r5,|L4.396|
00000a  f8df8180          LDR      r8,|L4.396|
00000e  f8dfa17c          LDR      r10,|L4.396|
000012  f8dfb178          LDR      r11,|L4.396|
000016  3618              ADDS     r6,r6,#0x18
000018  3730              ADDS     r7,r7,#0x30
00001a  4604              MOV      r4,r0                 ;189
00001c  f1080848          ADD      r8,r8,#0x48
000020  f10a0a60          ADD      r10,r10,#0x60
000024  f10b0b78          ADD      r11,r11,#0x78
000028  42a8              CMP      r0,r5
00002a  d034              BEQ      |L4.150|
00002c  42b4              CMP      r4,r6
00002e  d032              BEQ      |L4.150|
000030  42bc              CMP      r4,r7
000032  d030              BEQ      |L4.150|
000034  4544              CMP      r4,r8
000036  d02e              BEQ      |L4.150|
000038  4554              CMP      r4,r10
00003a  d02c              BEQ      |L4.150|
00003c  455c              CMP      r4,r11
00003e  d02a              BEQ      |L4.150|
000040  4852              LDR      r0,|L4.396|
000042  3090              ADDS     r0,r0,#0x90
000044  4284              CMP      r4,r0
000046  d026              BEQ      |L4.150|
000048  4850              LDR      r0,|L4.396|
00004a  30a8              ADDS     r0,r0,#0xa8
00004c  4284              CMP      r4,r0
00004e  d022              BEQ      |L4.150|
000050  484f              LDR      r0,|L4.400|
000052  4284              CMP      r4,r0
000054  d01f              BEQ      |L4.150|
000056  484e              LDR      r0,|L4.400|
000058  3018              ADDS     r0,r0,#0x18
00005a  4284              CMP      r4,r0
00005c  d01b              BEQ      |L4.150|
00005e  484c              LDR      r0,|L4.400|
000060  3030              ADDS     r0,r0,#0x30
000062  4284              CMP      r4,r0
000064  d017              BEQ      |L4.150|
000066  484a              LDR      r0,|L4.400|
000068  3048              ADDS     r0,r0,#0x48
00006a  4284              CMP      r4,r0
00006c  d013              BEQ      |L4.150|
00006e  4848              LDR      r0,|L4.400|
000070  3060              ADDS     r0,r0,#0x60
000072  4284              CMP      r4,r0
000074  d00f              BEQ      |L4.150|
000076  4846              LDR      r0,|L4.400|
000078  3078              ADDS     r0,r0,#0x78
00007a  4284              CMP      r4,r0
00007c  d00b              BEQ      |L4.150|
00007e  4844              LDR      r0,|L4.400|
000080  3090              ADDS     r0,r0,#0x90
000082  4284              CMP      r4,r0
000084  d007              BEQ      |L4.150|
000086  4842              LDR      r0,|L4.400|
000088  30a8              ADDS     r0,r0,#0xa8
00008a  4284              CMP      r4,r0
00008c  d003              BEQ      |L4.150|
00008e  21bf              MOVS     r1,#0xbf
000090  4840              LDR      r0,|L4.404|
000092  f7fffffe          BL       assert_failed
                  |L4.150|
;;;192    
;;;193      /* Disable the selected DMAy Streamx */
;;;194      DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
000096  6820              LDR      r0,[r4,#0]
000098  f0200001          BIC      r0,r0,#1
00009c  6020              STR      r0,[r4,#0]
;;;195    
;;;196      /* Reset DMAy Streamx control register */
;;;197      DMAy_Streamx->CR  = 0;
00009e  2000              MOVS     r0,#0
0000a0  6020              STR      r0,[r4,#0]
;;;198      
;;;199      /* Reset DMAy Streamx Number of Data to Transfer register */
;;;200      DMAy_Streamx->NDTR = 0;
0000a2  6060              STR      r0,[r4,#4]
;;;201      
;;;202      /* Reset DMAy Streamx peripheral address register */
;;;203      DMAy_Streamx->PAR  = 0;
0000a4  60a0              STR      r0,[r4,#8]
;;;204      
;;;205      /* Reset DMAy Streamx memory 0 address register */
;;;206      DMAy_Streamx->M0AR = 0;
0000a6  60e0              STR      r0,[r4,#0xc]
;;;207    
;;;208      /* Reset DMAy Streamx memory 1 address register */
;;;209      DMAy_Streamx->M1AR = 0;
0000a8  6120              STR      r0,[r4,#0x10]
;;;210    
;;;211      /* Reset DMAy Streamx FIFO control register */
;;;212      DMAy_Streamx->FCR = (uint32_t)0x00000021; 
0000aa  2021              MOVS     r0,#0x21
0000ac  6160              STR      r0,[r4,#0x14]
;;;213    
;;;214      /* Reset interrupt pending bits for the selected stream */
;;;215      if (DMAy_Streamx == DMA1_Stream0)
;;;216      {
;;;217        /* Reset interrupt pending bits for DMA1 Stream0 */
;;;218        DMA1->LIFCR = DMA_Stream0_IT_MASK;
0000ae  4837              LDR      r0,|L4.396|
0000b0  f04f093d          MOV      r9,#0x3d
0000b4  3810              SUBS     r0,r0,#0x10
0000b6  42ac              CMP      r4,r5                 ;215
0000b8  d101              BNE      |L4.190|
0000ba  4649              MOV      r1,r9
0000bc  e003              B        |L4.198|
                  |L4.190|
;;;219      }
;;;220      else if (DMAy_Streamx == DMA1_Stream1)
;;;221      {
;;;222        /* Reset interrupt pending bits for DMA1 Stream1 */
;;;223        DMA1->LIFCR = DMA_Stream1_IT_MASK;
0000be  f44f6174          MOV      r1,#0xf40
0000c2  42b4              CMP      r4,r6                 ;220
0000c4  d102              BNE      |L4.204|
                  |L4.198|
0000c6  6081              STR      r1,[r0,#8]
                  |L4.200|
;;;224      }
;;;225      else if (DMAy_Streamx == DMA1_Stream2)
;;;226      {
;;;227        /* Reset interrupt pending bits for DMA1 Stream2 */
;;;228        DMA1->LIFCR = DMA_Stream2_IT_MASK;
;;;229      }
;;;230      else if (DMAy_Streamx == DMA1_Stream3)
;;;231      {
;;;232        /* Reset interrupt pending bits for DMA1 Stream3 */
;;;233        DMA1->LIFCR = DMA_Stream3_IT_MASK;
;;;234      }
;;;235      else if (DMAy_Streamx == DMA1_Stream4)
;;;236      {
;;;237        /* Reset interrupt pending bits for DMA1 Stream4 */
;;;238        DMA1->HIFCR = DMA_Stream4_IT_MASK;
;;;239      }
;;;240      else if (DMAy_Streamx == DMA1_Stream5)
;;;241      {
;;;242        /* Reset interrupt pending bits for DMA1 Stream5 */
;;;243        DMA1->HIFCR = DMA_Stream5_IT_MASK;
;;;244      }
;;;245      else if (DMAy_Streamx == DMA1_Stream6)
;;;246      {
;;;247        /* Reset interrupt pending bits for DMA1 Stream6 */
;;;248        DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
;;;249      }
;;;250      else if (DMAy_Streamx == DMA1_Stream7)
;;;251      {
;;;252        /* Reset interrupt pending bits for DMA1 Stream7 */
;;;253        DMA1->HIFCR = DMA_Stream7_IT_MASK;
;;;254      }
;;;255      else if (DMAy_Streamx == DMA2_Stream0)
;;;256      {
;;;257        /* Reset interrupt pending bits for DMA2 Stream0 */
;;;258        DMA2->LIFCR = DMA_Stream0_IT_MASK;
;;;259      }
;;;260      else if (DMAy_Streamx == DMA2_Stream1)
;;;261      {
;;;262        /* Reset interrupt pending bits for DMA2 Stream1 */
;;;263        DMA2->LIFCR = DMA_Stream1_IT_MASK;
;;;264      }
;;;265      else if (DMAy_Streamx == DMA2_Stream2)
;;;266      {
;;;267        /* Reset interrupt pending bits for DMA2 Stream2 */
;;;268        DMA2->LIFCR = DMA_Stream2_IT_MASK;
;;;269      }
;;;270      else if (DMAy_Streamx == DMA2_Stream3)
;;;271      {
;;;272        /* Reset interrupt pending bits for DMA2 Stream3 */
;;;273        DMA2->LIFCR = DMA_Stream3_IT_MASK;
;;;274      }
;;;275      else if (DMAy_Streamx == DMA2_Stream4)
;;;276      {
;;;277        /* Reset interrupt pending bits for DMA2 Stream4 */
;;;278        DMA2->HIFCR = DMA_Stream4_IT_MASK;
;;;279      }
;;;280      else if (DMAy_Streamx == DMA2_Stream5)
;;;281      {
;;;282        /* Reset interrupt pending bits for DMA2 Stream5 */
;;;283        DMA2->HIFCR = DMA_Stream5_IT_MASK;
;;;284      }
;;;285      else if (DMAy_Streamx == DMA2_Stream6)
;;;286      {
;;;287        /* Reset interrupt pending bits for DMA2 Stream6 */
;;;288        DMA2->HIFCR = DMA_Stream6_IT_MASK;
;;;289      }
;;;290      else 
;;;291      {
;;;292        if (DMAy_Streamx == DMA2_Stream7)
;;;293        {
;;;294          /* Reset interrupt pending bits for DMA2 Stream7 */
;;;295          DMA2->HIFCR = DMA_Stream7_IT_MASK;
;;;296        }
;;;297      }
;;;298    }
0000c8  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.204|
0000cc  f44f1c74          MOV      r12,#0x3d0000         ;228
0000d0  42bc              CMP      r4,r7                 ;225
0000d2  d102              BNE      |L4.218|
0000d4  f8c0c008          STR      r12,[r0,#8]           ;228
0000d8  e7f6              B        |L4.200|
                  |L4.218|
0000da  f04f6774          MOV      r7,#0xf400000         ;233
0000de  4544              CMP      r4,r8                 ;230
0000e0  d101              BNE      |L4.230|
0000e2  6087              STR      r7,[r0,#8]            ;233
0000e4  e7f0              B        |L4.200|
                  |L4.230|
0000e6  4a2c              LDR      r2,|L4.408|
0000e8  4554              CMP      r4,r10                ;235
0000ea  d101              BNE      |L4.240|
0000ec  60c2              STR      r2,[r0,#0xc]          ;238
0000ee  e7eb              B        |L4.200|
                  |L4.240|
0000f0  4b2a              LDR      r3,|L4.412|
0000f2  455c              CMP      r4,r11                ;240
0000f4  d101              BNE      |L4.250|
0000f6  60c3              STR      r3,[r0,#0xc]          ;243
0000f8  e7e6              B        |L4.200|
                  |L4.250|
0000fa  4e24              LDR      r6,|L4.396|
0000fc  4d28              LDR      r5,|L4.416|
0000fe  3690              ADDS     r6,r6,#0x90           ;245
000100  42b4              CMP      r4,r6                 ;245
000102  d101              BNE      |L4.264|
000104  60c5              STR      r5,[r0,#0xc]          ;248
000106  e7df              B        |L4.200|
                  |L4.264|
000108  f8df8080          LDR      r8,|L4.396|
00010c  f04f563d          MOV      r6,#0x2f400000        ;253
000110  f10808a8          ADD      r8,r8,#0xa8           ;250
000114  4544              CMP      r4,r8                 ;250
000116  d101              BNE      |L4.284|
000118  60c6              STR      r6,[r0,#0xc]          ;253
00011a  e7d5              B        |L4.200|
                  |L4.284|
00011c  481c              LDR      r0,|L4.400|
00011e  f8df8070          LDR      r8,|L4.400|
000122  3808              SUBS     r0,r0,#8              ;258
000124  4544              CMP      r4,r8                 ;255
000126  d101              BNE      |L4.300|
000128  4649              MOV      r1,r9                 ;258
00012a  e005              B        |L4.312|
                  |L4.300|
00012c  f8df8060          LDR      r8,|L4.400|
000130  f1080818          ADD      r8,r8,#0x18           ;260
000134  4544              CMP      r4,r8                 ;260
000136  d101              BNE      |L4.316|
                  |L4.312|
000138  6001              STR      r1,[r0,#0]            ;263
00013a  e7c5              B        |L4.200|
                  |L4.316|
00013c  4914              LDR      r1,|L4.400|
00013e  3130              ADDS     r1,r1,#0x30           ;265
000140  428c              CMP      r4,r1                 ;265
000142  d102              BNE      |L4.330|
000144  f8c0c000          STR      r12,[r0,#0]           ;268
000148  e7be              B        |L4.200|
                  |L4.330|
00014a  4911              LDR      r1,|L4.400|
00014c  3148              ADDS     r1,r1,#0x48           ;270
00014e  428c              CMP      r4,r1                 ;270
000150  d101              BNE      |L4.342|
000152  6007              STR      r7,[r0,#0]            ;273
000154  e7b8              B        |L4.200|
                  |L4.342|
000156  490e              LDR      r1,|L4.400|
000158  480d              LDR      r0,|L4.400|
00015a  3160              ADDS     r1,r1,#0x60           ;275
00015c  1f00              SUBS     r0,r0,#4              ;278
00015e  428c              CMP      r4,r1                 ;275
000160  d101              BNE      |L4.358|
000162  6002              STR      r2,[r0,#0]            ;278
000164  e7b0              B        |L4.200|
                  |L4.358|
000166  490a              LDR      r1,|L4.400|
000168  3178              ADDS     r1,r1,#0x78           ;280
00016a  428c              CMP      r4,r1                 ;280
00016c  d101              BNE      |L4.370|
00016e  6003              STR      r3,[r0,#0]            ;283
000170  e7aa              B        |L4.200|
                  |L4.370|
000172  4907              LDR      r1,|L4.400|
000174  3190              ADDS     r1,r1,#0x90           ;285
000176  428c              CMP      r4,r1                 ;285
000178  d101              BNE      |L4.382|
00017a  6005              STR      r5,[r0,#0]            ;288
00017c  e7a4              B        |L4.200|
                  |L4.382|
00017e  4904              LDR      r1,|L4.400|
000180  31a8              ADDS     r1,r1,#0xa8           ;292
000182  428c              CMP      r4,r1                 ;292
000184  d1a0              BNE      |L4.200|
000186  6006              STR      r6,[r0,#0]            ;295
000188  e79e              B        |L4.200|
;;;299    
                          ENDP

00018a  0000              DCW      0x0000
                  |L4.396|
                          DCD      0x40026010
                  |L4.400|
                          DCD      0x40026410
                  |L4.404|
                          DCD      ||.conststring||
                  |L4.408|
                          DCD      0x2000003d
                  |L4.412|
                          DCD      0x20000f40
                  |L4.416|
                          DCD      0x203d0000

                          AREA ||i.DMA_DoubleBufferModeCmd||, CODE, READONLY, ALIGN=2

                  DMA_DoubleBufferModeCmd PROC
;;;748      */
;;;749    void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;750    {  
000002  4604              MOV      r4,r0
;;;751      /* Check the parameters */
;;;752      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  482a              LDR      r0,|L5.176|
000006  460d              MOV      r5,r1                 ;750
000008  4284              CMP      r4,r0
00000a  d03f              BEQ      |L5.140|
00000c  4828              LDR      r0,|L5.176|
00000e  3018              ADDS     r0,r0,#0x18
000010  4284              CMP      r4,r0
000012  d03b              BEQ      |L5.140|
000014  4826              LDR      r0,|L5.176|
000016  3030              ADDS     r0,r0,#0x30
000018  4284              CMP      r4,r0
00001a  d037              BEQ      |L5.140|
00001c  4824              LDR      r0,|L5.176|
00001e  3048              ADDS     r0,r0,#0x48
000020  4284              CMP      r4,r0
000022  d033              BEQ      |L5.140|
000024  4822              LDR      r0,|L5.176|
000026  3060              ADDS     r0,r0,#0x60
000028  4284              CMP      r4,r0
00002a  d02f              BEQ      |L5.140|
00002c  4820              LDR      r0,|L5.176|
00002e  3078              ADDS     r0,r0,#0x78
000030  4284              CMP      r4,r0
000032  d02b              BEQ      |L5.140|
000034  481e              LDR      r0,|L5.176|
000036  3090              ADDS     r0,r0,#0x90
000038  4284              CMP      r4,r0
00003a  d027              BEQ      |L5.140|
00003c  481c              LDR      r0,|L5.176|
00003e  30a8              ADDS     r0,r0,#0xa8
000040  4284              CMP      r4,r0
000042  d023              BEQ      |L5.140|
000044  481b              LDR      r0,|L5.180|
000046  4284              CMP      r4,r0
000048  d020              BEQ      |L5.140|
00004a  481a              LDR      r0,|L5.180|
00004c  3018              ADDS     r0,r0,#0x18
00004e  4284              CMP      r4,r0
000050  d01c              BEQ      |L5.140|
000052  4818              LDR      r0,|L5.180|
000054  3030              ADDS     r0,r0,#0x30
000056  4284              CMP      r4,r0
000058  d018              BEQ      |L5.140|
00005a  4816              LDR      r0,|L5.180|
00005c  3048              ADDS     r0,r0,#0x48
00005e  4284              CMP      r4,r0
000060  d014              BEQ      |L5.140|
000062  4814              LDR      r0,|L5.180|
000064  3060              ADDS     r0,r0,#0x60
000066  4284              CMP      r4,r0
000068  d010              BEQ      |L5.140|
00006a  4812              LDR      r0,|L5.180|
00006c  3078              ADDS     r0,r0,#0x78
00006e  4284              CMP      r4,r0
000070  d00c              BEQ      |L5.140|
000072  4810              LDR      r0,|L5.180|
000074  3090              ADDS     r0,r0,#0x90
000076  4284              CMP      r4,r0
000078  d008              BEQ      |L5.140|
00007a  480e              LDR      r0,|L5.180|
00007c  30a8              ADDS     r0,r0,#0xa8
00007e  4284              CMP      r4,r0
000080  d004              BEQ      |L5.140|
000082  f44f713c          MOV      r1,#0x2f0
000086  480c              LDR      r0,|L5.184|
000088  f7fffffe          BL       assert_failed
                  |L5.140|
;;;753      assert_param(IS_FUNCTIONAL_STATE(NewState));
00008c  b155              CBZ      r5,|L5.164|
00008e  2d01              CMP      r5,#1
000090  d004              BEQ      |L5.156|
000092  f24021f1          MOV      r1,#0x2f1
000096  4808              LDR      r0,|L5.184|
000098  f7fffffe          BL       assert_failed
                  |L5.156|
;;;754    
;;;755      /* Configure the Double Buffer mode */
;;;756      if (NewState != DISABLE)
;;;757      {
;;;758        /* Enable the Double buffer mode */
;;;759        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
00009c  6820              LDR      r0,[r4,#0]
00009e  f4402080          ORR      r0,r0,#0x40000
0000a2  e002              B        |L5.170|
                  |L5.164|
;;;760      }
;;;761      else
;;;762      {
;;;763        /* Disable the Double buffer mode */
;;;764        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
0000a4  6820              LDR      r0,[r4,#0]
0000a6  f4202080          BIC      r0,r0,#0x40000
                  |L5.170|
0000aa  6020              STR      r0,[r4,#0]            ;759
;;;765      }
;;;766    }
0000ac  bd70              POP      {r4-r6,pc}
;;;767    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L5.176|
                          DCD      0x40026010
                  |L5.180|
                          DCD      0x40026410
                  |L5.184|
                          DCD      ||.conststring||

                          AREA ||i.DMA_DoubleBufferModeConfig||, CODE, READONLY, ALIGN=2

                  DMA_DoubleBufferModeConfig PROC
;;;717      */
;;;718    void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
000000  b570              PUSH     {r4-r6,lr}
;;;719                                    uint32_t DMA_CurrentMemory)
;;;720    {  
000002  4604              MOV      r4,r0
;;;721      /* Check the parameters */
;;;722      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  482b              LDR      r0,|L6.180|
000006  4615              MOV      r5,r2                 ;720
000008  460e              MOV      r6,r1                 ;720
00000a  4284              CMP      r4,r0
00000c  d03f              BEQ      |L6.142|
00000e  4829              LDR      r0,|L6.180|
000010  3018              ADDS     r0,r0,#0x18
000012  4284              CMP      r4,r0
000014  d03b              BEQ      |L6.142|
000016  4827              LDR      r0,|L6.180|
000018  3030              ADDS     r0,r0,#0x30
00001a  4284              CMP      r4,r0
00001c  d037              BEQ      |L6.142|
00001e  4825              LDR      r0,|L6.180|
000020  3048              ADDS     r0,r0,#0x48
000022  4284              CMP      r4,r0
000024  d033              BEQ      |L6.142|
000026  4823              LDR      r0,|L6.180|
000028  3060              ADDS     r0,r0,#0x60
00002a  4284              CMP      r4,r0
00002c  d02f              BEQ      |L6.142|
00002e  4821              LDR      r0,|L6.180|
000030  3078              ADDS     r0,r0,#0x78
000032  4284              CMP      r4,r0
000034  d02b              BEQ      |L6.142|
000036  481f              LDR      r0,|L6.180|
000038  3090              ADDS     r0,r0,#0x90
00003a  4284              CMP      r4,r0
00003c  d027              BEQ      |L6.142|
00003e  481d              LDR      r0,|L6.180|
000040  30a8              ADDS     r0,r0,#0xa8
000042  4284              CMP      r4,r0
000044  d023              BEQ      |L6.142|
000046  481c              LDR      r0,|L6.184|
000048  4284              CMP      r4,r0
00004a  d020              BEQ      |L6.142|
00004c  481a              LDR      r0,|L6.184|
00004e  3018              ADDS     r0,r0,#0x18
000050  4284              CMP      r4,r0
000052  d01c              BEQ      |L6.142|
000054  4818              LDR      r0,|L6.184|
000056  3030              ADDS     r0,r0,#0x30
000058  4284              CMP      r4,r0
00005a  d018              BEQ      |L6.142|
00005c  4816              LDR      r0,|L6.184|
00005e  3048              ADDS     r0,r0,#0x48
000060  4284              CMP      r4,r0
000062  d014              BEQ      |L6.142|
000064  4814              LDR      r0,|L6.184|
000066  3060              ADDS     r0,r0,#0x60
000068  4284              CMP      r4,r0
00006a  d010              BEQ      |L6.142|
00006c  4812              LDR      r0,|L6.184|
00006e  3078              ADDS     r0,r0,#0x78
000070  4284              CMP      r4,r0
000072  d00c              BEQ      |L6.142|
000074  4810              LDR      r0,|L6.184|
000076  3090              ADDS     r0,r0,#0x90
000078  4284              CMP      r4,r0
00007a  d008              BEQ      |L6.142|
00007c  480e              LDR      r0,|L6.184|
00007e  30a8              ADDS     r0,r0,#0xa8
000080  4284              CMP      r4,r0
000082  d004              BEQ      |L6.142|
000084  f24021d2          MOV      r1,#0x2d2
000088  480c              LDR      r0,|L6.188|
00008a  f7fffffe          BL       assert_failed
                  |L6.142|
;;;723      assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
00008e  b15d              CBZ      r5,|L6.168|
000090  f5b52f00          CMP      r5,#0x80000
000094  d004              BEQ      |L6.160|
000096  f24021d3          MOV      r1,#0x2d3
00009a  4808              LDR      r0,|L6.188|
00009c  f7fffffe          BL       assert_failed
                  |L6.160|
;;;724    
;;;725      if (DMA_CurrentMemory != DMA_Memory_0)
;;;726      {
;;;727        /* Set Memory 1 as current memory address */
;;;728        DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
0000a0  6820              LDR      r0,[r4,#0]
0000a2  f4402000          ORR      r0,r0,#0x80000
0000a6  e002              B        |L6.174|
                  |L6.168|
;;;729      }
;;;730      else
;;;731      {
;;;732        /* Set Memory 0 as current memory address */
;;;733        DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
0000a8  6820              LDR      r0,[r4,#0]
0000aa  f4202000          BIC      r0,r0,#0x80000
                  |L6.174|
0000ae  6020              STR      r0,[r4,#0]
;;;734      }
;;;735    
;;;736      /* Write to DMAy Streamx M1AR */
;;;737      DMAy_Streamx->M1AR = Memory1BaseAddr;
0000b0  6126              STR      r6,[r4,#0x10]
;;;738    }
0000b2  bd70              POP      {r4-r6,pc}
;;;739    
                          ENDP

                  |L6.180|
                          DCD      0x40026010
                  |L6.184|
                          DCD      0x40026410
                  |L6.188|
                          DCD      ||.conststring||

                          AREA ||i.DMA_FlowControllerConfig||, CODE, READONLY, ALIGN=2

                  DMA_FlowControllerConfig PROC
;;;541      */
;;;542    void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
000000  b570              PUSH     {r4-r6,lr}
;;;543    {
000002  4604              MOV      r4,r0
;;;544      /* Check the parameters */
;;;545      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  482a              LDR      r0,|L7.176|
000006  460d              MOV      r5,r1                 ;543
000008  4284              CMP      r4,r0
00000a  d03f              BEQ      |L7.140|
00000c  4828              LDR      r0,|L7.176|
00000e  3018              ADDS     r0,r0,#0x18
000010  4284              CMP      r4,r0
000012  d03b              BEQ      |L7.140|
000014  4826              LDR      r0,|L7.176|
000016  3030              ADDS     r0,r0,#0x30
000018  4284              CMP      r4,r0
00001a  d037              BEQ      |L7.140|
00001c  4824              LDR      r0,|L7.176|
00001e  3048              ADDS     r0,r0,#0x48
000020  4284              CMP      r4,r0
000022  d033              BEQ      |L7.140|
000024  4822              LDR      r0,|L7.176|
000026  3060              ADDS     r0,r0,#0x60
000028  4284              CMP      r4,r0
00002a  d02f              BEQ      |L7.140|
00002c  4820              LDR      r0,|L7.176|
00002e  3078              ADDS     r0,r0,#0x78
000030  4284              CMP      r4,r0
000032  d02b              BEQ      |L7.140|
000034  481e              LDR      r0,|L7.176|
000036  3090              ADDS     r0,r0,#0x90
000038  4284              CMP      r4,r0
00003a  d027              BEQ      |L7.140|
00003c  481c              LDR      r0,|L7.176|
00003e  30a8              ADDS     r0,r0,#0xa8
000040  4284              CMP      r4,r0
000042  d023              BEQ      |L7.140|
000044  481b              LDR      r0,|L7.180|
000046  4284              CMP      r4,r0
000048  d020              BEQ      |L7.140|
00004a  481a              LDR      r0,|L7.180|
00004c  3018              ADDS     r0,r0,#0x18
00004e  4284              CMP      r4,r0
000050  d01c              BEQ      |L7.140|
000052  4818              LDR      r0,|L7.180|
000054  3030              ADDS     r0,r0,#0x30
000056  4284              CMP      r4,r0
000058  d018              BEQ      |L7.140|
00005a  4816              LDR      r0,|L7.180|
00005c  3048              ADDS     r0,r0,#0x48
00005e  4284              CMP      r4,r0
000060  d014              BEQ      |L7.140|
000062  4814              LDR      r0,|L7.180|
000064  3060              ADDS     r0,r0,#0x60
000066  4284              CMP      r4,r0
000068  d010              BEQ      |L7.140|
00006a  4812              LDR      r0,|L7.180|
00006c  3078              ADDS     r0,r0,#0x78
00006e  4284              CMP      r4,r0
000070  d00c              BEQ      |L7.140|
000072  4810              LDR      r0,|L7.180|
000074  3090              ADDS     r0,r0,#0x90
000076  4284              CMP      r4,r0
000078  d008              BEQ      |L7.140|
00007a  480e              LDR      r0,|L7.180|
00007c  30a8              ADDS     r0,r0,#0xa8
00007e  4284              CMP      r4,r0
000080  d004              BEQ      |L7.140|
000082  f2402121          MOV      r1,#0x221
000086  480c              LDR      r0,|L7.184|
000088  f7fffffe          BL       assert_failed
                  |L7.140|
;;;546      assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
00008c  b155              CBZ      r5,|L7.164|
00008e  2d20              CMP      r5,#0x20
000090  d004              BEQ      |L7.156|
000092  f2402122          MOV      r1,#0x222
000096  4808              LDR      r0,|L7.184|
000098  f7fffffe          BL       assert_failed
                  |L7.156|
;;;547    
;;;548      /* Check the needed flow controller  */
;;;549      if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
;;;550      {
;;;551        /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
;;;552        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
00009c  6820              LDR      r0,[r4,#0]
00009e  f0400020          ORR      r0,r0,#0x20
0000a2  e002              B        |L7.170|
                  |L7.164|
;;;553      }
;;;554      else
;;;555      {
;;;556        /* Clear the PFCTRL bit: Memory is the flow controller */
;;;557        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
0000a4  6820              LDR      r0,[r4,#0]
0000a6  f0200020          BIC      r0,r0,#0x20
                  |L7.170|
0000aa  6020              STR      r0,[r4,#0]            ;552
;;;558      }
;;;559    }
0000ac  bd70              POP      {r4-r6,pc}
;;;560    /**
                          ENDP

0000ae  0000              DCW      0x0000
                  |L7.176|
                          DCD      0x40026010
                  |L7.180|
                          DCD      0x40026410
                  |L7.184|
                          DCD      ||.conststring||

                          AREA ||i.DMA_GetCmdStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetCmdStatus PROC
;;;924      */
;;;925    FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
000000  b570              PUSH     {r4-r6,lr}
;;;926    {
000002  4604              MOV      r4,r0
;;;927      FunctionalState state = DISABLE;
;;;928    
;;;929      /* Check the parameters */
;;;930      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  4824              LDR      r0,|L8.152|
000006  2500              MOVS     r5,#0                 ;927
000008  4284              CMP      r4,r0
00000a  d03f              BEQ      |L8.140|
00000c  4822              LDR      r0,|L8.152|
00000e  3018              ADDS     r0,r0,#0x18
000010  4284              CMP      r4,r0
000012  d03b              BEQ      |L8.140|
000014  4820              LDR      r0,|L8.152|
000016  3030              ADDS     r0,r0,#0x30
000018  4284              CMP      r4,r0
00001a  d037              BEQ      |L8.140|
00001c  481e              LDR      r0,|L8.152|
00001e  3048              ADDS     r0,r0,#0x48
000020  4284              CMP      r4,r0
000022  d033              BEQ      |L8.140|
000024  481c              LDR      r0,|L8.152|
000026  3060              ADDS     r0,r0,#0x60
000028  4284              CMP      r4,r0
00002a  d02f              BEQ      |L8.140|
00002c  481a              LDR      r0,|L8.152|
00002e  3078              ADDS     r0,r0,#0x78
000030  4284              CMP      r4,r0
000032  d02b              BEQ      |L8.140|
000034  4818              LDR      r0,|L8.152|
000036  3090              ADDS     r0,r0,#0x90
000038  4284              CMP      r4,r0
00003a  d027              BEQ      |L8.140|
00003c  4816              LDR      r0,|L8.152|
00003e  30a8              ADDS     r0,r0,#0xa8
000040  4284              CMP      r4,r0
000042  d023              BEQ      |L8.140|
000044  4815              LDR      r0,|L8.156|
000046  4284              CMP      r4,r0
000048  d020              BEQ      |L8.140|
00004a  4814              LDR      r0,|L8.156|
00004c  3018              ADDS     r0,r0,#0x18
00004e  4284              CMP      r4,r0
000050  d01c              BEQ      |L8.140|
000052  4812              LDR      r0,|L8.156|
000054  3030              ADDS     r0,r0,#0x30
000056  4284              CMP      r4,r0
000058  d018              BEQ      |L8.140|
00005a  4810              LDR      r0,|L8.156|
00005c  3048              ADDS     r0,r0,#0x48
00005e  4284              CMP      r4,r0
000060  d014              BEQ      |L8.140|
000062  480e              LDR      r0,|L8.156|
000064  3060              ADDS     r0,r0,#0x60
000066  4284              CMP      r4,r0
000068  d010              BEQ      |L8.140|
00006a  480c              LDR      r0,|L8.156|
00006c  3078              ADDS     r0,r0,#0x78
00006e  4284              CMP      r4,r0
000070  d00c              BEQ      |L8.140|
000072  480a              LDR      r0,|L8.156|
000074  3090              ADDS     r0,r0,#0x90
000076  4284              CMP      r4,r0
000078  d008              BEQ      |L8.140|
00007a  4808              LDR      r0,|L8.156|
00007c  30a8              ADDS     r0,r0,#0xa8
00007e  4284              CMP      r4,r0
000080  d004              BEQ      |L8.140|
000082  f24031a2          MOV      r1,#0x3a2
000086  4806              LDR      r0,|L8.160|
000088  f7fffffe          BL       assert_failed
                  |L8.140|
;;;931    
;;;932      if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
00008c  6820              LDR      r0,[r4,#0]
00008e  07c0              LSLS     r0,r0,#31
000090  d000              BEQ      |L8.148|
;;;933      {
;;;934        /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
;;;935        state = ENABLE;
000092  2501              MOVS     r5,#1
                  |L8.148|
;;;936      }
;;;937      else
;;;938      {
;;;939        /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
;;;940            all transfers are complete) */
;;;941        state = DISABLE;
;;;942      }
;;;943      return state;
000094  4628              MOV      r0,r5
;;;944    }
000096  bd70              POP      {r4-r6,pc}
;;;945    
                          ENDP

                  |L8.152|
                          DCD      0x40026010
                  |L8.156|
                          DCD      0x40026410
                  |L8.160|
                          DCD      ||.conststring||

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=2

                  DMA_GetCurrDataCounter PROC
;;;640      */
;;;641    uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
000000  b510              PUSH     {r4,lr}
;;;642    {
000002  4604              MOV      r4,r0
;;;643      /* Check the parameters */
;;;644      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  4822              LDR      r0,|L9.144|
000006  4284              CMP      r4,r0
000008  d03f              BEQ      |L9.138|
00000a  4821              LDR      r0,|L9.144|
00000c  3018              ADDS     r0,r0,#0x18
00000e  4284              CMP      r4,r0
000010  d03b              BEQ      |L9.138|
000012  481f              LDR      r0,|L9.144|
000014  3030              ADDS     r0,r0,#0x30
000016  4284              CMP      r4,r0
000018  d037              BEQ      |L9.138|
00001a  481d              LDR      r0,|L9.144|
00001c  3048              ADDS     r0,r0,#0x48
00001e  4284              CMP      r4,r0
000020  d033              BEQ      |L9.138|
000022  481b              LDR      r0,|L9.144|
000024  3060              ADDS     r0,r0,#0x60
000026  4284              CMP      r4,r0
000028  d02f              BEQ      |L9.138|
00002a  4819              LDR      r0,|L9.144|
00002c  3078              ADDS     r0,r0,#0x78
00002e  4284              CMP      r4,r0
000030  d02b              BEQ      |L9.138|
000032  4817              LDR      r0,|L9.144|
000034  3090              ADDS     r0,r0,#0x90
000036  4284              CMP      r4,r0
000038  d027              BEQ      |L9.138|
00003a  4815              LDR      r0,|L9.144|
00003c  30a8              ADDS     r0,r0,#0xa8
00003e  4284              CMP      r4,r0
000040  d023              BEQ      |L9.138|
000042  4814              LDR      r0,|L9.148|
000044  4284              CMP      r4,r0
000046  d020              BEQ      |L9.138|
000048  4812              LDR      r0,|L9.148|
00004a  3018              ADDS     r0,r0,#0x18
00004c  4284              CMP      r4,r0
00004e  d01c              BEQ      |L9.138|
000050  4810              LDR      r0,|L9.148|
000052  3030              ADDS     r0,r0,#0x30
000054  4284              CMP      r4,r0
000056  d018              BEQ      |L9.138|
000058  480e              LDR      r0,|L9.148|
00005a  3048              ADDS     r0,r0,#0x48
00005c  4284              CMP      r4,r0
00005e  d014              BEQ      |L9.138|
000060  480c              LDR      r0,|L9.148|
000062  3060              ADDS     r0,r0,#0x60
000064  4284              CMP      r4,r0
000066  d010              BEQ      |L9.138|
000068  480a              LDR      r0,|L9.148|
00006a  3078              ADDS     r0,r0,#0x78
00006c  4284              CMP      r4,r0
00006e  d00c              BEQ      |L9.138|
000070  4808              LDR      r0,|L9.148|
000072  3090              ADDS     r0,r0,#0x90
000074  4284              CMP      r4,r0
000076  d008              BEQ      |L9.138|
000078  4806              LDR      r0,|L9.148|
00007a  30a8              ADDS     r0,r0,#0xa8
00007c  4284              CMP      r4,r0
00007e  d004              BEQ      |L9.138|
000080  f44f7121          MOV      r1,#0x284
000084  4804              LDR      r0,|L9.152|
000086  f7fffffe          BL       assert_failed
                  |L9.138|
;;;645    
;;;646      /* Return the number of remaining data units for DMAy Streamx */
;;;647      return ((uint16_t)(DMAy_Streamx->NDTR));
00008a  6860              LDR      r0,[r4,#4]
00008c  b280              UXTH     r0,r0
;;;648    }
00008e  bd10              POP      {r4,pc}
;;;649    /**
                          ENDP

                  |L9.144|
                          DCD      0x40026010
                  |L9.148|
                          DCD      0x40026410
                  |L9.152|
                          DCD      ||.conststring||

                          AREA ||i.DMA_GetCurrentMemoryTarget||, CODE, READONLY, ALIGN=2

                  DMA_GetCurrentMemoryTarget PROC
;;;815      */
;;;816    uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
000000  b570              PUSH     {r4-r6,lr}
;;;817    {
000002  4604              MOV      r4,r0
;;;818      uint32_t tmp = 0;
;;;819      
;;;820      /* Check the parameters */
;;;821      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  4824              LDR      r0,|L10.152|
000006  2500              MOVS     r5,#0                 ;818
000008  4284              CMP      r4,r0
00000a  d03f              BEQ      |L10.140|
00000c  4822              LDR      r0,|L10.152|
00000e  3018              ADDS     r0,r0,#0x18
000010  4284              CMP      r4,r0
000012  d03b              BEQ      |L10.140|
000014  4820              LDR      r0,|L10.152|
000016  3030              ADDS     r0,r0,#0x30
000018  4284              CMP      r4,r0
00001a  d037              BEQ      |L10.140|
00001c  481e              LDR      r0,|L10.152|
00001e  3048              ADDS     r0,r0,#0x48
000020  4284              CMP      r4,r0
000022  d033              BEQ      |L10.140|
000024  481c              LDR      r0,|L10.152|
000026  3060              ADDS     r0,r0,#0x60
000028  4284              CMP      r4,r0
00002a  d02f              BEQ      |L10.140|
00002c  481a              LDR      r0,|L10.152|
00002e  3078              ADDS     r0,r0,#0x78
000030  4284              CMP      r4,r0
000032  d02b              BEQ      |L10.140|
000034  4818              LDR      r0,|L10.152|
000036  3090              ADDS     r0,r0,#0x90
000038  4284              CMP      r4,r0
00003a  d027              BEQ      |L10.140|
00003c  4816              LDR      r0,|L10.152|
00003e  30a8              ADDS     r0,r0,#0xa8
000040  4284              CMP      r4,r0
000042  d023              BEQ      |L10.140|
000044  4815              LDR      r0,|L10.156|
000046  4284              CMP      r4,r0
000048  d020              BEQ      |L10.140|
00004a  4814              LDR      r0,|L10.156|
00004c  3018              ADDS     r0,r0,#0x18
00004e  4284              CMP      r4,r0
000050  d01c              BEQ      |L10.140|
000052  4812              LDR      r0,|L10.156|
000054  3030              ADDS     r0,r0,#0x30
000056  4284              CMP      r4,r0
000058  d018              BEQ      |L10.140|
00005a  4810              LDR      r0,|L10.156|
00005c  3048              ADDS     r0,r0,#0x48
00005e  4284              CMP      r4,r0
000060  d014              BEQ      |L10.140|
000062  480e              LDR      r0,|L10.156|
000064  3060              ADDS     r0,r0,#0x60
000066  4284              CMP      r4,r0
000068  d010              BEQ      |L10.140|
00006a  480c              LDR      r0,|L10.156|
00006c  3078              ADDS     r0,r0,#0x78
00006e  4284              CMP      r4,r0
000070  d00c              BEQ      |L10.140|
000072  480a              LDR      r0,|L10.156|
000074  3090              ADDS     r0,r0,#0x90
000076  4284              CMP      r4,r0
000078  d008              BEQ      |L10.140|
00007a  4808              LDR      r0,|L10.156|
00007c  30a8              ADDS     r0,r0,#0xa8
00007e  4284              CMP      r4,r0
000080  d004              BEQ      |L10.140|
000082  f2403135          MOV      r1,#0x335
000086  4806              LDR      r0,|L10.160|
000088  f7fffffe          BL       assert_failed
                  |L10.140|
;;;822    
;;;823      /* Get the current memory target */
;;;824      if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
00008c  6820              LDR      r0,[r4,#0]
00008e  0300              LSLS     r0,r0,#12
000090  d500              BPL      |L10.148|
;;;825      {
;;;826        /* Current memory buffer used is Memory 1 */
;;;827        tmp = 1;
000092  2501              MOVS     r5,#1
                  |L10.148|
;;;828      }  
;;;829      else
;;;830      {
;;;831        /* Current memory buffer used is Memory 0 */
;;;832        tmp = 0;    
;;;833      }
;;;834      return tmp;
000094  4628              MOV      r0,r5
;;;835    }
000096  bd70              POP      {r4-r6,pc}
;;;836    /**
                          ENDP

                  |L10.152|
                          DCD      0x40026010
                  |L10.156|
                          DCD      0x40026410
                  |L10.160|
                          DCD      ||.conststring||

                          AREA ||i.DMA_GetFIFOStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFIFOStatus PROC
;;;958      */
;;;959    uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
000000  b510              PUSH     {r4,lr}
;;;960    {
000002  4604              MOV      r4,r0
;;;961      uint32_t tmpreg = 0;
;;;962     
;;;963      /* Check the parameters */
;;;964      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  4823              LDR      r0,|L11.148|
000006  4284              CMP      r4,r0
000008  d03f              BEQ      |L11.138|
00000a  4822              LDR      r0,|L11.148|
00000c  3018              ADDS     r0,r0,#0x18
00000e  4284              CMP      r4,r0
000010  d03b              BEQ      |L11.138|
000012  4820              LDR      r0,|L11.148|
000014  3030              ADDS     r0,r0,#0x30
000016  4284              CMP      r4,r0
000018  d037              BEQ      |L11.138|
00001a  481e              LDR      r0,|L11.148|
00001c  3048              ADDS     r0,r0,#0x48
00001e  4284              CMP      r4,r0
000020  d033              BEQ      |L11.138|
000022  481c              LDR      r0,|L11.148|
000024  3060              ADDS     r0,r0,#0x60
000026  4284              CMP      r4,r0
000028  d02f              BEQ      |L11.138|
00002a  481a              LDR      r0,|L11.148|
00002c  3078              ADDS     r0,r0,#0x78
00002e  4284              CMP      r4,r0
000030  d02b              BEQ      |L11.138|
000032  4818              LDR      r0,|L11.148|
000034  3090              ADDS     r0,r0,#0x90
000036  4284              CMP      r4,r0
000038  d027              BEQ      |L11.138|
00003a  4816              LDR      r0,|L11.148|
00003c  30a8              ADDS     r0,r0,#0xa8
00003e  4284              CMP      r4,r0
000040  d023              BEQ      |L11.138|
000042  4815              LDR      r0,|L11.152|
000044  4284              CMP      r4,r0
000046  d020              BEQ      |L11.138|
000048  4813              LDR      r0,|L11.152|
00004a  3018              ADDS     r0,r0,#0x18
00004c  4284              CMP      r4,r0
00004e  d01c              BEQ      |L11.138|
000050  4811              LDR      r0,|L11.152|
000052  3030              ADDS     r0,r0,#0x30
000054  4284              CMP      r4,r0
000056  d018              BEQ      |L11.138|
000058  480f              LDR      r0,|L11.152|
00005a  3048              ADDS     r0,r0,#0x48
00005c  4284              CMP      r4,r0
00005e  d014              BEQ      |L11.138|
000060  480d              LDR      r0,|L11.152|
000062  3060              ADDS     r0,r0,#0x60
000064  4284              CMP      r4,r0
000066  d010              BEQ      |L11.138|
000068  480b              LDR      r0,|L11.152|
00006a  3078              ADDS     r0,r0,#0x78
00006c  4284              CMP      r4,r0
00006e  d00c              BEQ      |L11.138|
000070  4809              LDR      r0,|L11.152|
000072  3090              ADDS     r0,r0,#0x90
000074  4284              CMP      r4,r0
000076  d008              BEQ      |L11.138|
000078  4807              LDR      r0,|L11.152|
00007a  30a8              ADDS     r0,r0,#0xa8
00007c  4284              CMP      r4,r0
00007e  d004              BEQ      |L11.138|
000080  f44f7171          MOV      r1,#0x3c4
000084  4805              LDR      r0,|L11.156|
000086  f7fffffe          BL       assert_failed
                  |L11.138|
;;;965      
;;;966      /* Get the FIFO level bits */
;;;967      tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
00008a  6960              LDR      r0,[r4,#0x14]
00008c  f0000038          AND      r0,r0,#0x38
;;;968      
;;;969      return tmpreg;
;;;970    }
000090  bd10              POP      {r4,pc}
;;;971    
                          ENDP

000092  0000              DCW      0x0000
                  |L11.148|
                          DCD      0x40026010
                  |L11.152|
                          DCD      0x40026410
                  |L11.156|
                          DCD      ||.conststring||

                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;985      */
;;;986    FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;987    {
000004  4605              MOV      r5,r0
;;;988      FlagStatus bitstatus = RESET;
;;;989      DMA_TypeDef* DMAy;
;;;990      uint32_t tmpreg = 0;
;;;991    
;;;992      /* Check the parameters */
;;;993      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000006  486c              LDR      r0,|L12.440|
000008  2600              MOVS     r6,#0                 ;988
00000a  4f6c              LDR      r7,|L12.444|
00000c  460c              MOV      r4,r1                 ;987
00000e  4285              CMP      r5,r0
000010  d03e              BEQ      |L12.144|
000012  4869              LDR      r0,|L12.440|
000014  3018              ADDS     r0,r0,#0x18
000016  4285              CMP      r5,r0
000018  d03a              BEQ      |L12.144|
00001a  4867              LDR      r0,|L12.440|
00001c  3030              ADDS     r0,r0,#0x30
00001e  4285              CMP      r5,r0
000020  d036              BEQ      |L12.144|
000022  4865              LDR      r0,|L12.440|
000024  3048              ADDS     r0,r0,#0x48
000026  4285              CMP      r5,r0
000028  d032              BEQ      |L12.144|
00002a  4863              LDR      r0,|L12.440|
00002c  3060              ADDS     r0,r0,#0x60
00002e  4285              CMP      r5,r0
000030  d02e              BEQ      |L12.144|
000032  4861              LDR      r0,|L12.440|
000034  3078              ADDS     r0,r0,#0x78
000036  4285              CMP      r5,r0
000038  d02a              BEQ      |L12.144|
00003a  485f              LDR      r0,|L12.440|
00003c  3090              ADDS     r0,r0,#0x90
00003e  4285              CMP      r5,r0
000040  d026              BEQ      |L12.144|
000042  485d              LDR      r0,|L12.440|
000044  30a8              ADDS     r0,r0,#0xa8
000046  4285              CMP      r5,r0
000048  d022              BEQ      |L12.144|
00004a  42bd              CMP      r5,r7
00004c  d020              BEQ      |L12.144|
00004e  485b              LDR      r0,|L12.444|
000050  3018              ADDS     r0,r0,#0x18
000052  4285              CMP      r5,r0
000054  d01c              BEQ      |L12.144|
000056  4859              LDR      r0,|L12.444|
000058  3030              ADDS     r0,r0,#0x30
00005a  4285              CMP      r5,r0
00005c  d018              BEQ      |L12.144|
00005e  4857              LDR      r0,|L12.444|
000060  3048              ADDS     r0,r0,#0x48
000062  4285              CMP      r5,r0
000064  d014              BEQ      |L12.144|
000066  4855              LDR      r0,|L12.444|
000068  3060              ADDS     r0,r0,#0x60
00006a  4285              CMP      r5,r0
00006c  d010              BEQ      |L12.144|
00006e  4853              LDR      r0,|L12.444|
000070  3078              ADDS     r0,r0,#0x78
000072  4285              CMP      r5,r0
000074  d00c              BEQ      |L12.144|
000076  4851              LDR      r0,|L12.444|
000078  3090              ADDS     r0,r0,#0x90
00007a  4285              CMP      r5,r0
00007c  d008              BEQ      |L12.144|
00007e  484f              LDR      r0,|L12.444|
000080  30a8              ADDS     r0,r0,#0xa8
000082  4285              CMP      r5,r0
000084  d004              BEQ      |L12.144|
000086  f24031e1          MOV      r1,#0x3e1
00008a  484d              LDR      r0,|L12.448|
00008c  f7fffffe          BL       assert_failed
                  |L12.144|
;;;994      assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
000090  f1a45080          SUB      r0,r4,#0x10000000
000094  3820              SUBS     r0,r0,#0x20
000096  d07a              BEQ      |L12.398|
000098  3010              ADDS     r0,r0,#0x10
00009a  d078              BEQ      |L12.398|
00009c  3008              ADDS     r0,r0,#8
00009e  d076              BEQ      |L12.398|
0000a0  f1a45084          SUB      r0,r4,#0x10800000
0000a4  1f00              SUBS     r0,r0,#4
0000a6  d072              BEQ      |L12.398|
0000a8  f06f5084          MVN      r0,#0x10800000
0000ac  42c4              CMN      r4,r0
0000ae  d06e              BEQ      |L12.398|
0000b0  4844              LDR      r0,|L12.452|
0000b2  4284              CMP      r4,r0
0000b4  d06b              BEQ      |L12.398|
0000b6  4844              LDR      r0,|L12.456|
0000b8  4284              CMP      r4,r0
0000ba  d068              BEQ      |L12.398|
0000bc  4843              LDR      r0,|L12.460|
0000be  4284              CMP      r4,r0
0000c0  d065              BEQ      |L12.398|
0000c2  4843              LDR      r0,|L12.464|
0000c4  4284              CMP      r4,r0
0000c6  d062              BEQ      |L12.398|
0000c8  f1a45080          SUB      r0,r4,#0x10000000
0000cc  3840              SUBS     r0,r0,#0x40
0000ce  d05e              BEQ      |L12.398|
0000d0  f1b45f81          CMP      r4,#0x10200000
0000d4  d05b              BEQ      |L12.398|
0000d6  483f              LDR      r0,|L12.468|
0000d8  4284              CMP      r4,r0
0000da  d058              BEQ      |L12.398|
0000dc  483e              LDR      r0,|L12.472|
0000de  4284              CMP      r4,r0
0000e0  d055              BEQ      |L12.398|
0000e2  483e              LDR      r0,|L12.476|
0000e4  4284              CMP      r4,r0
0000e6  d052              BEQ      |L12.398|
0000e8  483d              LDR      r0,|L12.480|
0000ea  4284              CMP      r4,r0
0000ec  d04f              BEQ      |L12.398|
0000ee  f1b45fc0          CMP      r4,#0x18000000
0000f2  d04c              BEQ      |L12.398|
0000f4  f1b45fa0          CMP      r4,#0x14000000
0000f8  d049              BEQ      |L12.398|
0000fa  f1b45f90          CMP      r4,#0x12000000
0000fe  d046              BEQ      |L12.398|
000100  f1b45f88          CMP      r4,#0x11000000
000104  d043              BEQ      |L12.398|
000106  f1b45f82          CMP      r4,#0x10400000
00010a  d040              BEQ      |L12.398|
00010c  f1a45000          SUB      r0,r4,#0x20000000
000110  3820              SUBS     r0,r0,#0x20
000112  d03c              BEQ      |L12.398|
000114  3010              ADDS     r0,r0,#0x10
000116  d03a              BEQ      |L12.398|
000118  3008              ADDS     r0,r0,#8
00011a  d038              BEQ      |L12.398|
00011c  1d00              ADDS     r0,r0,#4
00011e  d036              BEQ      |L12.398|
000120  f06f5000          MVN      r0,#0x20000000
000124  42c4              CMN      r4,r0
000126  d032              BEQ      |L12.398|
000128  482e              LDR      r0,|L12.484|
00012a  4284              CMP      r4,r0
00012c  d02f              BEQ      |L12.398|
00012e  482e              LDR      r0,|L12.488|
000130  4284              CMP      r4,r0
000132  d02c              BEQ      |L12.398|
000134  482d              LDR      r0,|L12.492|
000136  4284              CMP      r4,r0
000138  d029              BEQ      |L12.398|
00013a  482d              LDR      r0,|L12.496|
00013c  4284              CMP      r4,r0
00013e  d026              BEQ      |L12.398|
000140  f1a45000          SUB      r0,r4,#0x20000000
000144  3840              SUBS     r0,r0,#0x40
000146  d022              BEQ      |L12.398|
000148  482a              LDR      r0,|L12.500|
00014a  4284              CMP      r4,r0
00014c  d01f              BEQ      |L12.398|
00014e  482a              LDR      r0,|L12.504|
000150  4284              CMP      r4,r0
000152  d01c              BEQ      |L12.398|
000154  4829              LDR      r0,|L12.508|
000156  4284              CMP      r4,r0
000158  d019              BEQ      |L12.398|
00015a  4829              LDR      r0,|L12.512|
00015c  4284              CMP      r4,r0
00015e  d016              BEQ      |L12.398|
000160  4828              LDR      r0,|L12.516|
000162  4284              CMP      r4,r0
000164  d013              BEQ      |L12.398|
000166  f1b45f20          CMP      r4,#0x28000000
00016a  d010              BEQ      |L12.398|
00016c  f1b45f10          CMP      r4,#0x24000000
000170  d00d              BEQ      |L12.398|
000172  f1b45f08          CMP      r4,#0x22000000
000176  d00a              BEQ      |L12.398|
000178  f1b45f04          CMP      r4,#0x21000000
00017c  d007              BEQ      |L12.398|
00017e  f1b45f01          CMP      r4,#0x20400000
000182  d004              BEQ      |L12.398|
000184  f24031e2          MOV      r1,#0x3e2
000188  480d              LDR      r0,|L12.448|
00018a  f7fffffe          BL       assert_failed
                  |L12.398|
;;;995    
;;;996      /* Determine the DMA to which belongs the stream */
;;;997      if (DMAy_Streamx < DMA2_Stream0)
00018e  42bd              CMP      r5,r7
000190  d202              BCS      |L12.408|
;;;998      {
;;;999        /* DMAy_Streamx belongs to DMA1 */
;;;1000       DMAy = DMA1; 
000192  4809              LDR      r0,|L12.440|
000194  3810              SUBS     r0,r0,#0x10
000196  e001              B        |L12.412|
                  |L12.408|
;;;1001     } 
;;;1002     else 
;;;1003     {
;;;1004       /* DMAy_Streamx belongs to DMA2 */
;;;1005       DMAy = DMA2; 
000198  4808              LDR      r0,|L12.444|
00019a  3810              SUBS     r0,r0,#0x10
                  |L12.412|
;;;1006     }
;;;1007   
;;;1008     /* Check if the flag is in HISR or LISR */
;;;1009     if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
00019c  00a1              LSLS     r1,r4,#2
00019e  d501              BPL      |L12.420|
;;;1010     {
;;;1011       /* Get DMAy HISR register value */
;;;1012       tmpreg = DMAy->HISR;
0001a0  6840              LDR      r0,[r0,#4]
0001a2  e000              B        |L12.422|
                  |L12.420|
;;;1013     }
;;;1014     else
;;;1015     {
;;;1016       /* Get DMAy LISR register value */
;;;1017       tmpreg = DMAy->LISR;
0001a4  6800              LDR      r0,[r0,#0]
                  |L12.422|
;;;1018     }   
;;;1019    
;;;1020     /* Mask the reserved bits */
;;;1021     tmpreg &= (uint32_t)RESERVED_MASK;
0001a6  4918              LDR      r1,|L12.520|
0001a8  4008              ANDS     r0,r0,r1
;;;1022   
;;;1023     /* Check the status of the specified DMA flag */
;;;1024     if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
0001aa  4220              TST      r0,r4
0001ac  d000              BEQ      |L12.432|
;;;1025     {
;;;1026       /* DMA_FLAG is set */
;;;1027       bitstatus = SET;
0001ae  2601              MOVS     r6,#1
                  |L12.432|
;;;1028     }
;;;1029     else
;;;1030     {
;;;1031       /* DMA_FLAG is reset */
;;;1032       bitstatus = RESET;
;;;1033     }
;;;1034   
;;;1035     /* Return the DMA_FLAG status */
;;;1036     return  bitstatus;
0001b0  4630              MOV      r0,r6
;;;1037   }
0001b2  e8bd81f0          POP      {r4-r8,pc}
;;;1038   
                          ENDP

0001b6  0000              DCW      0x0000
                  |L12.440|
                          DCD      0x40026010
                  |L12.444|
                          DCD      0x40026410
                  |L12.448|
                          DCD      ||.conststring||
                  |L12.452|
                          DCD      0x10000800
                  |L12.456|
                          DCD      0x10000400
                  |L12.460|
                          DCD      0x10000200
                  |L12.464|
                          DCD      0x10000100
                  |L12.468|
                          DCD      0x10100000
                  |L12.472|
                          DCD      0x10080000
                  |L12.476|
                          DCD      0x10040000
                  |L12.480|
                          DCD      0x10010000
                  |L12.484|
                          DCD      0x20000800
                  |L12.488|
                          DCD      0x20000400
                  |L12.492|
                          DCD      0x20000200
                  |L12.496|
                          DCD      0x20000100
                  |L12.500|
                          DCD      0x20200000
                  |L12.504|
                          DCD      0x20100000
                  |L12.508|
                          DCD      0x20080000
                  |L12.512|
                          DCD      0x20040000
                  |L12.516|
                          DCD      0x20010000
                  |L12.520|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;1151     */
;;;1152   ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1153   {
000004  4605              MOV      r5,r0
;;;1154     ITStatus bitstatus = RESET;
;;;1155     DMA_TypeDef* DMAy;
;;;1156     uint32_t tmpreg = 0, enablestatus = 0;
;;;1157   
;;;1158     /* Check the parameters */
;;;1159     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000006  4875              LDR      r0,|L13.476|
000008  2600              MOVS     r6,#0                 ;1154
00000a  4f75              LDR      r7,|L13.480|
00000c  460c              MOV      r4,r1                 ;1153
00000e  4285              CMP      r5,r0
000010  d03e              BEQ      |L13.144|
000012  4872              LDR      r0,|L13.476|
000014  3018              ADDS     r0,r0,#0x18
000016  4285              CMP      r5,r0
000018  d03a              BEQ      |L13.144|
00001a  4870              LDR      r0,|L13.476|
00001c  3030              ADDS     r0,r0,#0x30
00001e  4285              CMP      r5,r0
000020  d036              BEQ      |L13.144|
000022  486e              LDR      r0,|L13.476|
000024  3048              ADDS     r0,r0,#0x48
000026  4285              CMP      r5,r0
000028  d032              BEQ      |L13.144|
00002a  486c              LDR      r0,|L13.476|
00002c  3060              ADDS     r0,r0,#0x60
00002e  4285              CMP      r5,r0
000030  d02e              BEQ      |L13.144|
000032  486a              LDR      r0,|L13.476|
000034  3078              ADDS     r0,r0,#0x78
000036  4285              CMP      r5,r0
000038  d02a              BEQ      |L13.144|
00003a  4868              LDR      r0,|L13.476|
00003c  3090              ADDS     r0,r0,#0x90
00003e  4285              CMP      r5,r0
000040  d026              BEQ      |L13.144|
000042  4866              LDR      r0,|L13.476|
000044  30a8              ADDS     r0,r0,#0xa8
000046  4285              CMP      r5,r0
000048  d022              BEQ      |L13.144|
00004a  42bd              CMP      r5,r7
00004c  d020              BEQ      |L13.144|
00004e  4864              LDR      r0,|L13.480|
000050  3018              ADDS     r0,r0,#0x18
000052  4285              CMP      r5,r0
000054  d01c              BEQ      |L13.144|
000056  4862              LDR      r0,|L13.480|
000058  3030              ADDS     r0,r0,#0x30
00005a  4285              CMP      r5,r0
00005c  d018              BEQ      |L13.144|
00005e  4860              LDR      r0,|L13.480|
000060  3048              ADDS     r0,r0,#0x48
000062  4285              CMP      r5,r0
000064  d014              BEQ      |L13.144|
000066  485e              LDR      r0,|L13.480|
000068  3060              ADDS     r0,r0,#0x60
00006a  4285              CMP      r5,r0
00006c  d010              BEQ      |L13.144|
00006e  485c              LDR      r0,|L13.480|
000070  3078              ADDS     r0,r0,#0x78
000072  4285              CMP      r5,r0
000074  d00c              BEQ      |L13.144|
000076  485a              LDR      r0,|L13.480|
000078  3090              ADDS     r0,r0,#0x90
00007a  4285              CMP      r5,r0
00007c  d008              BEQ      |L13.144|
00007e  4858              LDR      r0,|L13.480|
000080  30a8              ADDS     r0,r0,#0xa8
000082  4285              CMP      r5,r0
000084  d004              BEQ      |L13.144|
000086  f2404187          MOV      r1,#0x487
00008a  4856              LDR      r0,|L13.484|
00008c  f7fffffe          BL       assert_failed
                  |L13.144|
;;;1160     assert_param(IS_DMA_GET_IT(DMA_IT));
000090  4855              LDR      r0,|L13.488|
000092  4284              CMP      r4,r0
000094  d07d              BEQ      |L13.402|
000096  4855              LDR      r0,|L13.492|
000098  4284              CMP      r4,r0
00009a  d07d              BEQ      |L13.408|
00009c  4854              LDR      r0,|L13.496|
00009e  4284              CMP      r4,r0
0000a0  d07a              BEQ      |L13.408|
0000a2  f1a42010          SUB      r0,r4,#0x10001000
0000a6  1f00              SUBS     r0,r0,#4
0000a8  d076              BEQ      |L13.408|
0000aa  f06f4010          MVN      r0,#0x90000000
0000ae  42c4              CMN      r4,r0
0000b0  d072              BEQ      |L13.408|
0000b2  4850              LDR      r0,|L13.500|
0000b4  4284              CMP      r4,r0
0000b6  d06f              BEQ      |L13.408|
0000b8  484f              LDR      r0,|L13.504|
0000ba  4284              CMP      r4,r0
0000bc  d06c              BEQ      |L13.408|
0000be  484f              LDR      r0,|L13.508|
0000c0  4284              CMP      r4,r0
0000c2  d069              BEQ      |L13.408|
0000c4  484e              LDR      r0,|L13.512|
0000c6  4284              CMP      r4,r0
0000c8  d066              BEQ      |L13.408|
0000ca  484e              LDR      r0,|L13.516|
0000cc  4284              CMP      r4,r0
0000ce  d063              BEQ      |L13.408|
0000d0  484d              LDR      r0,|L13.520|
0000d2  4284              CMP      r4,r0
0000d4  d060              BEQ      |L13.408|
0000d6  484d              LDR      r0,|L13.524|
0000d8  4284              CMP      r4,r0
0000da  d05d              BEQ      |L13.408|
0000dc  484c              LDR      r0,|L13.528|
0000de  4284              CMP      r4,r0
0000e0  d05a              BEQ      |L13.408|
0000e2  484c              LDR      r0,|L13.532|
0000e4  4284              CMP      r4,r0
0000e6  d057              BEQ      |L13.408|
0000e8  484b              LDR      r0,|L13.536|
0000ea  4284              CMP      r4,r0
0000ec  d054              BEQ      |L13.408|
0000ee  484b              LDR      r0,|L13.540|
0000f0  4284              CMP      r4,r0
0000f2  d051              BEQ      |L13.408|
0000f4  484a              LDR      r0,|L13.544|
0000f6  4284              CMP      r4,r0
0000f8  d04e              BEQ      |L13.408|
0000fa  484a              LDR      r0,|L13.548|
0000fc  4284              CMP      r4,r0
0000fe  d04b              BEQ      |L13.408|
000100  4849              LDR      r0,|L13.552|
000102  4284              CMP      r4,r0
000104  d048              BEQ      |L13.408|
000106  4849              LDR      r0,|L13.556|
000108  4284              CMP      r4,r0
00010a  d045              BEQ      |L13.408|
00010c  4848              LDR      r0,|L13.560|
00010e  4284              CMP      r4,r0
000110  d042              BEQ      |L13.408|
000112  4848              LDR      r0,|L13.564|
000114  4284              CMP      r4,r0
000116  d03f              BEQ      |L13.408|
000118  f1a42020          SUB      r0,r4,#0x20002000
00011c  3808              SUBS     r0,r0,#8
00011e  d03b              BEQ      |L13.408|
000120  4845              LDR      r0,|L13.568|
000122  4284              CMP      r4,r0
000124  d038              BEQ      |L13.408|
000126  f06f4020          MVN      r0,#0xa0000000
00012a  42c4              CMN      r4,r0
00012c  d034              BEQ      |L13.408|
00012e  4843              LDR      r0,|L13.572|
000130  4284              CMP      r4,r0
000132  d031              BEQ      |L13.408|
000134  4842              LDR      r0,|L13.576|
000136  4284              CMP      r4,r0
000138  d02e              BEQ      |L13.408|
00013a  4842              LDR      r0,|L13.580|
00013c  4284              CMP      r4,r0
00013e  d02b              BEQ      |L13.408|
000140  483d              LDR      r0,|L13.568|
000142  30fc              ADDS     r0,r0,#0xfc
000144  4284              CMP      r4,r0
000146  d027              BEQ      |L13.408|
000148  483f              LDR      r0,|L13.584|
00014a  4284              CMP      r4,r0
00014c  d024              BEQ      |L13.408|
00014e  483f              LDR      r0,|L13.588|
000150  4284              CMP      r4,r0
000152  d021              BEQ      |L13.408|
000154  483e              LDR      r0,|L13.592|
000156  4284              CMP      r4,r0
000158  d01e              BEQ      |L13.408|
00015a  483e              LDR      r0,|L13.596|
00015c  4284              CMP      r4,r0
00015e  d01b              BEQ      |L13.408|
000160  483d              LDR      r0,|L13.600|
000162  4284              CMP      r4,r0
000164  d018              BEQ      |L13.408|
000166  483d              LDR      r0,|L13.604|
000168  4284              CMP      r4,r0
00016a  d015              BEQ      |L13.408|
00016c  483c              LDR      r0,|L13.608|
00016e  4284              CMP      r4,r0
000170  d012              BEQ      |L13.408|
000172  483c              LDR      r0,|L13.612|
000174  4284              CMP      r4,r0
000176  d00f              BEQ      |L13.408|
000178  483b              LDR      r0,|L13.616|
00017a  4284              CMP      r4,r0
00017c  d00c              BEQ      |L13.408|
00017e  483b              LDR      r0,|L13.620|
000180  4284              CMP      r4,r0
000182  d009              BEQ      |L13.408|
000184  483a              LDR      r0,|L13.624|
000186  4284              CMP      r4,r0
000188  d006              BEQ      |L13.408|
00018a  f44f6191          MOV      r1,#0x488
00018e  4815              LDR      r0,|L13.484|
000190  e000              B        |L13.404|
                  |L13.402|
000192  e001              B        |L13.408|
                  |L13.404|
000194  f7fffffe          BL       assert_failed
                  |L13.408|
;;;1161    
;;;1162     /* Determine the DMA to which belongs the stream */
;;;1163     if (DMAy_Streamx < DMA2_Stream0)
000198  42bd              CMP      r5,r7
00019a  d202              BCS      |L13.418|
;;;1164     {
;;;1165       /* DMAy_Streamx belongs to DMA1 */
;;;1166       DMAy = DMA1; 
00019c  480f              LDR      r0,|L13.476|
00019e  3810              SUBS     r0,r0,#0x10
0001a0  e001              B        |L13.422|
                  |L13.418|
;;;1167     } 
;;;1168     else 
;;;1169     {
;;;1170       /* DMAy_Streamx belongs to DMA2 */
;;;1171       DMAy = DMA2; 
0001a2  480f              LDR      r0,|L13.480|
0001a4  3810              SUBS     r0,r0,#0x10
                  |L13.422|
;;;1172     }
;;;1173   
;;;1174     /* Check if the interrupt enable bit is in the CR or FCR register */
;;;1175     if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
0001a6  4933              LDR      r1,|L13.628|
0001a8  420c              TST      r4,r1
0001aa  d005              BEQ      |L13.440|
;;;1176     {
;;;1177       /* Get the interrupt enable position mask in CR register */
;;;1178       tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
0001ac  211e              MOVS     r1,#0x1e
0001ae  ea0122d4          AND      r2,r1,r4,LSR #11
;;;1179       
;;;1180       /* Check the enable bit in CR register */
;;;1181       enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
0001b2  6829              LDR      r1,[r5,#0]
0001b4  4011              ANDS     r1,r1,r2
0001b6  e002              B        |L13.446|
                  |L13.440|
;;;1182     }
;;;1183     else 
;;;1184     {
;;;1185       /* Check the enable bit in FCR register */
;;;1186       enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
0001b8  6969              LDR      r1,[r5,#0x14]
0001ba  f0010180          AND      r1,r1,#0x80
                  |L13.446|
;;;1187     }
;;;1188    
;;;1189     /* Check if the interrupt pending flag is in LISR or HISR */
;;;1190     if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
0001be  00a2              LSLS     r2,r4,#2
0001c0  d501              BPL      |L13.454|
;;;1191     {
;;;1192       /* Get DMAy HISR register value */
;;;1193       tmpreg = DMAy->HISR ;
0001c2  6840              LDR      r0,[r0,#4]
0001c4  e000              B        |L13.456|
                  |L13.454|
;;;1194     }
;;;1195     else
;;;1196     {
;;;1197       /* Get DMAy LISR register value */
;;;1198       tmpreg = DMAy->LISR ;
0001c6  6800              LDR      r0,[r0,#0]
                  |L13.456|
;;;1199     } 
;;;1200   
;;;1201     /* mask all reserved bits */
;;;1202     tmpreg &= (uint32_t)RESERVED_MASK;
0001c8  4a2b              LDR      r2,|L13.632|
0001ca  4010              ANDS     r0,r0,r2
;;;1203   
;;;1204     /* Check the status of the specified DMA interrupt */
;;;1205     if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
0001cc  4220              TST      r0,r4
0001ce  d001              BEQ      |L13.468|
0001d0  b101              CBZ      r1,|L13.468|
;;;1206     {
;;;1207       /* DMA_IT is set */
;;;1208       bitstatus = SET;
0001d2  2601              MOVS     r6,#1
                  |L13.468|
;;;1209     }
;;;1210     else
;;;1211     {
;;;1212       /* DMA_IT is reset */
;;;1213       bitstatus = RESET;
;;;1214     }
;;;1215   
;;;1216     /* Return the DMA_IT status */
;;;1217     return  bitstatus;
0001d4  4630              MOV      r0,r6
;;;1218   }
0001d6  e8bd81f0          POP      {r4-r8,pc}
;;;1219   
                          ENDP

0001da  0000              DCW      0x0000
                  |L13.476|
                          DCD      0x40026010
                  |L13.480|
                          DCD      0x40026410
                  |L13.484|
                          DCD      ||.conststring||
                  |L13.488|
                          DCD      0x10008020
                  |L13.492|
                          DCD      0x10004010
                  |L13.496|
                          DCD      0x10002008
                  |L13.500|
                          DCD      0x10008800
                  |L13.504|
                          DCD      0x10004400
                  |L13.508|
                          DCD      0x10002200
                  |L13.512|
                          DCD      0x10001100
                  |L13.516|
                          DCD      0x90000040
                  |L13.520|
                          DCD      0x10208000
                  |L13.524|
                          DCD      0x10104000
                  |L13.528|
                          DCD      0x10082000
                  |L13.532|
                          DCD      0x10041000
                  |L13.536|
                          DCD      0x90010000
                  |L13.540|
                          DCD      0x18008000
                  |L13.544|
                          DCD      0x14004000
                  |L13.548|
                          DCD      0x12002000
                  |L13.552|
                          DCD      0x11001000
                  |L13.556|
                          DCD      0x90400000
                  |L13.560|
                          DCD      0x20008020
                  |L13.564|
                          DCD      0x20004010
                  |L13.568|
                          DCD      0x20001004
                  |L13.572|
                          DCD      0x20008800
                  |L13.576|
                          DCD      0x20004400
                  |L13.580|
                          DCD      0x20002200
                  |L13.584|
                          DCD      0xa0000040
                  |L13.588|
                          DCD      0x20208000
                  |L13.592|
                          DCD      0x20104000
                  |L13.596|
                          DCD      0x20082000
                  |L13.600|
                          DCD      0x20041000
                  |L13.604|
                          DCD      0xa0010000
                  |L13.608|
                          DCD      0x28008000
                  |L13.612|
                          DCD      0x24004000
                  |L13.616|
                          DCD      0x22002000
                  |L13.620|
                          DCD      0x21001000
                  |L13.624|
                          DCD      0xa0400000
                  |L13.628|
                          DCD      0x0f3c0f3c
                  |L13.632|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=2

                  DMA_ITConfig PROC
;;;1099     */
;;;1100   void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;1101   {
000002  4604              MOV      r4,r0
;;;1102     /* Check the parameters */
;;;1103     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  4835              LDR      r0,|L14.220|
000006  4616              MOV      r6,r2                 ;1101
000008  460d              MOV      r5,r1                 ;1101
00000a  4284              CMP      r4,r0
00000c  d03f              BEQ      |L14.142|
00000e  4833              LDR      r0,|L14.220|
000010  3018              ADDS     r0,r0,#0x18
000012  4284              CMP      r4,r0
000014  d03b              BEQ      |L14.142|
000016  4831              LDR      r0,|L14.220|
000018  3030              ADDS     r0,r0,#0x30
00001a  4284              CMP      r4,r0
00001c  d037              BEQ      |L14.142|
00001e  482f              LDR      r0,|L14.220|
000020  3048              ADDS     r0,r0,#0x48
000022  4284              CMP      r4,r0
000024  d033              BEQ      |L14.142|
000026  482d              LDR      r0,|L14.220|
000028  3060              ADDS     r0,r0,#0x60
00002a  4284              CMP      r4,r0
00002c  d02f              BEQ      |L14.142|
00002e  482b              LDR      r0,|L14.220|
000030  3078              ADDS     r0,r0,#0x78
000032  4284              CMP      r4,r0
000034  d02b              BEQ      |L14.142|
000036  4829              LDR      r0,|L14.220|
000038  3090              ADDS     r0,r0,#0x90
00003a  4284              CMP      r4,r0
00003c  d027              BEQ      |L14.142|
00003e  4827              LDR      r0,|L14.220|
000040  30a8              ADDS     r0,r0,#0xa8
000042  4284              CMP      r4,r0
000044  d023              BEQ      |L14.142|
000046  4826              LDR      r0,|L14.224|
000048  4284              CMP      r4,r0
00004a  d020              BEQ      |L14.142|
00004c  4824              LDR      r0,|L14.224|
00004e  3018              ADDS     r0,r0,#0x18
000050  4284              CMP      r4,r0
000052  d01c              BEQ      |L14.142|
000054  4822              LDR      r0,|L14.224|
000056  3030              ADDS     r0,r0,#0x30
000058  4284              CMP      r4,r0
00005a  d018              BEQ      |L14.142|
00005c  4820              LDR      r0,|L14.224|
00005e  3048              ADDS     r0,r0,#0x48
000060  4284              CMP      r4,r0
000062  d014              BEQ      |L14.142|
000064  481e              LDR      r0,|L14.224|
000066  3060              ADDS     r0,r0,#0x60
000068  4284              CMP      r4,r0
00006a  d010              BEQ      |L14.142|
00006c  481c              LDR      r0,|L14.224|
00006e  3078              ADDS     r0,r0,#0x78
000070  4284              CMP      r4,r0
000072  d00c              BEQ      |L14.142|
000074  481a              LDR      r0,|L14.224|
000076  3090              ADDS     r0,r0,#0x90
000078  4284              CMP      r4,r0
00007a  d008              BEQ      |L14.142|
00007c  4818              LDR      r0,|L14.224|
00007e  30a8              ADDS     r0,r0,#0xa8
000080  4284              CMP      r4,r0
000082  d004              BEQ      |L14.142|
000084  f240414f          MOV      r1,#0x44f
000088  4816              LDR      r0,|L14.228|
00008a  f7fffffe          BL       assert_failed
                  |L14.142|
;;;1104     assert_param(IS_DMA_CONFIG_IT(DMA_IT));
00008e  f035009e          BICS     r0,r5,#0x9e
000092  d100              BNE      |L14.150|
000094  b925              CBNZ     r5,|L14.160|
                  |L14.150|
000096  f44f618a          MOV      r1,#0x450
00009a  4812              LDR      r0,|L14.228|
00009c  f7fffffe          BL       assert_failed
                  |L14.160|
;;;1105     assert_param(IS_FUNCTIONAL_STATE(NewState));
0000a0  b136              CBZ      r6,|L14.176|
0000a2  2e01              CMP      r6,#1
0000a4  d004              BEQ      |L14.176|
0000a6  f2404151          MOV      r1,#0x451
0000aa  480e              LDR      r0,|L14.228|
0000ac  f7fffffe          BL       assert_failed
                  |L14.176|
;;;1106   
;;;1107     /* Check if the DMA_IT parameter contains a FIFO interrupt */
;;;1108     if ((DMA_IT & DMA_IT_FE) != 0)
0000b0  0628              LSLS     r0,r5,#24
0000b2  d507              BPL      |L14.196|
;;;1109     {
;;;1110       if (NewState != DISABLE)
;;;1111       {
;;;1112         /* Enable the selected DMA FIFO interrupts */
;;;1113         DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
;;;1114       }    
;;;1115       else 
;;;1116       {
;;;1117         /* Disable the selected DMA FIFO interrupts */
;;;1118         DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
0000b4  6960              LDR      r0,[r4,#0x14]
0000b6  b116              CBZ      r6,|L14.190|
0000b8  f0400080          ORR      r0,r0,#0x80           ;1113
0000bc  e001              B        |L14.194|
                  |L14.190|
0000be  f0200080          BIC      r0,r0,#0x80
                  |L14.194|
0000c2  6160              STR      r0,[r4,#0x14]         ;1113
                  |L14.196|
;;;1119       }
;;;1120     }
;;;1121   
;;;1122     /* Check if the DMA_IT parameter contains a Transfer interrupt */
;;;1123     if (DMA_IT != DMA_IT_FE)
0000c4  2d80              CMP      r5,#0x80
0000c6  d007              BEQ      |L14.216|
;;;1124     {
;;;1125       if (NewState != DISABLE)
;;;1126       {
;;;1127         /* Enable the selected DMA transfer interrupts */
;;;1128         DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
;;;1129       }
;;;1130       else
;;;1131       {
;;;1132         /* Disable the selected DMA transfer interrupts */
;;;1133         DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
0000c8  6821              LDR      r1,[r4,#0]
0000ca  f005001e          AND      r0,r5,#0x1e           ;1128
0000ce  b10e              CBZ      r6,|L14.212|
0000d0  4301              ORRS     r1,r1,r0              ;1128
0000d2  e000              B        |L14.214|
                  |L14.212|
0000d4  4381              BICS     r1,r1,r0
                  |L14.214|
0000d6  6021              STR      r1,[r4,#0]
                  |L14.216|
;;;1134       }    
;;;1135     }
;;;1136   }
0000d8  bd70              POP      {r4-r6,pc}
;;;1137   
                          ENDP

0000da  0000              DCW      0x0000
                  |L14.220|
                          DCD      0x40026010
                  |L14.224|
                          DCD      0x40026410
                  |L14.228|
                          DCD      ||.conststring||

                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=2

                  DMA_Init PROC
;;;310      */
;;;311    void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;312    {
000002  4605              MOV      r5,r0
;;;313      uint32_t tmpreg = 0;
;;;314    
;;;315      /* Check the parameters */
;;;316      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  488d              LDR      r0,|L15.572|
000006  460c              MOV      r4,r1                 ;312
000008  4285              CMP      r5,r0
00000a  d03f              BEQ      |L15.140|
00000c  488b              LDR      r0,|L15.572|
00000e  3018              ADDS     r0,r0,#0x18
000010  4285              CMP      r5,r0
000012  d03b              BEQ      |L15.140|
000014  4889              LDR      r0,|L15.572|
000016  3030              ADDS     r0,r0,#0x30
000018  4285              CMP      r5,r0
00001a  d037              BEQ      |L15.140|
00001c  4887              LDR      r0,|L15.572|
00001e  3048              ADDS     r0,r0,#0x48
000020  4285              CMP      r5,r0
000022  d033              BEQ      |L15.140|
000024  4885              LDR      r0,|L15.572|
000026  3060              ADDS     r0,r0,#0x60
000028  4285              CMP      r5,r0
00002a  d02f              BEQ      |L15.140|
00002c  4883              LDR      r0,|L15.572|
00002e  3078              ADDS     r0,r0,#0x78
000030  4285              CMP      r5,r0
000032  d02b              BEQ      |L15.140|
000034  4881              LDR      r0,|L15.572|
000036  3090              ADDS     r0,r0,#0x90
000038  4285              CMP      r5,r0
00003a  d027              BEQ      |L15.140|
00003c  487f              LDR      r0,|L15.572|
00003e  30a8              ADDS     r0,r0,#0xa8
000040  4285              CMP      r5,r0
000042  d023              BEQ      |L15.140|
000044  487e              LDR      r0,|L15.576|
000046  4285              CMP      r5,r0
000048  d020              BEQ      |L15.140|
00004a  487d              LDR      r0,|L15.576|
00004c  3018              ADDS     r0,r0,#0x18
00004e  4285              CMP      r5,r0
000050  d01c              BEQ      |L15.140|
000052  487b              LDR      r0,|L15.576|
000054  3030              ADDS     r0,r0,#0x30
000056  4285              CMP      r5,r0
000058  d018              BEQ      |L15.140|
00005a  4879              LDR      r0,|L15.576|
00005c  3048              ADDS     r0,r0,#0x48
00005e  4285              CMP      r5,r0
000060  d014              BEQ      |L15.140|
000062  4877              LDR      r0,|L15.576|
000064  3060              ADDS     r0,r0,#0x60
000066  4285              CMP      r5,r0
000068  d010              BEQ      |L15.140|
00006a  4875              LDR      r0,|L15.576|
00006c  3078              ADDS     r0,r0,#0x78
00006e  4285              CMP      r5,r0
000070  d00c              BEQ      |L15.140|
000072  4873              LDR      r0,|L15.576|
000074  3090              ADDS     r0,r0,#0x90
000076  4285              CMP      r5,r0
000078  d008              BEQ      |L15.140|
00007a  4871              LDR      r0,|L15.576|
00007c  30a8              ADDS     r0,r0,#0xa8
00007e  4285              CMP      r5,r0
000080  d004              BEQ      |L15.140|
000082  f44f719e          MOV      r1,#0x13c
000086  486f              LDR      r0,|L15.580|
000088  f7fffffe          BL       assert_failed
                  |L15.140|
;;;317      assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
00008c  6820              LDR      r0,[r4,#0]
00008e  b1c8              CBZ      r0,|L15.196|
000090  f1b07f00          CMP      r0,#0x2000000
000094  d016              BEQ      |L15.196|
000096  f1b06f80          CMP      r0,#0x4000000
00009a  d013              BEQ      |L15.196|
00009c  f1b06fc0          CMP      r0,#0x6000000
0000a0  d010              BEQ      |L15.196|
0000a2  f1b06f00          CMP      r0,#0x8000000
0000a6  d00d              BEQ      |L15.196|
0000a8  f1b06f20          CMP      r0,#0xa000000
0000ac  d00a              BEQ      |L15.196|
0000ae  f1b06f40          CMP      r0,#0xc000000
0000b2  d007              BEQ      |L15.196|
0000b4  f1b06f60          CMP      r0,#0xe000000
0000b8  d004              BEQ      |L15.196|
0000ba  f240113d          MOV      r1,#0x13d
0000be  4861              LDR      r0,|L15.580|
0000c0  f7fffffe          BL       assert_failed
                  |L15.196|
;;;318      assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
0000c4  68e0              LDR      r0,[r4,#0xc]
0000c6  b140              CBZ      r0,|L15.218|
0000c8  2840              CMP      r0,#0x40
0000ca  d006              BEQ      |L15.218|
0000cc  2880              CMP      r0,#0x80
0000ce  d004              BEQ      |L15.218|
0000d0  f44f719f          MOV      r1,#0x13e
0000d4  485b              LDR      r0,|L15.580|
0000d6  f7fffffe          BL       assert_failed
                  |L15.218|
;;;319      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
0000da  6920              LDR      r0,[r4,#0x10]
0000dc  f64f71ff          MOV      r1,#0xffff
0000e0  1e40              SUBS     r0,r0,#1
0000e2  4288              CMP      r0,r1
0000e4  d304              BCC      |L15.240|
0000e6  f240113f          MOV      r1,#0x13f
0000ea  4856              LDR      r0,|L15.580|
0000ec  f7fffffe          BL       assert_failed
                  |L15.240|
;;;320      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
0000f0  6960              LDR      r0,[r4,#0x14]
0000f2  f5b07f00          CMP      r0,#0x200
0000f6  d005              BEQ      |L15.260|
0000f8  b120              CBZ      r0,|L15.260|
0000fa  f44f71a0          MOV      r1,#0x140
0000fe  4851              LDR      r0,|L15.580|
000100  f7fffffe          BL       assert_failed
                  |L15.260|
;;;321      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
000104  69a0              LDR      r0,[r4,#0x18]
000106  f5b06f80          CMP      r0,#0x400
00010a  d005              BEQ      |L15.280|
00010c  b120              CBZ      r0,|L15.280|
00010e  f2401141          MOV      r1,#0x141
000112  484c              LDR      r0,|L15.580|
000114  f7fffffe          BL       assert_failed
                  |L15.280|
;;;322      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
000118  69e0              LDR      r0,[r4,#0x1c]
00011a  b150              CBZ      r0,|L15.306|
00011c  f5b06f00          CMP      r0,#0x800
000120  d007              BEQ      |L15.306|
000122  f5b05f80          CMP      r0,#0x1000
000126  d004              BEQ      |L15.306|
000128  f44f71a1          MOV      r1,#0x142
00012c  4845              LDR      r0,|L15.580|
00012e  f7fffffe          BL       assert_failed
                  |L15.306|
;;;323      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
000132  6a20              LDR      r0,[r4,#0x20]
000134  b150              CBZ      r0,|L15.332|
000136  f5b05f00          CMP      r0,#0x2000
00013a  d007              BEQ      |L15.332|
00013c  f5b04f80          CMP      r0,#0x4000
000140  d004              BEQ      |L15.332|
000142  f2401143          MOV      r1,#0x143
000146  483f              LDR      r0,|L15.580|
000148  f7fffffe          BL       assert_failed
                  |L15.332|
;;;324      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
00014c  6a60              LDR      r0,[r4,#0x24]
00014e  b138              CBZ      r0,|L15.352|
000150  f5b07f80          CMP      r0,#0x100
000154  d004              BEQ      |L15.352|
000156  f44f71a2          MOV      r1,#0x144
00015a  483a              LDR      r0,|L15.580|
00015c  f7fffffe          BL       assert_failed
                  |L15.352|
;;;325      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
000160  6aa0              LDR      r0,[r4,#0x28]
000162  b168              CBZ      r0,|L15.384|
000164  f5b03f80          CMP      r0,#0x10000
000168  d00a              BEQ      |L15.384|
00016a  f5b03f00          CMP      r0,#0x20000
00016e  d007              BEQ      |L15.384|
000170  f5b03f40          CMP      r0,#0x30000
000174  d004              BEQ      |L15.384|
000176  f2401145          MOV      r1,#0x145
00017a  4832              LDR      r0,|L15.580|
00017c  f7fffffe          BL       assert_failed
                  |L15.384|
;;;326      assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
000180  6ae0              LDR      r0,[r4,#0x2c]
000182  b130              CBZ      r0,|L15.402|
000184  2804              CMP      r0,#4
000186  d004              BEQ      |L15.402|
000188  f44f71a3          MOV      r1,#0x146
00018c  482d              LDR      r0,|L15.580|
00018e  f7fffffe          BL       assert_failed
                  |L15.402|
;;;327      assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
000192  6b20              LDR      r0,[r4,#0x30]
000194  b150              CBZ      r0,|L15.428|
000196  2801              CMP      r0,#1
000198  d008              BEQ      |L15.428|
00019a  2802              CMP      r0,#2
00019c  d006              BEQ      |L15.428|
00019e  2803              CMP      r0,#3
0001a0  d004              BEQ      |L15.428|
0001a2  f2401147          MOV      r1,#0x147
0001a6  4827              LDR      r0,|L15.580|
0001a8  f7fffffe          BL       assert_failed
                  |L15.428|
;;;328      assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
0001ac  6b60              LDR      r0,[r4,#0x34]
0001ae  b168              CBZ      r0,|L15.460|
0001b0  f5b00f00          CMP      r0,#0x800000
0001b4  d00a              BEQ      |L15.460|
0001b6  f1b07f80          CMP      r0,#0x1000000
0001ba  d007              BEQ      |L15.460|
0001bc  f1b07fc0          CMP      r0,#0x1800000
0001c0  d004              BEQ      |L15.460|
0001c2  f44f71a4          MOV      r1,#0x148
0001c6  481f              LDR      r0,|L15.580|
0001c8  f7fffffe          BL       assert_failed
                  |L15.460|
;;;329      assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
0001cc  6ba0              LDR      r0,[r4,#0x38]
0001ce  b168              CBZ      r0,|L15.492|
0001d0  f5b01f00          CMP      r0,#0x200000
0001d4  d00a              BEQ      |L15.492|
0001d6  f5b00f80          CMP      r0,#0x400000
0001da  d007              BEQ      |L15.492|
0001dc  f5b00fc0          CMP      r0,#0x600000
0001e0  d004              BEQ      |L15.492|
0001e2  f2401149          MOV      r1,#0x149
0001e6  4817              LDR      r0,|L15.580|
0001e8  f7fffffe          BL       assert_failed
                  |L15.492|
;;;330    
;;;331      /*------------------------- DMAy Streamx CR Configuration ------------------*/
;;;332      /* Get the DMAy_Streamx CR value */
;;;333      tmpreg = DMAy_Streamx->CR;
0001ec  6829              LDR      r1,[r5,#0]
;;;334    
;;;335      /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;336      tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
0001ee  4816              LDR      r0,|L15.584|
;;;337                             DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
;;;338                             DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
;;;339                             DMA_SxCR_DIR));
;;;340    
;;;341      /* Configure DMAy Streamx: */
;;;342      /* Set CHSEL bits according to DMA_CHSEL value */
;;;343      /* Set DIR bits according to DMA_DIR value */
;;;344      /* Set PINC bit according to DMA_PeripheralInc value */
;;;345      /* Set MINC bit according to DMA_MemoryInc value */
;;;346      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;347      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;348      /* Set CIRC bit according to DMA_Mode value */
;;;349      /* Set PL bits according to DMA_Priority value */
;;;350      /* Set MBURST bits according to DMA_MemoryBurst value */
;;;351      /* Set PBURST bits according to DMA_PeripheralBurst value */
;;;352      tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
0001f0  68e2              LDR      r2,[r4,#0xc]
0001f2  4001              ANDS     r1,r1,r0              ;336
0001f4  6820              LDR      r0,[r4,#0]
0001f6  4310              ORRS     r0,r0,r2
0001f8  e9d42305          LDRD     r2,r3,[r4,#0x14]
0001fc  431a              ORRS     r2,r2,r3
0001fe  4310              ORRS     r0,r0,r2
000200  69e2              LDR      r2,[r4,#0x1c]
000202  4310              ORRS     r0,r0,r2
000204  6a22              LDR      r2,[r4,#0x20]
000206  4310              ORRS     r0,r0,r2
000208  6a62              LDR      r2,[r4,#0x24]
00020a  4310              ORRS     r0,r0,r2
00020c  6aa2              LDR      r2,[r4,#0x28]
00020e  4310              ORRS     r0,r0,r2
000210  6b62              LDR      r2,[r4,#0x34]
000212  4310              ORRS     r0,r0,r2
000214  6ba2              LDR      r2,[r4,#0x38]
000216  4310              ORRS     r0,r0,r2
000218  4308              ORRS     r0,r0,r1
;;;353                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;354                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;355                DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
;;;356                DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
;;;357    
;;;358      /* Write to DMAy Streamx CR register */
;;;359      DMAy_Streamx->CR = tmpreg;
00021a  6028              STR      r0,[r5,#0]
;;;360    
;;;361      /*------------------------- DMAy Streamx FCR Configuration -----------------*/
;;;362      /* Get the DMAy_Streamx FCR value */
;;;363      tmpreg = DMAy_Streamx->FCR;
00021c  6968              LDR      r0,[r5,#0x14]
;;;364    
;;;365      /* Clear DMDIS and FTH bits */
;;;366      tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
00021e  e9d4120b          LDRD     r1,r2,[r4,#0x2c]
000222  f0200007          BIC      r0,r0,#7
;;;367    
;;;368      /* Configure DMAy Streamx FIFO: 
;;;369        Set DMDIS bits according to DMA_FIFOMode value 
;;;370        Set FTH bits according to DMA_FIFOThreshold value */
;;;371      tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
000226  4311              ORRS     r1,r1,r2
000228  4301              ORRS     r1,r1,r0
;;;372    
;;;373      /* Write to DMAy Streamx CR */
;;;374      DMAy_Streamx->FCR = tmpreg;
00022a  6169              STR      r1,[r5,#0x14]
;;;375    
;;;376      /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
;;;377      /* Write to DMAy Streamx NDTR register */
;;;378      DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
00022c  6920              LDR      r0,[r4,#0x10]
00022e  6068              STR      r0,[r5,#4]
;;;379    
;;;380      /*------------------------- DMAy Streamx PAR Configuration -----------------*/
;;;381      /* Write to DMAy Streamx PAR */
;;;382      DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000230  6860              LDR      r0,[r4,#4]
000232  60a8              STR      r0,[r5,#8]
;;;383    
;;;384      /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
;;;385      /* Write to DMAy Streamx M0AR */
;;;386      DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
000234  68a0              LDR      r0,[r4,#8]
000236  60e8              STR      r0,[r5,#0xc]
;;;387    }
000238  bd70              POP      {r4-r6,pc}
;;;388    
                          ENDP

00023a  0000              DCW      0x0000
                  |L15.572|
                          DCD      0x40026010
                  |L15.576|
                          DCD      0x40026410
                  |L15.580|
                          DCD      ||.conststring||
                  |L15.584|
                          DCD      0xf01c803f

                          AREA ||i.DMA_MemoryTargetConfig||, CODE, READONLY, ALIGN=2

                  DMA_MemoryTargetConfig PROC
;;;789      */
;;;790    void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
000000  b570              PUSH     {r4-r6,lr}
;;;791                               uint32_t DMA_MemoryTarget)
;;;792    {
000002  4604              MOV      r4,r0
;;;793      /* Check the parameters */
;;;794      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  4828              LDR      r0,|L16.168|
000006  4615              MOV      r5,r2                 ;792
000008  460e              MOV      r6,r1                 ;792
00000a  4284              CMP      r4,r0
00000c  d03f              BEQ      |L16.142|
00000e  4826              LDR      r0,|L16.168|
000010  3018              ADDS     r0,r0,#0x18
000012  4284              CMP      r4,r0
000014  d03b              BEQ      |L16.142|
000016  4824              LDR      r0,|L16.168|
000018  3030              ADDS     r0,r0,#0x30
00001a  4284              CMP      r4,r0
00001c  d037              BEQ      |L16.142|
00001e  4822              LDR      r0,|L16.168|
000020  3048              ADDS     r0,r0,#0x48
000022  4284              CMP      r4,r0
000024  d033              BEQ      |L16.142|
000026  4820              LDR      r0,|L16.168|
000028  3060              ADDS     r0,r0,#0x60
00002a  4284              CMP      r4,r0
00002c  d02f              BEQ      |L16.142|
00002e  481e              LDR      r0,|L16.168|
000030  3078              ADDS     r0,r0,#0x78
000032  4284              CMP      r4,r0
000034  d02b              BEQ      |L16.142|
000036  481c              LDR      r0,|L16.168|
000038  3090              ADDS     r0,r0,#0x90
00003a  4284              CMP      r4,r0
00003c  d027              BEQ      |L16.142|
00003e  481a              LDR      r0,|L16.168|
000040  30a8              ADDS     r0,r0,#0xa8
000042  4284              CMP      r4,r0
000044  d023              BEQ      |L16.142|
000046  4819              LDR      r0,|L16.172|
000048  4284              CMP      r4,r0
00004a  d020              BEQ      |L16.142|
00004c  4817              LDR      r0,|L16.172|
00004e  3018              ADDS     r0,r0,#0x18
000050  4284              CMP      r4,r0
000052  d01c              BEQ      |L16.142|
000054  4815              LDR      r0,|L16.172|
000056  3030              ADDS     r0,r0,#0x30
000058  4284              CMP      r4,r0
00005a  d018              BEQ      |L16.142|
00005c  4813              LDR      r0,|L16.172|
00005e  3048              ADDS     r0,r0,#0x48
000060  4284              CMP      r4,r0
000062  d014              BEQ      |L16.142|
000064  4811              LDR      r0,|L16.172|
000066  3060              ADDS     r0,r0,#0x60
000068  4284              CMP      r4,r0
00006a  d010              BEQ      |L16.142|
00006c  480f              LDR      r0,|L16.172|
00006e  3078              ADDS     r0,r0,#0x78
000070  4284              CMP      r4,r0
000072  d00c              BEQ      |L16.142|
000074  480d              LDR      r0,|L16.172|
000076  3090              ADDS     r0,r0,#0x90
000078  4284              CMP      r4,r0
00007a  d008              BEQ      |L16.142|
00007c  480b              LDR      r0,|L16.172|
00007e  30a8              ADDS     r0,r0,#0xa8
000080  4284              CMP      r4,r0
000082  d004              BEQ      |L16.142|
000084  f240311a          MOV      r1,#0x31a
000088  4809              LDR      r0,|L16.176|
00008a  f7fffffe          BL       assert_failed
                  |L16.142|
;;;795      assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
00008e  b14d              CBZ      r5,|L16.164|
000090  f5b52f00          CMP      r5,#0x80000
000094  d004              BEQ      |L16.160|
000096  f240311b          MOV      r1,#0x31b
00009a  4805              LDR      r0,|L16.176|
00009c  f7fffffe          BL       assert_failed
                  |L16.160|
;;;796        
;;;797      /* Check the Memory target to be configured */
;;;798      if (DMA_MemoryTarget != DMA_Memory_0)
;;;799      {
;;;800        /* Write to DMAy Streamx M1AR */
;;;801        DMAy_Streamx->M1AR = MemoryBaseAddr;    
0000a0  6126              STR      r6,[r4,#0x10]
;;;802      }  
;;;803      else
;;;804      {
;;;805        /* Write to DMAy Streamx M0AR */
;;;806        DMAy_Streamx->M0AR = MemoryBaseAddr;  
;;;807      }
;;;808    }
0000a2  bd70              POP      {r4-r6,pc}
                  |L16.164|
0000a4  60e6              STR      r6,[r4,#0xc]          ;806
0000a6  bd70              POP      {r4-r6,pc}
;;;809    
                          ENDP

                  |L16.168|
                          DCD      0x40026010
                  |L16.172|
                          DCD      0x40026410
                  |L16.176|
                          DCD      ||.conststring||

                          AREA ||i.DMA_PeriphIncOffsetSizeConfig||, CODE, READONLY, ALIGN=2

                  DMA_PeriphIncOffsetSizeConfig PROC
;;;505      */
;;;506    void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
000000  b570              PUSH     {r4-r6,lr}
;;;507    {
000002  4604              MOV      r4,r0
;;;508      /* Check the parameters */
;;;509      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  482a              LDR      r0,|L17.176|
000006  460d              MOV      r5,r1                 ;507
000008  4284              CMP      r4,r0
00000a  d03f              BEQ      |L17.140|
00000c  4828              LDR      r0,|L17.176|
00000e  3018              ADDS     r0,r0,#0x18
000010  4284              CMP      r4,r0
000012  d03b              BEQ      |L17.140|
000014  4826              LDR      r0,|L17.176|
000016  3030              ADDS     r0,r0,#0x30
000018  4284              CMP      r4,r0
00001a  d037              BEQ      |L17.140|
00001c  4824              LDR      r0,|L17.176|
00001e  3048              ADDS     r0,r0,#0x48
000020  4284              CMP      r4,r0
000022  d033              BEQ      |L17.140|
000024  4822              LDR      r0,|L17.176|
000026  3060              ADDS     r0,r0,#0x60
000028  4284              CMP      r4,r0
00002a  d02f              BEQ      |L17.140|
00002c  4820              LDR      r0,|L17.176|
00002e  3078              ADDS     r0,r0,#0x78
000030  4284              CMP      r4,r0
000032  d02b              BEQ      |L17.140|
000034  481e              LDR      r0,|L17.176|
000036  3090              ADDS     r0,r0,#0x90
000038  4284              CMP      r4,r0
00003a  d027              BEQ      |L17.140|
00003c  481c              LDR      r0,|L17.176|
00003e  30a8              ADDS     r0,r0,#0xa8
000040  4284              CMP      r4,r0
000042  d023              BEQ      |L17.140|
000044  481b              LDR      r0,|L17.180|
000046  4284              CMP      r4,r0
000048  d020              BEQ      |L17.140|
00004a  481a              LDR      r0,|L17.180|
00004c  3018              ADDS     r0,r0,#0x18
00004e  4284              CMP      r4,r0
000050  d01c              BEQ      |L17.140|
000052  4818              LDR      r0,|L17.180|
000054  3030              ADDS     r0,r0,#0x30
000056  4284              CMP      r4,r0
000058  d018              BEQ      |L17.140|
00005a  4816              LDR      r0,|L17.180|
00005c  3048              ADDS     r0,r0,#0x48
00005e  4284              CMP      r4,r0
000060  d014              BEQ      |L17.140|
000062  4814              LDR      r0,|L17.180|
000064  3060              ADDS     r0,r0,#0x60
000066  4284              CMP      r4,r0
000068  d010              BEQ      |L17.140|
00006a  4812              LDR      r0,|L17.180|
00006c  3078              ADDS     r0,r0,#0x78
00006e  4284              CMP      r4,r0
000070  d00c              BEQ      |L17.140|
000072  4810              LDR      r0,|L17.180|
000074  3090              ADDS     r0,r0,#0x90
000076  4284              CMP      r4,r0
000078  d008              BEQ      |L17.140|
00007a  480e              LDR      r0,|L17.180|
00007c  30a8              ADDS     r0,r0,#0xa8
00007e  4284              CMP      r4,r0
000080  d004              BEQ      |L17.140|
000082  f24011fd          MOV      r1,#0x1fd
000086  480c              LDR      r0,|L17.184|
000088  f7fffffe          BL       assert_failed
                  |L17.140|
;;;510      assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
00008c  b15d              CBZ      r5,|L17.166|
00008e  f5b54f00          CMP      r5,#0x8000
000092  d004              BEQ      |L17.158|
000094  f44f71ff          MOV      r1,#0x1fe
000098  4807              LDR      r0,|L17.184|
00009a  f7fffffe          BL       assert_failed
                  |L17.158|
;;;511    
;;;512      /* Check the needed Peripheral increment offset */
;;;513      if(DMA_Pincos != DMA_PINCOS_Psize)
;;;514      {
;;;515        /* Configure DMA_SxCR_PINCOS bit with the input parameter */
;;;516        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
00009e  6820              LDR      r0,[r4,#0]
0000a0  f4404000          ORR      r0,r0,#0x8000
0000a4  e002              B        |L17.172|
                  |L17.166|
;;;517      }
;;;518      else
;;;519      {
;;;520        /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
;;;521        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
0000a6  6820              LDR      r0,[r4,#0]
0000a8  f4204000          BIC      r0,r0,#0x8000
                  |L17.172|
0000ac  6020              STR      r0,[r4,#0]            ;516
;;;522      }
;;;523    }
0000ae  bd70              POP      {r4-r6,pc}
;;;524    
                          ENDP

                  |L17.176|
                          DCD      0x40026010
                  |L17.180|
                          DCD      0x40026410
                  |L17.184|
                          DCD      ||.conststring||

                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=2

                  DMA_SetCurrDataCounter PROC
;;;625      */
;;;626    void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
000000  b570              PUSH     {r4-r6,lr}
;;;627    {
000002  4604              MOV      r4,r0
;;;628      /* Check the parameters */
;;;629      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
000004  4822              LDR      r0,|L18.144|
000006  460d              MOV      r5,r1                 ;627
000008  4284              CMP      r4,r0
00000a  d03f              BEQ      |L18.140|
00000c  4820              LDR      r0,|L18.144|
00000e  3018              ADDS     r0,r0,#0x18
000010  4284              CMP      r4,r0
000012  d03b              BEQ      |L18.140|
000014  481e              LDR      r0,|L18.144|
000016  3030              ADDS     r0,r0,#0x30
000018  4284              CMP      r4,r0
00001a  d037              BEQ      |L18.140|
00001c  481c              LDR      r0,|L18.144|
00001e  3048              ADDS     r0,r0,#0x48
000020  4284              CMP      r4,r0
000022  d033              BEQ      |L18.140|
000024  481a              LDR      r0,|L18.144|
000026  3060              ADDS     r0,r0,#0x60
000028  4284              CMP      r4,r0
00002a  d02f              BEQ      |L18.140|
00002c  4818              LDR      r0,|L18.144|
00002e  3078              ADDS     r0,r0,#0x78
000030  4284              CMP      r4,r0
000032  d02b              BEQ      |L18.140|
000034  4816              LDR      r0,|L18.144|
000036  3090              ADDS     r0,r0,#0x90
000038  4284              CMP      r4,r0
00003a  d027              BEQ      |L18.140|
00003c  4814              LDR      r0,|L18.144|
00003e  30a8              ADDS     r0,r0,#0xa8
000040  4284              CMP      r4,r0
000042  d023              BEQ      |L18.140|
000044  4813              LDR      r0,|L18.148|
000046  4284              CMP      r4,r0
000048  d020              BEQ      |L18.140|
00004a  4812              LDR      r0,|L18.148|
00004c  3018              ADDS     r0,r0,#0x18
00004e  4284              CMP      r4,r0
000050  d01c              BEQ      |L18.140|
000052  4810              LDR      r0,|L18.148|
000054  3030              ADDS     r0,r0,#0x30
000056  4284              CMP      r4,r0
000058  d018              BEQ      |L18.140|
00005a  480e              LDR      r0,|L18.148|
00005c  3048              ADDS     r0,r0,#0x48
00005e  4284              CMP      r4,r0
000060  d014              BEQ      |L18.140|
000062  480c              LDR      r0,|L18.148|
000064  3060              ADDS     r0,r0,#0x60
000066  4284              CMP      r4,r0
000068  d010              BEQ      |L18.140|
00006a  480a              LDR      r0,|L18.148|
00006c  3078              ADDS     r0,r0,#0x78
00006e  4284              CMP      r4,r0
000070  d00c              BEQ      |L18.140|
000072  4808              LDR      r0,|L18.148|
000074  3090              ADDS     r0,r0,#0x90
000076  4284              CMP      r4,r0
000078  d008              BEQ      |L18.140|
00007a  4806              LDR      r0,|L18.148|
00007c  30a8              ADDS     r0,r0,#0xa8
00007e  4284              CMP      r4,r0
000080  d004              BEQ      |L18.140|
000082  f2402175          MOV      r1,#0x275
000086  4804              LDR      r0,|L18.152|
000088  f7fffffe          BL       assert_failed
                  |L18.140|
;;;630    
;;;631      /* Write the number of data units to be transferred */
;;;632      DMAy_Streamx->NDTR = (uint16_t)Counter;
00008c  6065              STR      r5,[r4,#4]
;;;633    }
00008e  bd70              POP      {r4-r6,pc}
;;;634    
                          ENDP

                  |L18.144|
                          DCD      0x40026010
                  |L18.148|
                          DCD      0x40026410
                  |L18.152|
                          DCD      ||.conststring||

                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;394      */
;;;395    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;396    {
;;;397      /*-------------- Reset DMA init structure parameters values ----------------*/
;;;398      /* Initialize the DMA_Channel member */
;;;399      DMA_InitStruct->DMA_Channel = 0;
;;;400    
;;;401      /* Initialize the DMA_PeripheralBaseAddr member */
;;;402      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;403    
;;;404      /* Initialize the DMA_Memory0BaseAddr member */
;;;405      DMA_InitStruct->DMA_Memory0BaseAddr = 0;
000004  6041              STR      r1,[r0,#4]
;;;406    
;;;407      /* Initialize the DMA_DIR member */
;;;408      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
000006  6081              STR      r1,[r0,#8]
;;;409    
;;;410      /* Initialize the DMA_BufferSize member */
;;;411      DMA_InitStruct->DMA_BufferSize = 0;
000008  60c1              STR      r1,[r0,#0xc]
;;;412    
;;;413      /* Initialize the DMA_PeripheralInc member */
;;;414      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;415    
;;;416      /* Initialize the DMA_MemoryInc member */
;;;417      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000c  6141              STR      r1,[r0,#0x14]
;;;418    
;;;419      /* Initialize the DMA_PeripheralDataSize member */
;;;420      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;421    
;;;422      /* Initialize the DMA_MemoryDataSize member */
;;;423      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000010  61c1              STR      r1,[r0,#0x1c]
;;;424    
;;;425      /* Initialize the DMA_Mode member */
;;;426      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000012  6201              STR      r1,[r0,#0x20]
;;;427    
;;;428      /* Initialize the DMA_Priority member */
;;;429      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000014  6241              STR      r1,[r0,#0x24]
;;;430    
;;;431      /* Initialize the DMA_FIFOMode member */
;;;432      DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
000016  6281              STR      r1,[r0,#0x28]
;;;433    
;;;434      /* Initialize the DMA_FIFOThreshold member */
;;;435      DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
000018  62c1              STR      r1,[r0,#0x2c]
;;;436    
;;;437      /* Initialize the DMA_MemoryBurst member */
;;;438      DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
00001a  6301              STR      r1,[r0,#0x30]
;;;439    
;;;440      /* Initialize the DMA_PeripheralBurst member */
;;;441      DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
00001c  6341              STR      r1,[r0,#0x34]
00001e  6381              STR      r1,[r0,#0x38]
;;;442    }
000020  4770              BX       lr
;;;443    
                          ENDP


                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2e2e5c4f          DCB      "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_"
000004  535c6273
000008  705c7374
00000c  6d333266
000010  3430785c
000014  4c696272
000018  61726965
00001c  735c5354
000020  4d333246
000024  3478785f
000028  53746450
00002c  65726970
000030  685f    
000032  44726976          DCB      "Driver\\src\\stm32f4xx_dma.c",0
000036  65725c73
00003a  72635c73
00003e  746d3332
000042  66347878
000046  5f646d61
00004a  2e6300  

;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_dma.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_dma_c_e9b554c0____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f4xx_dma_c_e9b554c0____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_dma_c_e9b554c0____REVSH|
#line 128
|__asm___15_stm32f4xx_dma_c_e9b554c0____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
