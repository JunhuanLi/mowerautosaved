; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\scheduler.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\scheduler.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\scheduler.crf ..\OS\src\scheduler.c]
                          THUMB

                          AREA ||i._rt_scheduler_stack_check||, CODE, READONLY, ALIGN=2

                  _rt_scheduler_stack_check PROC
;;;87     #ifdef RT_USING_OVERFLOW_CHECK
;;;88     static void _rt_scheduler_stack_check(struct rt_thread *thread)
000000  b538              PUSH     {r3-r5,lr}
;;;89     {
000002  0004              MOVS     r4,r0
000004  d10b              BNE      |L1.30|
;;;90         RT_ASSERT(thread != RT_NULL);
000006  f88d0000          STRB     r0,[sp,#0]
00000a  235a              MOVS     r3,#0x5a
00000c  4a12              LDR      r2,|L1.88|
00000e  a113              ADR      r1,|L1.92|
000010  a017              ADR      r0,|L1.112|
000012  f7fffffe          BL       rt_kprintf
                  |L1.22|
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  2800              CMP      r0,#0
00001c  d0fb              BEQ      |L1.22|
                  |L1.30|
;;;91     
;;;92         if ((rt_uint32_t)thread->sp <= (rt_uint32_t)thread->stack_addr ||
00001e  69e1              LDR      r1,[r4,#0x1c]
000020  6aa0              LDR      r0,[r4,#0x28]
000022  4281              CMP      r1,r0
000024  d903              BLS      |L1.46|
;;;93             (rt_uint32_t)thread->sp >
000026  8da2              LDRH     r2,[r4,#0x2c]
000028  4402              ADD      r2,r2,r0
00002a  428a              CMP      r2,r1
00002c  d20a              BCS      |L1.68|
                  |L1.46|
;;;94             (rt_uint32_t)thread->stack_addr + (rt_uint32_t)thread->stack_size)
;;;95         {
;;;96             rt_uint32_t level;
;;;97     
;;;98             rt_kprintf("thread:%s stack overflow\n", thread->name);
00002e  4621              MOV      r1,r4
000030  a017              ADR      r0,|L1.144|
000032  f7fffffe          BL       rt_kprintf
;;;99             #ifdef RT_USING_FINSH
;;;100            {
;;;101                extern long list_thread(void);
;;;102                list_thread();
000036  f7fffffe          BL       list_thread
;;;103            }
;;;104            #endif
;;;105            level = rt_hw_interrupt_disable();
00003a  f7fffffe          BL       rt_hw_interrupt_disable
                  |L1.62|
;;;106            while (level);
00003e  2800              CMP      r0,#0
000040  d1fd              BNE      |L1.62|
                  |L1.66|
;;;107        }
;;;108        else if ((rt_uint32_t)thread->sp <= ((rt_uint32_t)thread->stack_addr + 32))
;;;109        {
;;;110            rt_kprintf("warning: %s stack is close to end of stack address.\n",
;;;111                       thread->name);
;;;112        }
;;;113    }
000042  bd38              POP      {r3-r5,pc}
                  |L1.68|
000044  3020              ADDS     r0,r0,#0x20
000046  4281              CMP      r1,r0                 ;108
000048  d8fb              BHI      |L1.66|
00004a  4621              MOV      r1,r4                 ;110
00004c  e8bd4038          POP      {r3-r5,lr}            ;110
000050  a016              ADR      r0,|L1.172|
000052  f7ffbffe          B.W      rt_kprintf
;;;114    #endif
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      ||.constdata||
                  |L1.92|
00005c  74687265          DCB      "thread != RT_NULL",0
000060  61642021
000064  3d205254
000068  5f4e554c
00006c  4c00    
00006e  00                DCB      0
00006f  00                DCB      0
                  |L1.112|
000070  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000074  20617373
000078  65727420
00007c  6661696c
000080  65642061
000084  74202573
000088  3a256420
00008c  0a00    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L1.144|
000090  74687265          DCB      "thread:%s stack overflow\n",0
000094  61643a25
000098  73207374
00009c  61636b20
0000a0  6f766572
0000a4  666c6f77
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L1.172|
0000ac  7761726e          DCB      "warning: %s stack is close to end of stack address.\n",0
0000b0  696e673a
0000b4  20257320
0000b8  73746163
0000bc  6b206973
0000c0  20636c6f
0000c4  73652074
0000c8  6f20656e
0000cc  64206f66
0000d0  20737461
0000d4  636b2061
0000d8  64647265
0000dc  73732e0a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0

                          AREA ||i.rt_critical_level||, CODE, READONLY, ALIGN=2

                  rt_critical_level PROC
;;;406     */
;;;407    rt_uint16_t rt_critical_level(void)
000000  4801              LDR      r0,|L2.8|
;;;408    {
;;;409        return rt_scheduler_lock_nest;
000002  8840              LDRH     r0,[r0,#2]  ; rt_scheduler_lock_nest
000004  b280              UXTH     r0,r0
;;;410    }
000006  4770              BX       lr
;;;411    /*@}*/
                          ENDP

                  |L2.8|
                          DCD      ||.data||

                          AREA ||i.rt_enter_critical||, CODE, READONLY, ALIGN=2

                  rt_enter_critical PROC
;;;357     */
;;;358    void rt_enter_critical(void)
000000  b510              PUSH     {r4,lr}
;;;359    {
;;;360        register rt_base_t level;
;;;361    
;;;362        /* disable interrupt */
;;;363        level = rt_hw_interrupt_disable();
000002  f7fffffe          BL       rt_hw_interrupt_disable
;;;364    
;;;365        /*
;;;366         * the maximal number of nest is RT_UINT16_MAX, which is big
;;;367         * enough and does not check here
;;;368         */
;;;369        rt_scheduler_lock_nest ++;
000006  4a04              LDR      r2,|L3.24|
000008  8851              LDRH     r1,[r2,#2]  ; rt_scheduler_lock_nest
00000a  1c49              ADDS     r1,r1,#1
00000c  8051              STRH     r1,[r2,#2]
;;;370    
;;;371        /* enable interrupt */
;;;372        rt_hw_interrupt_enable(level);
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      rt_hw_interrupt_enable
;;;373    }
;;;374    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      ||.data||

                          AREA ||i.rt_exit_critical||, CODE, READONLY, ALIGN=2

                  rt_exit_critical PROC
;;;377     */
;;;378    void rt_exit_critical(void)
000000  b510              PUSH     {r4,lr}
;;;379    {
;;;380        register rt_base_t level;
;;;381    
;;;382        /* disable interrupt */
;;;383        level = rt_hw_interrupt_disable();
000002  f7fffffe          BL       rt_hw_interrupt_disable
;;;384    
;;;385        rt_scheduler_lock_nest --;
000006  4a09              LDR      r2,|L4.44|
000008  8851              LDRH     r1,[r2,#2]  ; rt_scheduler_lock_nest
00000a  1e49              SUBS     r1,r1,#1
00000c  b209              SXTH     r1,r1
00000e  8051              STRH     r1,[r2,#2]
;;;386    
;;;387        if (rt_scheduler_lock_nest <= 0)
000010  2900              CMP      r1,#0
000012  dc07              BGT      |L4.36|
;;;388        {
;;;389            rt_scheduler_lock_nest = 0;
000014  2100              MOVS     r1,#0
000016  8051              STRH     r1,[r2,#2]
;;;390            /* enable interrupt */
;;;391            rt_hw_interrupt_enable(level);
000018  f7fffffe          BL       rt_hw_interrupt_enable
;;;392    
;;;393            rt_schedule();
00001c  e8bd4010          POP      {r4,lr}
000020  f7ffbffe          B.W      rt_schedule
                  |L4.36|
;;;394        }
;;;395        else
;;;396        {
;;;397            /* enable interrupt */
;;;398            rt_hw_interrupt_enable(level);
000024  e8bd4010          POP      {r4,lr}
000028  f7ffbffe          B.W      rt_hw_interrupt_enable
;;;399        }
;;;400    }
;;;401    
                          ENDP

                  |L4.44|
                          DCD      ||.data||

                          AREA ||i.rt_schedule||, CODE, READONLY, ALIGN=2

                  rt_schedule PROC
;;;190     */
;;;191    void rt_schedule(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;192    {
;;;193        rt_base_t level;
;;;194        struct rt_thread *to_thread;
;;;195        struct rt_thread *from_thread;
;;;196    
;;;197        /* disable interrupt */
;;;198        level = rt_hw_interrupt_disable();
000004  f7fffffe          BL       rt_hw_interrupt_disable
;;;199    
;;;200        /* check the scheduler is enabled or not */
;;;201        if (rt_scheduler_lock_nest == 0)
000008  4e15              LDR      r6,|L5.96|
00000a  4607              MOV      r7,r0                 ;198
00000c  8870              LDRH     r0,[r6,#2]  ; rt_scheduler_lock_nest
00000e  b9f0              CBNZ     r0,|L5.78|
;;;202        {
;;;203            register rt_ubase_t highest_ready_priority;
;;;204    
;;;205    #if RT_THREAD_PRIORITY_MAX <= 32
;;;206            highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
000010  68b0              LDR      r0,[r6,#8]  ; rt_thread_ready_priority_group
000012  f7fffffe          BL       __rt_ffs
;;;207    #else
;;;208            register rt_ubase_t number;
;;;209    
;;;210            number = __rt_ffs(rt_thread_ready_priority_group) - 1;
;;;211            highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
;;;212    #endif
;;;213    
;;;214            /* get switch to thread */
;;;215            to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
000016  4913              LDR      r1,|L5.100|
000018  1e40              SUBS     r0,r0,#1
;;;216                                      struct rt_thread,
;;;217                                      tlist);
;;;218    
;;;219            /* if the destination thread is not the same as current thread */
;;;220            if (to_thread != rt_current_thread)
00001a  6875              LDR      r5,[r6,#4]  ; rt_current_thread
00001c  f8514030          LDR      r4,[r1,r0,LSL #3]     ;215
000020  3c14              SUBS     r4,r4,#0x14
000022  42ac              CMP      r4,r5
000024  d013              BEQ      |L5.78|
;;;221            {
;;;222                rt_current_priority = (rt_uint8_t)highest_ready_priority;
000026  7030              STRB     r0,[r6,#0]
;;;223                from_thread         = rt_current_thread;
;;;224                rt_current_thread   = to_thread;
;;;225    
;;;226                RT_OBJECT_HOOK_CALL(rt_scheduler_hook, (from_thread, to_thread));
000028  6074              STR      r4,[r6,#4]  ; rt_current_thread
00002a  68f2              LDR      r2,[r6,#0xc]  ; rt_scheduler_hook
00002c  b112              CBZ      r2,|L5.52|
00002e  4621              MOV      r1,r4
000030  4628              MOV      r0,r5
000032  4790              BLX      r2
                  |L5.52|
;;;227    
;;;228                /* switch to new thread */
;;;229                RT_DEBUG_LOG(RT_DEBUG_SCHEDULER,
;;;230                             ("[%d]switch to priority#%d "
;;;231                              "thread:%.*s(sp:0x%p), "
;;;232                              "from thread:%.*s(sp: 0x%p)\n",
;;;233                              rt_interrupt_nest, highest_ready_priority,
;;;234                              RT_NAME_MAX, to_thread->name, to_thread->sp,
;;;235                              RT_NAME_MAX, from_thread->name, from_thread->sp));
;;;236    
;;;237    #ifdef RT_USING_OVERFLOW_CHECK
;;;238                _rt_scheduler_stack_check(to_thread);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _rt_scheduler_stack_check
;;;239    #endif
;;;240    
;;;241                if (rt_interrupt_nest == 0)
00003a  480b              LDR      r0,|L5.104|
00003c  7800              LDRB     r0,[r0,#0]  ; rt_interrupt_nest
;;;242                {
;;;243                    rt_hw_context_switch((rt_uint32_t)&from_thread->sp,
;;;244                                         (rt_uint32_t)&to_thread->sp);
;;;245                }
;;;246                else
;;;247                {
;;;248                    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("switch in interrupt\n"));
;;;249    
;;;250                    rt_hw_context_switch_interrupt((rt_uint32_t)&from_thread->sp,
00003e  f104011c          ADD      r1,r4,#0x1c
000042  2800              CMP      r0,#0                 ;241
000044  f105001c          ADD      r0,r5,#0x1c
000048  d006              BEQ      |L5.88|
00004a  f7fffffe          BL       rt_hw_context_switch_interrupt
                  |L5.78|
;;;251                                                   (rt_uint32_t)&to_thread->sp);
;;;252                }
;;;253            }
;;;254        }
;;;255    
;;;256        /* enable interrupt */
;;;257        rt_hw_interrupt_enable(level);
00004e  4638              MOV      r0,r7
000050  e8bd41f0          POP      {r4-r8,lr}
000054  f7ffbffe          B.W      rt_hw_interrupt_enable
                  |L5.88|
000058  f7fffffe          BL       rt_hw_context_switch
00005c  e7f7              B        |L5.78|
;;;258    }
;;;259    
                          ENDP

00005e  0000              DCW      0x0000
                  |L5.96|
                          DCD      ||.data||
                  |L5.100|
                          DCD      ||.bss||
                  |L5.104|
                          DCD      rt_interrupt_nest

                          AREA ||i.rt_schedule_insert_thread||, CODE, READONLY, ALIGN=2

                  rt_schedule_insert_thread PROC
;;;266     */
;;;267    void rt_schedule_insert_thread(struct rt_thread *thread)
000000  b538              PUSH     {r3-r5,lr}
;;;268    {
000002  0004              MOVS     r4,r0
000004  d10c              BNE      |L6.32|
;;;269        register rt_base_t temp;
;;;270    
;;;271        RT_ASSERT(thread != RT_NULL);
000006  f88d0000          STRB     r0,[sp,#0]
00000a  f240130f          MOV      r3,#0x10f
00000e  4a13              LDR      r2,|L6.92|
000010  a113              ADR      r1,|L6.96|
000012  a018              ADR      r0,|L6.116|
000014  f7fffffe          BL       rt_kprintf
                  |L6.24|
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  2800              CMP      r0,#0
00001e  d0fb              BEQ      |L6.24|
                  |L6.32|
;;;272    
;;;273        /* disable interrupt */
;;;274        temp = rt_hw_interrupt_disable();
000020  f7fffffe          BL       rt_hw_interrupt_disable
000024  4602              MOV      r2,r0
;;;275    
;;;276        /* change stat */
;;;277        thread->stat = RT_THREAD_READY;
000026  2001              MOVS     r0,#1
000028  f8840034          STRB     r0,[r4,#0x34]
;;;278    
;;;279        /* insert thread to ready list */
;;;280        rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
00002c  f8940035          LDRB     r0,[r4,#0x35]
000030  4918              LDR      r1,|L6.148|
000032  eb0101c0          ADD      r1,r1,r0,LSL #3
000036  f1040014          ADD      r0,r4,#0x14
00003a  684b              LDR      r3,[r1,#4]
00003c  6018              STR      r0,[r3,#0]
00003e  684b              LDR      r3,[r1,#4]
000040  61a3              STR      r3,[r4,#0x18]
000042  6048              STR      r0,[r1,#4]
;;;281                              &(thread->tlist));
;;;282    
;;;283        /* set priority mask */
;;;284    #if RT_THREAD_PRIORITY_MAX <= 32
;;;285        RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("insert thread[%.*s], the priority: %d\n",
;;;286                                          RT_NAME_MAX, thread->name, thread->current_priority));
;;;287    #else
;;;288        RT_DEBUG_LOG(RT_DEBUG_SCHEDULER,
;;;289                     ("insert thread[%.*s], the priority: %d 0x%x %d\n",
;;;290                      RT_NAME_MAX,
;;;291                      thread->name,
;;;292                      thread->number,
;;;293                      thread->number_mask,
;;;294                      thread->high_mask));
;;;295    #endif
;;;296    
;;;297    #if RT_THREAD_PRIORITY_MAX > 32
;;;298        rt_thread_ready_table[thread->number] |= thread->high_mask;
;;;299    #endif
;;;300        rt_thread_ready_priority_group |= thread->number_mask;
000044  6161              STR      r1,[r4,#0x14]
000046  4914              LDR      r1,|L6.152|
000048  6ba0              LDR      r0,[r4,#0x38]
00004a  688b              LDR      r3,[r1,#8]  ; rt_thread_ready_priority_group
00004c  4318              ORRS     r0,r0,r3
;;;301    
;;;302        /* enable interrupt */
;;;303        rt_hw_interrupt_enable(temp);
00004e  6088              STR      r0,[r1,#8]  ; rt_thread_ready_priority_group
000050  e8bd4038          POP      {r3-r5,lr}
000054  4610              MOV      r0,r2
000056  f7ffbffe          B.W      rt_hw_interrupt_enable
;;;304    }
;;;305    
                          ENDP

00005a  0000              DCW      0x0000
                  |L6.92|
                          DCD      ||.constdata||+0x1a
                  |L6.96|
000060  74687265          DCB      "thread != RT_NULL",0
000064  61642021
000068  3d205254
00006c  5f4e554c
000070  4c00    
000072  00                DCB      0
000073  00                DCB      0
                  |L6.116|
000074  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000078  20617373
00007c  65727420
000080  6661696c
000084  65642061
000088  74202573
00008c  3a256420
000090  0a00    
000092  00                DCB      0
000093  00                DCB      0
                  |L6.148|
                          DCD      ||.bss||
                  |L6.152|
                          DCD      ||.data||

                          AREA ||i.rt_schedule_remove_thread||, CODE, READONLY, ALIGN=2

                  rt_schedule_remove_thread PROC
;;;312     */
;;;313    void rt_schedule_remove_thread(struct rt_thread *thread)
000000  b538              PUSH     {r3-r5,lr}
;;;314    {
000002  0005              MOVS     r5,r0
000004  d10c              BNE      |L7.32|
;;;315        register rt_base_t temp;
;;;316    
;;;317        RT_ASSERT(thread != RT_NULL);
000006  f88d0000          STRB     r0,[sp,#0]
00000a  f240133d          MOV      r3,#0x13d
00000e  4a14              LDR      r2,|L7.96|
000010  a114              ADR      r1,|L7.100|
000012  a019              ADR      r0,|L7.120|
000014  f7fffffe          BL       rt_kprintf
                  |L7.24|
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  2800              CMP      r0,#0
00001e  d0fb              BEQ      |L7.24|
                  |L7.32|
;;;318    
;;;319        /* disable interrupt */
;;;320        temp = rt_hw_interrupt_disable();
000020  f7fffffe          BL       rt_hw_interrupt_disable
;;;321    
;;;322    #if RT_THREAD_PRIORITY_MAX <= 32
;;;323        RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("remove thread[%.*s], the priority: %d\n",
;;;324                                          RT_NAME_MAX, thread->name,
;;;325                                          thread->current_priority));
;;;326    #else
;;;327        RT_DEBUG_LOG(RT_DEBUG_SCHEDULER,
;;;328                     ("remove thread[%.*s], the priority: %d 0x%x %d\n",
;;;329                      RT_NAME_MAX,
;;;330                      thread->name,
;;;331                      thread->number,
;;;332                      thread->number_mask,
;;;333                      thread->high_mask));
;;;334    #endif
;;;335    
;;;336        /* remove thread from ready list */
;;;337        rt_list_remove(&(thread->tlist));
000024  f1050414          ADD      r4,r5,#0x14
000028  4601              MOV      r1,r0                 ;320
00002a  e9d40200          LDRD     r0,r2,[r4,#0]
00002e  6042              STR      r2,[r0,#4]
000030  e9d40200          LDRD     r0,r2,[r4,#0]
000034  6010              STR      r0,[r2,#0]
000036  61ac              STR      r4,[r5,#0x18]
;;;338        if (rt_list_isempty(&(rt_thread_priority_table[thread->current_priority])))
000038  616c              STR      r4,[r5,#0x14]
00003a  f8950035          LDRB     r0,[r5,#0x35]
00003e  4a16              LDR      r2,|L7.152|
000040  eb0200c0          ADD      r0,r2,r0,LSL #3
000044  6802              LDR      r2,[r0,#0]
000046  4282              CMP      r2,r0
000048  d104              BNE      |L7.84|
;;;339        {
;;;340    #if RT_THREAD_PRIORITY_MAX > 32
;;;341            rt_thread_ready_table[thread->number] &= ~thread->high_mask;
;;;342            if (rt_thread_ready_table[thread->number] == 0)
;;;343            {
;;;344                rt_thread_ready_priority_group &= ~thread->number_mask;
;;;345            }
;;;346    #else
;;;347            rt_thread_ready_priority_group &= ~thread->number_mask;
00004a  4814              LDR      r0,|L7.156|
00004c  6bab              LDR      r3,[r5,#0x38]
00004e  6882              LDR      r2,[r0,#8]  ; rt_thread_ready_priority_group
000050  439a              BICS     r2,r2,r3
000052  6082              STR      r2,[r0,#8]  ; rt_thread_ready_priority_group
                  |L7.84|
;;;348    #endif
;;;349        }
;;;350    
;;;351        /* enable interrupt */
;;;352        rt_hw_interrupt_enable(temp);
000054  e8bd4038          POP      {r3-r5,lr}
000058  4608              MOV      r0,r1
00005a  f7ffbffe          B.W      rt_hw_interrupt_enable
;;;353    }
;;;354    
                          ENDP

00005e  0000              DCW      0x0000
                  |L7.96|
                          DCD      ||.constdata||+0x34
                  |L7.100|
000064  74687265          DCB      "thread != RT_NULL",0
000068  61642021
00006c  3d205254
000070  5f4e554c
000074  4c00    
000076  00                DCB      0
000077  00                DCB      0
                  |L7.120|
000078  28257329          DCB      "(%s) assert failed at %s:%d \n",0
00007c  20617373
000080  65727420
000084  6661696c
000088  65642061
00008c  74202573
000090  3a256420
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0
                  |L7.152|
                          DCD      ||.bss||
                  |L7.156|
                          DCD      ||.data||

                          AREA ||i.rt_scheduler_sethook||, CODE, READONLY, ALIGN=2

                  rt_scheduler_sethook PROC
;;;78     void
;;;79     rt_scheduler_sethook(void (*hook)(struct rt_thread *from, struct rt_thread *to))
000000  4901              LDR      r1,|L8.8|
;;;80     {
;;;81         rt_scheduler_hook = hook;
000002  60c8              STR      r0,[r1,#0xc]  ; rt_scheduler_hook
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      ||.data||

                          AREA ||i.rt_system_scheduler_init||, CODE, READONLY, ALIGN=2

                  rt_system_scheduler_init PROC
;;;119     */
;;;120    void rt_system_scheduler_init(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122        register rt_base_t offset;
;;;123    
;;;124        rt_scheduler_lock_nest = 0;
000002  4a0a              LDR      r2,|L9.44|
000004  2300              MOVS     r3,#0
;;;125    
;;;126        RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("start scheduler: max priority 0x%02x\n",
;;;127                                          RT_THREAD_PRIORITY_MAX));
;;;128    
;;;129        for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
;;;130        {
;;;131            rt_list_init(&rt_thread_priority_table[offset]);
000006  4c0a              LDR      r4,|L9.48|
000008  8053              STRH     r3,[r2,#2]            ;124
00000a  4618              MOV      r0,r3                 ;129
                  |L9.12|
00000c  eb0401c0          ADD      r1,r4,r0,LSL #3
000010  1c40              ADDS     r0,r0,#1
000012  6049              STR      r1,[r1,#4]
000014  6009              STR      r1,[r1,#0]
000016  2820              CMP      r0,#0x20              ;129
000018  dbf8              BLT      |L9.12|
;;;132        }
;;;133    
;;;134        rt_current_priority = RT_THREAD_PRIORITY_MAX - 1;
00001a  201f              MOVS     r0,#0x1f
00001c  7010              STRB     r0,[r2,#0]
;;;135        rt_current_thread = RT_NULL;
;;;136    
;;;137        /* initialize ready priority group */
;;;138        rt_thread_ready_priority_group = 0;
;;;139    
;;;140    #if RT_THREAD_PRIORITY_MAX > 32
;;;141        /* initialize ready table */
;;;142        rt_memset(rt_thread_ready_table, 0, sizeof(rt_thread_ready_table));
;;;143    #endif
;;;144    
;;;145        /* initialize thread defunct */
;;;146        rt_list_init(&rt_thread_defunct);
00001e  4803              LDR      r0,|L9.44|
000020  6053              STR      r3,[r2,#4]            ;138  ; rt_current_thread
000022  3010              ADDS     r0,r0,#0x10
000024  6093              STR      r3,[r2,#8]  ; rt_thread_ready_priority_group
000026  6040              STR      r0,[r0,#4]
000028  6000              STR      r0,[r0,#0]
;;;147    }
00002a  bd10              POP      {r4,pc}
;;;148    
                          ENDP

                  |L9.44|
                          DCD      ||.data||
                  |L9.48|
                          DCD      ||.bss||

                          AREA ||i.rt_system_scheduler_start||, CODE, READONLY, ALIGN=2

                  rt_system_scheduler_start PROC
;;;153     */
;;;154    void rt_system_scheduler_start(void)
000000  b510              PUSH     {r4,lr}
;;;155    {
;;;156        register struct rt_thread *to_thread;
;;;157        register rt_ubase_t highest_ready_priority;
;;;158    
;;;159    #if RT_THREAD_PRIORITY_MAX > 32
;;;160        register rt_ubase_t number;
;;;161    
;;;162        number = __rt_ffs(rt_thread_ready_priority_group) - 1;
;;;163        highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
;;;164    #else
;;;165        highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
000002  4c07              LDR      r4,|L10.32|
000004  68a0              LDR      r0,[r4,#8]  ; rt_thread_ready_priority_group
000006  f7fffffe          BL       __rt_ffs
;;;166    #endif
;;;167    
;;;168        /* get switch to thread */
;;;169        to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
00000a  4906              LDR      r1,|L10.36|
00000c  1e40              SUBS     r0,r0,#1
00000e  f8510030          LDR      r0,[r1,r0,LSL #3]
000012  3814              SUBS     r0,r0,#0x14
;;;170                                  struct rt_thread,
;;;171                                  tlist);
;;;172    
;;;173        rt_current_thread = to_thread;
000014  6060              STR      r0,[r4,#4]  ; rt_current_thread
;;;174    
;;;175        /* switch to new thread */
;;;176        rt_hw_context_switch_to((rt_uint32_t)&to_thread->sp);
000016  e8bd4010          POP      {r4,lr}
00001a  301c              ADDS     r0,r0,#0x1c           ;173
00001c  f7ffbffe          B.W      rt_hw_context_switch_to
;;;177    
;;;178        /* never come back */
;;;179    }
;;;180    
                          ENDP

                  |L10.32|
                          DCD      ||.data||
                  |L10.36|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  rt_thread_priority_table
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  5f72745f          DCB      0x5f,0x72,0x74,0x5f
000004  73636865          DCB      0x73,0x63,0x68,0x65
000008  64756c65          DCB      0x64,0x75,0x6c,0x65
00000c  725f7374          DCB      0x72,0x5f,0x73,0x74
000010  61636b5f          DCB      0x61,0x63,0x6b,0x5f
000014  63686563          DCB      0x63,0x68,0x65,0x63
000018  6b00              DCB      0x6b,0x00
                  |symbol_number.37|
00001a  7274              DCB      0x72,0x74
00001c  5f736368          DCB      0x5f,0x73,0x63,0x68
000020  6564756c          DCB      0x65,0x64,0x75,0x6c
000024  655f696e          DCB      0x65,0x5f,0x69,0x6e
000028  73657274          DCB      0x73,0x65,0x72,0x74
00002c  5f746872          DCB      0x5f,0x74,0x68,0x72
000030  65616400          DCB      0x65,0x61,0x64,0x00
                  |symbol_number.38|
000034  72745f73          DCB      0x72,0x74,0x5f,0x73
000038  63686564          DCB      0x63,0x68,0x65,0x64
00003c  756c655f          DCB      0x75,0x6c,0x65,0x5f
000040  72656d6f          DCB      0x72,0x65,0x6d,0x6f
000044  76655f74          DCB      0x76,0x65,0x5f,0x74
000048  68726561          DCB      0x68,0x72,0x65,0x61
00004c  6400              DCB      0x64,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  rt_current_priority
000000  0000              DCB      0x00,0x00
                  rt_scheduler_lock_nest
000002  0000              DCB      0x00,0x00
                  rt_current_thread
                          DCD      0x00000000
                  rt_thread_ready_priority_group
                          DCD      0x00000000
                  rt_scheduler_hook
                          DCD      0x00000000
                  rt_thread_defunct
                          %        8
