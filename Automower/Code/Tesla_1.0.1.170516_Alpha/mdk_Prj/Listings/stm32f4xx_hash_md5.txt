; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f4xx_hash_md5.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_hash_md5.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\stm32f4xx_hash_md5.crf ..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_hash_md5.c]
                          THUMB

                          AREA ||i.HASH_MD5||, CODE, READONLY, ALIGN=1

                  HASH_MD5 PROC
;;;86       */
;;;87     ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;88     {
000004  b08b              SUB      sp,sp,#0x2c
;;;89       HASH_InitTypeDef MD5_HASH_InitStructure;
;;;90       HASH_MsgDigest MD5_MessageDigest;
;;;91       __IO uint16_t nbvalidbitsdata = 0;
000006  f04f0800          MOV      r8,#0
00000a  4616              MOV      r6,r2                 ;88
00000c  460f              MOV      r7,r1                 ;88
00000e  4604              MOV      r4,r0                 ;88
000010  f8ad8028          STRH     r8,[sp,#0x28]
;;;92       uint32_t i = 0;
;;;93       __IO uint32_t counter = 0;
;;;94       uint32_t busystatus = 0;
;;;95       ErrorStatus status = SUCCESS;
;;;96       uint32_t inputaddr  = (uint32_t)Input;
;;;97       uint32_t outputaddr = (uint32_t)Output;
;;;98     
;;;99     
;;;100      /* Number of valid bits in last word of the Input data */
;;;101      nbvalidbitsdata = 8 * (Ilen % 4);
000014  0788              LSLS     r0,r1,#30
000016  0ec0              LSRS     r0,r0,#27
000018  4645              MOV      r5,r8                 ;92
00001a  f04f0901          MOV      r9,#1                 ;95
00001e  f8cd8024          STR      r8,[sp,#0x24]
000022  f8ad0028          STRH     r0,[sp,#0x28]
;;;102    
;;;103      /* HASH peripheral initialization */
;;;104      HASH_DeInit();
000026  f7fffffe          BL       HASH_DeInit
;;;105    
;;;106      /* HASH Configuration */
;;;107      MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
00002a  2080              MOVS     r0,#0x80
00002c  e9cd0805          STRD     r0,r8,[sp,#0x14]
;;;108      MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
;;;109      MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000030  2020              MOVS     r0,#0x20
;;;110      HASH_Init(&MD5_HASH_InitStructure);
000032  9007              STR      r0,[sp,#0x1c]
000034  a805              ADD      r0,sp,#0x14
000036  f7fffffe          BL       HASH_Init
;;;111    
;;;112      /* Configure the number of valid bits in last word of the data */
;;;113      HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
00003a  f8bd0028          LDRH     r0,[sp,#0x28]
00003e  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;114    
;;;115      /* Write the Input block in the IN FIFO */
;;;116      for(i=0; i<Ilen; i+=4)
000042  e004              B        |L1.78|
                  |L1.68|
;;;117      {
;;;118        HASH_DataIn(*(uint32_t*)inputaddr);
000044  6820              LDR      r0,[r4,#0]
000046  f7fffffe          BL       HASH_DataIn
00004a  1d24              ADDS     r4,r4,#4
00004c  1d2d              ADDS     r5,r5,#4
                  |L1.78|
00004e  42bd              CMP      r5,r7                 ;116
000050  d3f8              BCC      |L1.68|
;;;119        inputaddr+=4;
;;;120      }
;;;121    
;;;122      /* Start the HASH processor */
;;;123      HASH_StartDigest();
000052  f7fffffe          BL       HASH_StartDigest
;;;124    
;;;125      /* wait until the Busy flag is RESET */
;;;126      do
;;;127      {
;;;128        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
;;;129        counter++;
;;;130      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
000056  f44f3480          MOV      r4,#0x10000
                  |L1.90|
00005a  2008              MOVS     r0,#8                 ;128
00005c  f7fffffe          BL       HASH_GetFlagStatus
000060  9909              LDR      r1,[sp,#0x24]         ;129
000062  1c49              ADDS     r1,r1,#1              ;129
000064  9109              STR      r1,[sp,#0x24]
000066  42a1              CMP      r1,r4
000068  d002              BEQ      |L1.112|
00006a  2800              CMP      r0,#0
00006c  d1f5              BNE      |L1.90|
00006e  e003              B        |L1.120|
                  |L1.112|
;;;131    
;;;132      if (busystatus != RESET)
000070  b110              CBZ      r0,|L1.120|
;;;133      {
;;;134         status = ERROR;
000072  f04f0900          MOV      r9,#0
000076  e00e              B        |L1.150|
                  |L1.120|
;;;135      }
;;;136      else
;;;137      {
;;;138        /* Read the message digest */
;;;139        HASH_GetDigest(&MD5_MessageDigest);
000078  4668              MOV      r0,sp
00007a  f7fffffe          BL       HASH_GetDigest
;;;140        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
00007e  9800              LDR      r0,[sp,#0]
000080  ba00              REV      r0,r0
;;;141        outputaddr+=4;
;;;142        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
000082  6030              STR      r0,[r6,#0]
000084  9801              LDR      r0,[sp,#4]
000086  ba00              REV      r0,r0
;;;143        outputaddr+=4;
;;;144        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
000088  6070              STR      r0,[r6,#4]
00008a  9802              LDR      r0,[sp,#8]
00008c  ba00              REV      r0,r0
;;;145        outputaddr+=4;
;;;146        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
00008e  60b0              STR      r0,[r6,#8]
000090  9803              LDR      r0,[sp,#0xc]
000092  ba00              REV      r0,r0
000094  60f0              STR      r0,[r6,#0xc]
                  |L1.150|
;;;147      }
;;;148      return status; 
;;;149    }
000096  b00b              ADD      sp,sp,#0x2c
000098  4648              MOV      r0,r9                 ;148
00009a  e8bd83f0          POP      {r4-r9,pc}
;;;150    
                          ENDP


                          AREA ||i.HMAC_MD5||, CODE, READONLY, ALIGN=1

                  HMAC_MD5 PROC
;;;161      */
;;;162    ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;163                         uint32_t Ilen, uint8_t Output[16])
;;;164    {
000004  b08d              SUB      sp,sp,#0x34
;;;165      HASH_InitTypeDef MD5_HASH_InitStructure;
;;;166      HASH_MsgDigest MD5_MessageDigest;
;;;167      __IO uint16_t nbvalidbitsdata = 0;
000006  f04f0b00          MOV      r11,#0
00000a  f8dd9068          LDR      r9,[sp,#0x68]
00000e  469a              MOV      r10,r3                ;164
000010  4614              MOV      r4,r2                 ;164
000012  460e              MOV      r6,r1                 ;164
000014  f8adb014          STRH     r11,[sp,#0x14]
;;;168      __IO uint16_t nbvalidbitskey = 0;
000018  f8adb018          STRH     r11,[sp,#0x18]
;;;169      uint32_t i = 0;
;;;170      __IO uint32_t counter = 0;
;;;171      uint32_t busystatus = 0;
;;;172      ErrorStatus status = SUCCESS;
;;;173      uint32_t keyaddr    = (uint32_t)Key;
;;;174      uint32_t inputaddr  = (uint32_t)Input;
;;;175      uint32_t outputaddr = (uint32_t)Output;
;;;176    
;;;177      /* Number of valid bits in last word of the Input data */
;;;178      nbvalidbitsdata = 8 * (Ilen % 4);
00001c  0798              LSLS     r0,r3,#30
00001e  f8cdb000          STR      r11,[sp,#0]           ;173
000022  0ec0              LSRS     r0,r0,#27
000024  9d0d              LDR      r5,[sp,#0x34]
000026  465f              MOV      r7,r11                ;169
000028  f04f0801          MOV      r8,#1                 ;172
00002c  f8ad0014          STRH     r0,[sp,#0x14]
;;;179    
;;;180      /* Number of valid bits in last word of the Key */
;;;181      nbvalidbitskey = 8 * (Keylen % 4);
000030  0788              LSLS     r0,r1,#30
000032  0ec0              LSRS     r0,r0,#27
000034  f8ad0018          STRH     r0,[sp,#0x18]
;;;182       
;;;183      /* HASH peripheral initialization */
;;;184      HASH_DeInit();
000038  f7fffffe          BL       HASH_DeInit
;;;185    
;;;186      /* HASH Configuration */
;;;187      MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
00003c  2080              MOVS     r0,#0x80
;;;188      MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
00003e  9001              STR      r0,[sp,#4]
000040  2040              MOVS     r0,#0x40
;;;189      MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000042  9002              STR      r0,[sp,#8]
000044  2020              MOVS     r0,#0x20
;;;190      if(Keylen > 64)
000046  9003              STR      r0,[sp,#0xc]
000048  2e40              CMP      r6,#0x40
00004a  d902              BLS      |L2.82|
;;;191      {
;;;192        /* HMAC long Key */
;;;193        MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
00004c  02c0              LSLS     r0,r0,#11
00004e  9004              STR      r0,[sp,#0x10]
000050  e001              B        |L2.86|
                  |L2.82|
;;;194      }
;;;195      else
;;;196      {
;;;197        /* HMAC short Key */
;;;198        MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
000052  f8cdb010          STR      r11,[sp,#0x10]
                  |L2.86|
;;;199      }
;;;200      HASH_Init(&MD5_HASH_InitStructure);
000056  a801              ADD      r0,sp,#4
000058  f7fffffe          BL       HASH_Init
;;;201    
;;;202      /* Configure the number of valid bits in last word of the Key */
;;;203      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
00005c  f8bd0018          LDRH     r0,[sp,#0x18]
000060  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;204    
;;;205      /* Write the Key */
;;;206      for(i=0; i<Keylen; i+=4)
000064  e004              B        |L2.112|
                  |L2.102|
;;;207      {
;;;208        HASH_DataIn(*(uint32_t*)keyaddr);
000066  6828              LDR      r0,[r5,#0]
000068  f7fffffe          BL       HASH_DataIn
00006c  1d2d              ADDS     r5,r5,#4
00006e  1d3f              ADDS     r7,r7,#4
                  |L2.112|
000070  42b7              CMP      r7,r6                 ;206
000072  d3f8              BCC      |L2.102|
;;;209        keyaddr+=4;
;;;210      }
;;;211      
;;;212      /* Start the HASH processor */
;;;213      HASH_StartDigest();
000074  f7fffffe          BL       HASH_StartDigest
000078  f44f3580          MOV      r5,#0x10000           ;193
                  |L2.124|
;;;214    
;;;215      /* wait until the Busy flag is RESET */
;;;216      do
;;;217      {
;;;218        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
00007c  2008              MOVS     r0,#8
00007e  f7fffffe          BL       HASH_GetFlagStatus
;;;219        counter++;
000082  9900              LDR      r1,[sp,#0]
000084  1c49              ADDS     r1,r1,#1
;;;220      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
000086  9100              STR      r1,[sp,#0]
000088  42a9              CMP      r1,r5
00008a  d002              BEQ      |L2.146|
00008c  2800              CMP      r0,#0
00008e  d1f5              BNE      |L2.124|
000090  e000              B        |L2.148|
                  |L2.146|
;;;221    
;;;222      if (busystatus != RESET)
000092  bbc8              CBNZ     r0,|L2.264|
                  |L2.148|
;;;223      {
;;;224         status = ERROR;
;;;225      }
;;;226      else
;;;227      {
;;;228        /* Configure the number of valid bits in last word of the Input data */
;;;229        HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
000094  f8bd0014          LDRH     r0,[sp,#0x14]
000098  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;230    
;;;231        /* Write the Input block in the IN FIFO */
;;;232        for(i=0; i<Ilen; i+=4)
00009c  2700              MOVS     r7,#0
00009e  e004              B        |L2.170|
                  |L2.160|
;;;233        {
;;;234          HASH_DataIn(*(uint32_t*)inputaddr);
0000a0  6820              LDR      r0,[r4,#0]
0000a2  f7fffffe          BL       HASH_DataIn
0000a6  1d24              ADDS     r4,r4,#4
0000a8  1d3f              ADDS     r7,r7,#4
                  |L2.170|
0000aa  4557              CMP      r7,r10                ;232
0000ac  d3f8              BCC      |L2.160|
;;;235          inputaddr+=4;
;;;236        }
;;;237    
;;;238        /* Start the HASH processor */
;;;239        HASH_StartDigest();
0000ae  f7fffffe          BL       HASH_StartDigest
;;;240    
;;;241        /* wait until the Busy flag is RESET */
;;;242        counter =0;
0000b2  f8cdb000          STR      r11,[sp,#0]
                  |L2.182|
;;;243        do
;;;244        {
;;;245           busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0000b6  2008              MOVS     r0,#8
0000b8  f7fffffe          BL       HASH_GetFlagStatus
;;;246           counter++;
0000bc  9900              LDR      r1,[sp,#0]
0000be  1c49              ADDS     r1,r1,#1
;;;247        }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
0000c0  9100              STR      r1,[sp,#0]
0000c2  42a9              CMP      r1,r5
0000c4  d002              BEQ      |L2.204|
0000c6  2800              CMP      r0,#0
0000c8  d1f5              BNE      |L2.182|
0000ca  e000              B        |L2.206|
                  |L2.204|
;;;248    
;;;249        if (busystatus != RESET)
0000cc  b9e0              CBNZ     r0,|L2.264|
                  |L2.206|
;;;250        {
;;;251          status = ERROR;
;;;252        }
;;;253        else
;;;254        {  
;;;255          /* Configure the number of valid bits in last word of the Key */
;;;256          HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
0000ce  f8bd0018          LDRH     r0,[sp,#0x18]
0000d2  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;257    
;;;258          /* Write the Key */
;;;259          keyaddr = (uint32_t)Key;
;;;260          for(i=0; i<Keylen; i+=4)
0000d6  2700              MOVS     r7,#0
0000d8  9c0d              LDR      r4,[sp,#0x34]
0000da  e004              B        |L2.230|
                  |L2.220|
;;;261          {
;;;262            HASH_DataIn(*(uint32_t*)keyaddr);
0000dc  6820              LDR      r0,[r4,#0]
0000de  f7fffffe          BL       HASH_DataIn
0000e2  1d24              ADDS     r4,r4,#4
0000e4  1d3f              ADDS     r7,r7,#4
                  |L2.230|
0000e6  42b7              CMP      r7,r6                 ;260
0000e8  d3f8              BCC      |L2.220|
;;;263            keyaddr+=4;
;;;264          }
;;;265      
;;;266           /* Start the HASH processor */
;;;267           HASH_StartDigest();
0000ea  f7fffffe          BL       HASH_StartDigest
;;;268    
;;;269           /* wait until the Busy flag is RESET */
;;;270           counter =0;
0000ee  f8cdb000          STR      r11,[sp,#0]
                  |L2.242|
;;;271           do
;;;272           {
;;;273              busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0000f2  2008              MOVS     r0,#8
0000f4  f7fffffe          BL       HASH_GetFlagStatus
;;;274              counter++;
0000f8  9900              LDR      r1,[sp,#0]
0000fa  1c49              ADDS     r1,r1,#1
;;;275          }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
0000fc  9100              STR      r1,[sp,#0]
0000fe  42a9              CMP      r1,r5
000100  d003              BEQ      |L2.266|
000102  2800              CMP      r0,#0
000104  d1f5              BNE      |L2.242|
000106  e004              B        |L2.274|
                  |L2.264|
000108  e000              B        |L2.268|
                  |L2.266|
;;;276    
;;;277          if (busystatus != RESET)
00010a  b110              CBZ      r0,|L2.274|
                  |L2.268|
;;;278          {
;;;279             status = ERROR;
00010c  f04f0800          MOV      r8,#0
000110  e012              B        |L2.312|
                  |L2.274|
;;;280          }
;;;281          else
;;;282          {
;;;283             /* Read the message digest */
;;;284             HASH_GetDigest(&MD5_MessageDigest);
000112  a807              ADD      r0,sp,#0x1c
000114  f7fffffe          BL       HASH_GetDigest
;;;285             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
000118  9807              LDR      r0,[sp,#0x1c]
00011a  ba01              REV      r1,r0
;;;286             outputaddr+=4;
;;;287             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
00011c  f8c91000          STR      r1,[r9,#0]
000120  9908              LDR      r1,[sp,#0x20]
000122  ba09              REV      r1,r1
;;;288             outputaddr+=4;
;;;289             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
000124  f8c91004          STR      r1,[r9,#4]
000128  9909              LDR      r1,[sp,#0x24]
00012a  ba09              REV      r1,r1
;;;290             outputaddr+=4;
;;;291             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
00012c  f8c91008          STR      r1,[r9,#8]
000130  990a              LDR      r1,[sp,#0x28]
000132  ba09              REV      r1,r1
000134  f8c9100c          STR      r1,[r9,#0xc]
                  |L2.312|
;;;292          }
;;;293        }
;;;294      }
;;;295      return status;  
;;;296    }
000138  b011              ADD      sp,sp,#0x44
00013a  4640              MOV      r0,r8                 ;295
00013c  e8bd8ff0          POP      {r4-r11,pc}
;;;297    /**
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_hash_md5.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REVSH|
#line 128
|__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
