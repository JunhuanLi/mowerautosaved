; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\shell.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\shell.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\shell.crf ..\OS\components\finsh\shell.c]
                          THUMB

                          AREA ||i.finsh_get_device||, CODE, READONLY, ALIGN=2

                  finsh_get_device PROC
;;;136     */
;;;137    const char* finsh_get_device()
000000  b538              PUSH     {r3-r5,lr}
;;;138    {
;;;139        RT_ASSERT(shell != RT_NULL);
000002  4c0a              LDR      r4,|L1.44|
000004  6820              LDR      r0,[r4,#0]            ;138  ; shell
000006  b960              CBNZ     r0,|L1.34|
000008  2000              MOVS     r0,#0
00000a  f88d0000          STRB     r0,[sp,#0]
00000e  238b              MOVS     r3,#0x8b
000010  4a07              LDR      r2,|L1.48|
000012  a108              ADR      r1,|L1.52|
000014  a00c              ADR      r0,|L1.72|
000016  f7fffffe          BL       rt_kprintf
                  |L1.26|
00001a  f89d0000          LDRB     r0,[sp,#0]
00001e  2800              CMP      r0,#0
000020  d0fb              BEQ      |L1.26|
                  |L1.34|
;;;140        return shell->device->parent.name;
000022  6820              LDR      r0,[r4,#0]  ; shell
000024  f8d002a8          LDR      r0,[r0,#0x2a8]
;;;141    }
000028  bd38              POP      {r3-r5,pc}
;;;142    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      ||.data||
                  |L1.48|
                          DCD      ||.constdata||+0x1e
                  |L1.52|
000034  7368656c          DCB      "shell != RT_NULL",0
000038  6c20213d
00003c  2052545f
000040  4e554c4c
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
                  |L1.72|
000048  28257329          DCB      "(%s) assert failed at %s:%d \n",0
00004c  20617373
000050  65727420
000054  6661696c
000058  65642061
00005c  74202573
000060  3a256420
000064  0a00    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.finsh_get_echo||, CODE, READONLY, ALIGN=2

                  finsh_get_echo PROC
;;;164     */
;;;165    rt_uint32_t finsh_get_echo()
000000  b538              PUSH     {r3-r5,lr}
;;;166    {
;;;167        RT_ASSERT(shell != RT_NULL);
000002  4c0b              LDR      r4,|L2.48|
000004  6820              LDR      r0,[r4,#0]            ;166  ; shell
000006  b960              CBNZ     r0,|L2.34|
000008  2000              MOVS     r0,#0
00000a  f88d0000          STRB     r0,[sp,#0]
00000e  23a7              MOVS     r3,#0xa7
000010  4a08              LDR      r2,|L2.52|
000012  a109              ADR      r1,|L2.56|
000014  a00d              ADR      r0,|L2.76|
000016  f7fffffe          BL       rt_kprintf
                  |L2.26|
00001a  f89d0000          LDRB     r0,[sp,#0]
00001e  2800              CMP      r0,#0
000020  d0fb              BEQ      |L2.26|
                  |L2.34|
;;;168    
;;;169        return shell->echo_mode;
000022  6820              LDR      r0,[r4,#0]  ; shell
000024  f8900021          LDRB     r0,[r0,#0x21]
000028  f0000001          AND      r0,r0,#1
;;;170    }
00002c  bd38              POP      {r3-r5,pc}
;;;171    
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      ||.data||
                  |L2.52|
                          DCD      ||.constdata||+0x3e
                  |L2.56|
000038  7368656c          DCB      "shell != RT_NULL",0
00003c  6c20213d
000040  2052545f
000044  4e554c4c
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L2.76|
00004c  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000050  20617373
000054  65727420
000058  6661696c
00005c  65642061
000060  74202573
000064  3a256420
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.finsh_run_line||, CODE, READONLY, ALIGN=2

                  finsh_run_line PROC
;;;193    #ifndef FINSH_USING_MSH_ONLY
;;;194    void finsh_run_line(struct finsh_parser* parser, const char *line)
000000  b570              PUSH     {r4-r6,lr}
;;;195    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;196        const char* err_str;
;;;197    
;;;198        rt_kprintf("\n");
000006  a020              ADR      r0,|L3.136|
000008  f7fffffe          BL       rt_kprintf
;;;199        finsh_parser_run(parser, (unsigned char*)line);
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       finsh_parser_run
;;;200    
;;;201        /* compile node root */
;;;202        if (finsh_errno() == 0)
000014  f7fffffe          BL       finsh_errno
000018  b158              CBZ      r0,|L3.50|
;;;203        {
;;;204            finsh_compiler_run(parser->root);
;;;205        }
;;;206        else
;;;207        {
;;;208            err_str = finsh_error_string(finsh_errno());
00001a  f7fffffe          BL       finsh_errno
00001e  f7fffffe          BL       finsh_error_string
000022  4601              MOV      r1,r0
;;;209            rt_kprintf("%s\n", err_str);
000024  a019              ADR      r0,|L3.140|
000026  f7fffffe          BL       rt_kprintf
                  |L3.42|
;;;210        }
;;;211    
;;;212        /* run virtual machine */
;;;213        if (finsh_errno() == 0)
00002a  f7fffffe          BL       finsh_errno
00002e  b128              CBZ      r0,|L3.60|
000030  e025              B        |L3.126|
                  |L3.50|
000032  f8d40098          LDR      r0,[r4,#0x98]         ;204
000036  f7fffffe          BL       finsh_compiler_run
00003a  e7f6              B        |L3.42|
                  |L3.60|
;;;214        {
;;;215            char ch;
;;;216            finsh_vm_run();
00003c  f7fffffe          BL       finsh_vm_run
;;;217    
;;;218            ch = (unsigned char)finsh_stack_bottom();
000040  f7fffffe          BL       finsh_stack_bottom
000044  b2c0              UXTB     r0,r0
000046  3821              SUBS     r0,r0,#0x21
;;;219            if (ch > 0x20 && ch < 0x7e)
000048  285d              CMP      r0,#0x5d
00004a  d20e              BCS      |L3.106|
;;;220            {
;;;221                rt_kprintf("\t'%c', %d, 0x%08x\n",
00004c  f7fffffe          BL       finsh_stack_bottom
000050  4605              MOV      r5,r0
000052  f7fffffe          BL       finsh_stack_bottom
000056  4606              MOV      r6,r0
000058  f7fffffe          BL       finsh_stack_bottom
00005c  b2c1              UXTB     r1,r0
00005e  462b              MOV      r3,r5
000060  4632              MOV      r2,r6
000062  a00b              ADR      r0,|L3.144|
000064  f7fffffe          BL       rt_kprintf
000068  e009              B        |L3.126|
                  |L3.106|
;;;222                    (unsigned char)finsh_stack_bottom(),
;;;223                    (unsigned int)finsh_stack_bottom(),
;;;224                    (unsigned int)finsh_stack_bottom());
;;;225            }
;;;226            else
;;;227            {
;;;228                rt_kprintf("\t%d, 0x%08x\n",
00006a  f7fffffe          BL       finsh_stack_bottom
00006e  4605              MOV      r5,r0
000070  f7fffffe          BL       finsh_stack_bottom
000074  4601              MOV      r1,r0
000076  462a              MOV      r2,r5
000078  a00a              ADR      r0,|L3.164|
00007a  f7fffffe          BL       rt_kprintf
                  |L3.126|
;;;229                    (unsigned int)finsh_stack_bottom(),
;;;230                    (unsigned int)finsh_stack_bottom());
;;;231            }
;;;232        }
;;;233    
;;;234        finsh_flush(parser);
00007e  4620              MOV      r0,r4
000080  e8bd4070          POP      {r4-r6,lr}
000084  f7ffbffe          B.W      finsh_flush
;;;235    }
;;;236    #endif
                          ENDP

                  |L3.136|
000088  0a00              DCB      "\n",0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L3.140|
00008c  25730a00          DCB      "%s\n",0
                  |L3.144|
000090  09272563          DCB      "\t'%c', %d, 0x%08x\n",0
000094  272c2025
000098  642c2030
00009c  78253038
0000a0  780a00  
0000a3  00                DCB      0
                  |L3.164|
0000a4  0925642c          DCB      "\t%d, 0x%08x\n",0
0000a8  20307825
0000ac  3038780a
0000b0  00      
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0

                          AREA ||i.finsh_rx_ind||, CODE, READONLY, ALIGN=2

                  finsh_rx_ind PROC
;;;83     
;;;84     static rt_err_t finsh_rx_ind(rt_device_t dev, rt_size_t size)
000000  b538              PUSH     {r3-r5,lr}
;;;85     {
;;;86         RT_ASSERT(shell != RT_NULL);
000002  4c0a              LDR      r4,|L4.44|
000004  6820              LDR      r0,[r4,#0]            ;85  ; shell
000006  b960              CBNZ     r0,|L4.34|
000008  2000              MOVS     r0,#0
00000a  f88d0000          STRB     r0,[sp,#0]
00000e  2356              MOVS     r3,#0x56
000010  4a07              LDR      r2,|L4.48|
000012  a108              ADR      r1,|L4.52|
000014  a00c              ADR      r0,|L4.72|
000016  f7fffffe          BL       rt_kprintf
                  |L4.26|
00001a  f89d0000          LDRB     r0,[sp,#0]
00001e  2800              CMP      r0,#0
000020  d0fb              BEQ      |L4.26|
                  |L4.34|
;;;87     
;;;88         /* release semaphore to let finsh thread rx data */
;;;89         rt_sem_release(&shell->rx_sem);
000022  6820              LDR      r0,[r4,#0]  ; shell
000024  f7fffffe          BL       rt_sem_release
;;;90     
;;;91         return RT_EOK;
000028  2000              MOVS     r0,#0
;;;92     }
00002a  bd38              POP      {r3-r5,pc}
;;;93     
                          ENDP

                  |L4.44|
                          DCD      ||.data||
                  |L4.48|
                          DCD      ||.constdata||
                  |L4.52|
000034  7368656c          DCB      "shell != RT_NULL",0
000038  6c20213d
00003c  2052545f
000040  4e554c4c
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
                  |L4.72|
000048  28257329          DCB      "(%s) assert failed at %s:%d \n",0
00004c  20617373
000050  65727420
000054  6661696c
000058  65642061
00005c  74202573
000060  3a256420
000064  0a00    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.finsh_set_device||, CODE, READONLY, ALIGN=2

                  finsh_set_device PROC
;;;100     */
;;;101    void finsh_set_device(const char* device_name)
000000  b5f8              PUSH     {r3-r7,lr}
;;;102    {
;;;103        rt_device_t dev = RT_NULL;
;;;104    
;;;105        RT_ASSERT(shell != RT_NULL);
000002  4d1d              LDR      r5,|L5.120|
000004  4606              MOV      r6,r0                 ;102
000006  6828              LDR      r0,[r5,#0]            ;102  ; shell
000008  b960              CBNZ     r0,|L5.36|
00000a  2000              MOVS     r0,#0
00000c  f88d0000          STRB     r0,[sp,#0]
000010  2369              MOVS     r3,#0x69
000012  4a1a              LDR      r2,|L5.124|
000014  a11a              ADR      r1,|L5.128|
000016  a01f              ADR      r0,|L5.148|
000018  f7fffffe          BL       rt_kprintf
                  |L5.28|
00001c  f89d0000          LDRB     r0,[sp,#0]
000020  2800              CMP      r0,#0
000022  d0fb              BEQ      |L5.28|
                  |L5.36|
;;;106        dev = rt_device_find(device_name);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       rt_device_find
00002a  0004              MOVS     r4,r0
;;;107        if (dev == RT_NULL)
00002c  d01d              BEQ      |L5.106|
;;;108        {
;;;109            rt_kprintf("finsh: can not find device: %s\n", device_name);
;;;110            return;
;;;111        }
;;;112    
;;;113        /* check whether it's a same device */
;;;114        if (dev == shell->device) return;
00002e  6828              LDR      r0,[r5,#0]  ; shell
000030  f8d002a8          LDR      r0,[r0,#0x2a8]
000034  42a0              CMP      r0,r4
000036  d01e              BEQ      |L5.118|
;;;115        /* open this device and set the new device in finsh shell */
;;;116        if (rt_device_open(dev, RT_DEVICE_OFLAG_RDWR) == RT_EOK)
000038  2103              MOVS     r1,#3
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       rt_device_open
000040  2800              CMP      r0,#0
000042  d118              BNE      |L5.118|
;;;117        {
;;;118            if (shell->device != RT_NULL)
000044  6828              LDR      r0,[r5,#0]  ; shell
000046  f8d002a8          LDR      r0,[r0,#0x2a8]
00004a  b128              CBZ      r0,|L5.88|
;;;119            {
;;;120                /* close old finsh device */
;;;121                rt_device_close(shell->device);
00004c  f7fffffe          BL       rt_device_close
;;;122                rt_device_set_rx_indicate(dev, RT_NULL);
000050  2100              MOVS     r1,#0
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       rt_device_set_rx_indicate
                  |L5.88|
;;;123            }
;;;124    
;;;125            shell->device = dev;
000058  6828              LDR      r0,[r5,#0]  ; shell
;;;126            rt_device_set_rx_indicate(dev, finsh_rx_ind);
00005a  4916              LDR      r1,|L5.180|
00005c  f8c042a8          STR      r4,[r0,#0x2a8]
000060  4620              MOV      r0,r4
000062  e8bd40f8          POP      {r3-r7,lr}
000066  f7ffbffe          B.W      rt_device_set_rx_indicate
                  |L5.106|
00006a  4631              MOV      r1,r6                 ;109
00006c  e8bd40f8          POP      {r3-r7,lr}            ;109
000070  a011              ADR      r0,|L5.184|
000072  f7ffbffe          B.W      rt_kprintf
                  |L5.118|
;;;127        }
;;;128    }
000076  bdf8              POP      {r3-r7,pc}
;;;129    
                          ENDP

                  |L5.120|
                          DCD      ||.data||
                  |L5.124|
                          DCD      ||.constdata||+0xd
                  |L5.128|
000080  7368656c          DCB      "shell != RT_NULL",0
000084  6c20213d
000088  2052545f
00008c  4e554c4c
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L5.148|
000094  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000098  20617373
00009c  65727420
0000a0  6661696c
0000a4  65642061
0000a8  74202573
0000ac  3a256420
0000b0  0a00    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L5.180|
                          DCD      finsh_rx_ind
                  |L5.184|
0000b8  66696e73          DCB      "finsh: can not find device: %s\n",0
0000bc  683a2063
0000c0  616e206e
0000c4  6f742066
0000c8  696e6420
0000cc  64657669
0000d0  63653a20
0000d4  25730a00

                          AREA ||i.finsh_set_echo||, CODE, READONLY, ALIGN=2

                  finsh_set_echo PROC
;;;151     */
;;;152    void finsh_set_echo(rt_uint32_t echo)
000000  b538              PUSH     {r3-r5,lr}
;;;153    {
;;;154        RT_ASSERT(shell != RT_NULL);
000002  4d0a              LDR      r5,|L6.44|
000004  4604              MOV      r4,r0                 ;153
000006  6828              LDR      r0,[r5,#0]            ;153  ; shell
000008  b960              CBNZ     r0,|L6.36|
00000a  2000              MOVS     r0,#0
00000c  f88d0000          STRB     r0,[sp,#0]
000010  239a              MOVS     r3,#0x9a
000012  4a07              LDR      r2,|L6.48|
000014  a107              ADR      r1,|L6.52|
000016  a00c              ADR      r0,|L6.72|
000018  f7fffffe          BL       rt_kprintf
                  |L6.28|
00001c  f89d1000          LDRB     r1,[sp,#0]
000020  2900              CMP      r1,#0
000022  d0fb              BEQ      |L6.28|
                  |L6.36|
;;;155        shell->echo_mode = (rt_uint8_t)echo;
000024  6828              LDR      r0,[r5,#0]  ; shell
000026  f8804021          STRB     r4,[r0,#0x21]
;;;156    }
00002a  bd38              POP      {r3-r5,pc}
;;;157    
                          ENDP

                  |L6.44|
                          DCD      ||.data||
                  |L6.48|
                          DCD      ||.constdata||+0x2f
                  |L6.52|
000034  7368656c          DCB      "shell != RT_NULL",0
000038  6c20213d
00003c  2052545f
000040  4e554c4c
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
                  |L6.72|
000048  28257329          DCB      "(%s) assert failed at %s:%d \n",0
00004c  20617373
000050  65727420
000054  6661696c
000058  65642061
00005c  74202573
000060  3a256420
000064  0a00    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.finsh_system_function_init||, CODE, READONLY, ALIGN=2

                  finsh_system_function_init PROC
;;;543    
;;;544    void finsh_system_function_init(const void* begin, const void* end)
000000  4a02              LDR      r2,|L7.12|
;;;545    {
;;;546        _syscall_table_begin = (struct finsh_syscall*) begin;
;;;547        _syscall_table_end = (struct finsh_syscall*) end;
000002  6010              STR      r0,[r2,#0]  ; _syscall_table_begin
000004  4802              LDR      r0,|L7.16|
000006  6001              STR      r1,[r0,#0]  ; _syscall_table_end
;;;548    }
000008  4770              BX       lr
;;;549    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      _syscall_table_begin
                  |L7.16|
                          DCD      _syscall_table_end

                          AREA ||i.finsh_system_init||, CODE, READONLY, ALIGN=2

                  finsh_system_init PROC
;;;594     */
;;;595    int finsh_system_init(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;596    {
;;;597        rt_err_t result;
;;;598    
;;;599    
;;;600    #ifdef FINSH_USING_SYMTAB
;;;601    #ifdef __CC_ARM                 /* ARM C Compiler */
;;;602        extern const int FSymTab$$Base;
;;;603        extern const int FSymTab$$Limit;
;;;604    	#ifndef FINSH_USING_MSH_ONLY // add by Raymand 2017.4.20
;;;605        extern const int VSymTab$$Base;
;;;606        extern const int VSymTab$$Limit;
;;;607    	#endif
;;;608        finsh_system_function_init(&FSymTab$$Base, &FSymTab$$Limit);
000002  491a              LDR      r1,|L8.108|
000004  481a              LDR      r0,|L8.112|
000006  f7fffffe          BL       finsh_system_function_init
;;;609        #ifndef FINSH_USING_MSH_ONLY
;;;610        finsh_system_var_init(&VSymTab$$Base, &VSymTab$$Limit);
00000a  491a              LDR      r1,|L8.116|
00000c  481a              LDR      r0,|L8.120|
00000e  f7fffffe          BL       finsh_system_var_init
;;;611        #endif
;;;612    #elif defined (__ICCARM__)      /* for IAR Compiler */
;;;613        finsh_system_function_init(__section_begin("FSymTab"),
;;;614                                   __section_end("FSymTab"));
;;;615        finsh_system_var_init(__section_begin("VSymTab"),
;;;616                              __section_end("VSymTab"));
;;;617    #elif defined (__GNUC__) || defined(__TI_COMPILER_VERSION__)
;;;618        /* GNU GCC Compiler and TI CCS */
;;;619        extern const int __fsymtab_start;
;;;620        extern const int __fsymtab_end;
;;;621        extern const int __vsymtab_start;
;;;622        extern const int __vsymtab_end;
;;;623        finsh_system_function_init(&__fsymtab_start, &__fsymtab_end);
;;;624        finsh_system_var_init(&__vsymtab_start, &__vsymtab_end);
;;;625    #elif defined(__ADSPBLACKFIN__) /* for VisualDSP++ Compiler */
;;;626        finsh_system_function_init(&__fsymtab_start, &__fsymtab_end);
;;;627        finsh_system_var_init(&__vsymtab_start, &__vsymtab_end);
;;;628    #elif defined(_MSC_VER)
;;;629        unsigned int *ptr_begin, *ptr_end;
;;;630    
;;;631        ptr_begin = (unsigned int*)&__fsym_begin; ptr_begin += (sizeof(struct finsh_syscall)/sizeof(unsigned int));
;;;632        while (*ptr_begin == 0) ptr_begin ++;
;;;633    
;;;634        ptr_end = (unsigned int*) &__fsym_end; ptr_end --;
;;;635        while (*ptr_end == 0) ptr_end --;
;;;636    
;;;637        finsh_system_function_init(ptr_begin, ptr_end);
;;;638    #endif
;;;639    #endif
;;;640    
;;;641        /* create or set shell structure */
;;;642    #ifdef RT_USING_HEAP
;;;643        shell = (struct finsh_shell*)rt_malloc(sizeof(struct finsh_shell));
000012  f44f752b          MOV      r5,#0x2ac
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       rt_malloc
00001c  4c17              LDR      r4,|L8.124|
;;;644        if (shell == RT_NULL)
00001e  6020              STR      r0,[r4,#0]  ; shell
000020  b1b8              CBZ      r0,|L8.82|
;;;645        {
;;;646            rt_kprintf("no memory for shell\n");
;;;647            return -1;
;;;648        }
;;;649    #else
;;;650        shell = &_shell;
;;;651    #endif
;;;652    
;;;653        memset(shell, 0, sizeof(struct finsh_shell));
000022  4629              MOV      r1,r5
000024  f7fffffe          BL       __aeabi_memclr4
;;;654    
;;;655        rt_sem_init(&(shell->rx_sem), "shrx", 0, 0);
000028  2300              MOVS     r3,#0
00002a  461a              MOV      r2,r3
00002c  a114              ADR      r1,|L8.128|
00002e  6820              LDR      r0,[r4,#0]  ; shell
000030  f7fffffe          BL       rt_sem_init
;;;656        result = rt_thread_init(&finsh_thread,
000034  4814              LDR      r0,|L8.136|
000036  230a              MOVS     r3,#0xa
000038  2214              MOVS     r2,#0x14
00003a  f44f6100          MOV      r1,#0x800
00003e  e88d000f          STM      sp,{r0-r3}
000042  2300              MOVS     r3,#0
000044  4a11              LDR      r2,|L8.140|
000046  a112              ADR      r1,|L8.144|
000048  3880              SUBS     r0,r0,#0x80
00004a  f7fffffe          BL       rt_thread_init
;;;657            "tshell",
;;;658            finsh_thread_entry, RT_NULL,
;;;659            &finsh_thread_stack[0], sizeof(finsh_thread_stack),
;;;660            FINSH_THREAD_PRIORITY, 10);
;;;661    
;;;662        if (result == RT_EOK)
00004e  b138              CBZ      r0,|L8.96|
000050  e00a              B        |L8.104|
                  |L8.82|
000052  a011              ADR      r0,|L8.152|
000054  f7fffffe          BL       rt_kprintf
000058  f04f30ff          MOV      r0,#0xffffffff        ;647
                  |L8.92|
;;;663            rt_thread_startup(&finsh_thread);
;;;664        return 0;
;;;665    }
00005c  b004              ADD      sp,sp,#0x10
00005e  bd70              POP      {r4-r6,pc}
                  |L8.96|
000060  4809              LDR      r0,|L8.136|
000062  3880              SUBS     r0,r0,#0x80           ;663
000064  f7fffffe          BL       rt_thread_startup
                  |L8.104|
000068  2000              MOVS     r0,#0                 ;664
00006a  e7f7              B        |L8.92|
;;;666    INIT_COMPONENT_EXPORT(finsh_system_init);
                          ENDP

                  |L8.108|
                          DCD      ||FSymTab$$Limit||
                  |L8.112|
                          DCD      ||FSymTab$$Base||
                  |L8.116|
                          DCD      ||VSymTab$$Limit||
                  |L8.120|
                          DCD      ||VSymTab$$Base||
                  |L8.124|
                          DCD      ||.data||
                  |L8.128|
000080  73687278          DCB      "shrx",0
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L8.136|
                          DCD      ||.bss||+0x80
                  |L8.140|
                          DCD      finsh_thread_entry
                  |L8.144|
000090  74736865          DCB      "tshell",0
000094  6c6c00  
000097  00                DCB      0
                  |L8.152|
000098  6e6f206d          DCB      "no memory for shell\n",0
00009c  656d6f72
0000a0  7920666f
0000a4  72207368
0000a8  656c6c0a
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0

                          AREA ||i.finsh_system_var_init||, CODE, READONLY, ALIGN=2

                  finsh_system_var_init PROC
;;;549    
;;;550    void finsh_system_var_init(const void* begin, const void* end)
000000  4a02              LDR      r2,|L9.12|
;;;551    {
;;;552        _sysvar_table_begin = (struct finsh_sysvar*) begin;
;;;553        _sysvar_table_end = (struct finsh_sysvar*) end;
000002  6010              STR      r0,[r2,#0]  ; _sysvar_table_begin
000004  4802              LDR      r0,|L9.16|
000006  6001              STR      r1,[r0,#0]  ; _sysvar_table_end
;;;554    }
000008  4770              BX       lr
;;;555    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      _sysvar_table_begin
                  |L9.16|
                          DCD      _sysvar_table_end

                          AREA ||i.finsh_thread_entry||, CODE, READONLY, ALIGN=2

                  finsh_thread_entry PROC
;;;291    #endif
;;;292    void finsh_thread_entry(void* parameter)
000000  b51c              PUSH     {r2-r4,lr}
;;;293    {
;;;294        char ch;
;;;295    
;;;296        /* normal is echo mode */
;;;297        shell->echo_mode = 1;
000002  4edc              LDR      r6,|L10.884|
000004  2701              MOVS     r7,#1
000006  6830              LDR      r0,[r6,#0]  ; shell
000008  f8807021          STRB     r7,[r0,#0x21]
00000c  f50070dc          ADD      r0,r0,#0x1b8
;;;298    
;;;299    #ifndef FINSH_USING_MSH_ONLY
;;;300        finsh_init(&shell->parser);
000010  f7fffffe          BL       finsh_init
;;;301    #endif
;;;302        rt_kprintf(FINSH_PROMPT);
000014  a0d8              ADR      r0,|L10.888|
000016  f7fffffe          BL       rt_kprintf
;;;303    
;;;304        /* set console device as shell device */
;;;305        if (shell->device == RT_NULL)
00001a  6830              LDR      r0,[r6,#0]  ; shell
00001c  2500              MOVS     r5,#0
00001e  f8d002a8          LDR      r0,[r0,#0x2a8]
000022  b9f0              CBNZ     r0,|L10.98|
;;;306        {
;;;307    #ifdef RT_USING_CONSOLE
;;;308            shell->device = rt_console_get_device();
000024  f7fffffe          BL       rt_console_get_device
000028  6831              LDR      r1,[r6,#0]  ; shell
;;;309            RT_ASSERT(shell->device);
00002a  f8c102a8          STR      r0,[r1,#0x2a8]
00002e  b960              CBNZ     r0,|L10.74|
000030  f88d5004          STRB     r5,[sp,#4]
000034  f2401335          MOV      r3,#0x135
000038  4ad1              LDR      r2,|L10.896|
00003a  a1d2              ADR      r1,|L10.900|
00003c  a0d5              ADR      r0,|L10.916|
00003e  f7fffffe          BL       rt_kprintf
                  |L10.66|
000042  f89d0004          LDRB     r0,[sp,#4]
000046  2800              CMP      r0,#0
000048  d0fb              BEQ      |L10.66|
                  |L10.74|
;;;310            rt_device_open(shell->device, RT_DEVICE_OFLAG_RDWR);
00004a  6830              LDR      r0,[r6,#0]  ; shell
00004c  2103              MOVS     r1,#3
00004e  f8d002a8          LDR      r0,[r0,#0x2a8]
000052  f7fffffe          BL       rt_device_open
;;;311            rt_device_set_rx_indicate(shell->device, finsh_rx_ind);
000056  6830              LDR      r0,[r6,#0]  ; shell
000058  49d6              LDR      r1,|L10.948|
00005a  f8d002a8          LDR      r0,[r0,#0x2a8]
00005e  f7fffffe          BL       rt_device_set_rx_indicate
                  |L10.98|
;;;312    #else
;;;313           RT_ASSERT(shell->device);
;;;314    #endif
;;;315        }
;;;316    
;;;317        while (1)
;;;318        {
;;;319            /* wait receive */
;;;320            if (rt_sem_take(&shell->rx_sem, RT_WAITING_FOREVER) != RT_EOK) continue;
000062  f04f38ff          MOV      r8,#0xffffffff
                  |L10.102|
000066  4641              MOV      r1,r8
000068  6830              LDR      r0,[r6,#0]  ; shell
00006a  f7fffffe          BL       rt_sem_take
00006e  2800              CMP      r0,#0
000070  d1f9              BNE      |L10.102|
                  |L10.114|
000072  e173              B        |L10.860|
                  |L10.116|
;;;321    
;;;322            /* read one character from device */
;;;323            while (rt_device_read(shell->device, 0, &ch, 1) == 1)
;;;324            {
;;;325                /*
;;;326                 * handle control key
;;;327                 * up key  : 0x1b 0x5b 0x41
;;;328                 * down key: 0x1b 0x5b 0x42
;;;329                 * right key:0x1b 0x5b 0x43
;;;330                 * left key: 0x1b 0x5b 0x44
;;;331                 */
;;;332                if (ch == 0x1b)
000074  f89d1000          LDRB     r1,[sp,#0]
000078  6830              LDR      r0,[r6,#0]  ; shell
00007a  291b              CMP      r1,#0x1b
00007c  d006              BEQ      |L10.140|
;;;333                {
;;;334                    shell->stat = WAIT_SPEC_KEY;
;;;335                    continue;
;;;336                }
;;;337                else if (shell->stat == WAIT_SPEC_KEY)
00007e  f8902020          LDRB     r2,[r0,#0x20]
000082  2a01              CMP      r2,#1
000084  d005              BEQ      |L10.146|
;;;338                {
;;;339                    if (ch == 0x5b)
;;;340                    {
;;;341                        shell->stat = WAIT_FUNC_KEY;
;;;342                        continue;
;;;343                    }
;;;344    
;;;345                    shell->stat = WAIT_NORMAL;
;;;346                }
;;;347                else if (shell->stat == WAIT_FUNC_KEY)
000086  2a02              CMP      r2,#2
000088  d00c              BEQ      |L10.164|
00008a  e015              B        |L10.184|
                  |L10.140|
00008c  f8807020          STRB     r7,[r0,#0x20]         ;334
000090  e164              B        |L10.860|
                  |L10.146|
000092  295b              CMP      r1,#0x5b              ;339
000094  d002              BEQ      |L10.156|
000096  f8805020          STRB     r5,[r0,#0x20]         ;345
00009a  e00d              B        |L10.184|
                  |L10.156|
00009c  2102              MOVS     r1,#2                 ;341
00009e  f8801020          STRB     r1,[r0,#0x20]         ;341
0000a2  e15b              B        |L10.860|
                  |L10.164|
;;;348                {
;;;349                    shell->stat = WAIT_NORMAL;
0000a4  f8805020          STRB     r5,[r0,#0x20]
;;;350    
;;;351                    if (ch == 0x41) /* up key */
0000a8  2941              CMP      r1,#0x41
0000aa  d00e              BEQ      |L10.202|
;;;352                    {
;;;353    #ifdef FINSH_USING_HISTORY
;;;354                        /* prev history */
;;;355                        if (shell->current_history > 0)
;;;356                            shell->current_history --;
;;;357                        else
;;;358                        {
;;;359                            shell->current_history = 0;
;;;360                            continue;
;;;361                        }
;;;362    
;;;363                        /* copy the history command */
;;;364                        memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
;;;365                               FINSH_CMD_SIZE);
;;;366                        shell->line_curpos = shell->line_position = strlen(shell->line);
;;;367                        shell_handle_history(shell);
;;;368    #endif
;;;369                        continue;
;;;370                    }
;;;371                    else if (ch == 0x42) /* down key */
0000ac  2942              CMP      r1,#0x42
0000ae  d013              BEQ      |L10.216|
;;;372                    {
;;;373    #ifdef FINSH_USING_HISTORY
;;;374                        /* next history */
;;;375                        if (shell->current_history < shell->history_count - 1)
;;;376                            shell->current_history ++;
;;;377                        else
;;;378                        {
;;;379                            /* set to the end of history */
;;;380                            if (shell->history_count != 0)
;;;381                                shell->current_history = shell->history_count - 1;
;;;382                            else
;;;383                                continue;
;;;384                        }
;;;385    
;;;386                        memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
;;;387                               FINSH_CMD_SIZE);
;;;388                        shell->line_curpos = shell->line_position = strlen(shell->line);
;;;389                        shell_handle_history(shell);
;;;390    #endif
;;;391                        continue;
;;;392                    }
;;;393                    else if (ch == 0x44) /* left key */
0000b0  2944              CMP      r1,#0x44
0000b2  d036              BEQ      |L10.290|
;;;394                    {
;;;395                        if (shell->line_curpos)
;;;396                        {
;;;397                            rt_kprintf("\b");
;;;398                            shell->line_curpos --;
;;;399                        }
;;;400    
;;;401                        continue;
;;;402                    }
;;;403                    else if (ch == 0x43) /* right key */
0000b4  2943              CMP      r1,#0x43
0000b6  d040              BEQ      |L10.314|
                  |L10.184|
;;;404                    {
;;;405                        if (shell->line_curpos < shell->line_position)
;;;406                        {
;;;407                            rt_kprintf("%c", shell->line[shell->line_curpos]);
;;;408                            shell->line_curpos ++;
;;;409                        }
;;;410    
;;;411                        continue;
;;;412                    }
;;;413    
;;;414                }
;;;415    
;;;416                /* handle CR key */
;;;417                if (ch == '\r')
0000b8  290d              CMP      r1,#0xd
0000ba  d051              BEQ      |L10.352|
;;;418                {
;;;419                    char next;
;;;420    
;;;421                    if (rt_device_read(shell->device, 0, &next, 1) == 1)
;;;422                        ch = next;
;;;423                    else ch = '\r';
;;;424                }
;;;425                /* handle tab key */
;;;426                else if (ch == '\t')
0000bc  2909              CMP      r1,#9
0000be  d07d              BEQ      |L10.444|
;;;427                {
;;;428                    int i;
;;;429                    /* move the cursor to the beginning of line */
;;;430                    for (i = 0; i < shell->line_curpos; i++)
;;;431                        rt_kprintf("\b");
;;;432    
;;;433                    /* auto complete */
;;;434                    shell_auto_complete(&shell->line[0]);
;;;435                    /* re-calculate position */
;;;436                    shell->line_curpos = shell->line_position = strlen(shell->line);
;;;437    
;;;438                    continue;
;;;439                }
;;;440                /* handle backspace key */
;;;441                else if (ch == 0x7f || ch == 0x08)
0000c0  297f              CMP      r1,#0x7f
0000c2  d07c              BEQ      |L10.446|
0000c4  2908              CMP      r1,#8
0000c6  d07a              BEQ      |L10.446|
0000c8  e05d              B        |L10.390|
                  |L10.202|
0000ca  8c41              LDRH     r1,[r0,#0x22]         ;355
0000cc  2900              CMP      r1,#0                 ;355
0000ce  d0d0              BEQ      |L10.114|
0000d0  1e49              SUBS     r1,r1,#1              ;355
0000d2  b289              UXTH     r1,r1                 ;356
0000d4  8441              STRH     r1,[r0,#0x22]         ;356
0000d6  e00c              B        |L10.242|
                  |L10.216|
0000d8  8c81              LDRH     r1,[r0,#0x24]         ;375
0000da  8c42              LDRH     r2,[r0,#0x22]         ;375
0000dc  460b              MOV      r3,r1                 ;375
0000de  1e49              SUBS     r1,r1,#1              ;375
0000e0  428a              CMP      r2,r1                 ;375
0000e2  da02              BGE      |L10.234|
0000e4  1c52              ADDS     r2,r2,#1              ;375
0000e6  8442              STRH     r2,[r0,#0x22]         ;376
0000e8  e002              B        |L10.240|
                  |L10.234|
0000ea  2b00              CMP      r3,#0                 ;380
0000ec  d0c1              BEQ      |L10.114|
0000ee  8441              STRH     r1,[r0,#0x22]         ;381
                  |L10.240|
0000f0  8c41              LDRH     r1,[r0,#0x22]         ;386
                  |L10.242|
0000f2  2250              MOVS     r2,#0x50              ;364
0000f4  eb010181          ADD      r1,r1,r1,LSL #2       ;364
0000f8  eb001101          ADD      r1,r0,r1,LSL #4       ;364
0000fc  f5007015          ADD      r0,r0,#0x254          ;364
000100  3126              ADDS     r1,r1,#0x26           ;364
000102  f7fffffe          BL       __aeabi_memcpy
000106  6830              LDR      r0,[r6,#0]            ;366  ; shell
000108  f5007015          ADD      r0,r0,#0x254          ;366
00010c  f7fffffe          BL       strlen
000110  4601              MOV      r1,r0                 ;366
000112  6830              LDR      r0,[r6,#0]            ;366  ; shell
000114  f88012a4          STRB     r1,[r0,#0x2a4]        ;366
000118  f88012a5          STRB     r1,[r0,#0x2a5]        ;366
00011c  f7fffffe          BL       shell_handle_history
000120  e11c              B        |L10.860|
                  |L10.290|
000122  f89002a5          LDRB     r0,[r0,#0x2a5]        ;395
000126  2800              CMP      r0,#0                 ;395
000128  d0a3              BEQ      |L10.114|
00012a  a0a3              ADR      r0,|L10.952|
00012c  f7fffffe          BL       rt_kprintf
000130  6830              LDR      r0,[r6,#0]            ;398  ; shell
000132  f89012a5          LDRB     r1,[r0,#0x2a5]        ;398
000136  1e49              SUBS     r1,r1,#1              ;398
000138  e00f              B        |L10.346|
                  |L10.314|
00013a  f89012a5          LDRB     r1,[r0,#0x2a5]        ;405
00013e  f89022a4          LDRB     r2,[r0,#0x2a4]        ;405
000142  4291              CMP      r1,r2                 ;405
000144  d295              BCS      |L10.114|
000146  f5007015          ADD      r0,r0,#0x254          ;405
00014a  5c09              LDRB     r1,[r1,r0]            ;407
00014c  a09b              ADR      r0,|L10.956|
00014e  f7fffffe          BL       rt_kprintf
000152  6830              LDR      r0,[r6,#0]            ;408  ; shell
000154  f89012a5          LDRB     r1,[r0,#0x2a5]        ;408
000158  1c49              ADDS     r1,r1,#1              ;408
                  |L10.346|
00015a  f88012a5          STRB     r1,[r0,#0x2a5]        ;408
00015e  e0fd              B        |L10.860|
                  |L10.352|
000160  f8d002a8          LDR      r0,[r0,#0x2a8]        ;421
000164  2301              MOVS     r3,#1                 ;421
000166  aa01              ADD      r2,sp,#4              ;421
000168  2100              MOVS     r1,#0                 ;421
00016a  f7fffffe          BL       rt_device_read
00016e  2801              CMP      r0,#1                 ;421
000170  d003              BEQ      |L10.378|
000172  200d              MOVS     r0,#0xd               ;423
000174  f88d0000          STRB     r0,[sp,#0]            ;423
000178  e0a2              B        |L10.704|
                  |L10.378|
00017a  f89d0004          LDRB     r0,[sp,#4]            ;422
00017e  f88d0000          STRB     r0,[sp,#0]            ;422
;;;442                {
;;;443                    /* note that shell->line_curpos >= 0 */
;;;444                    if (shell->line_curpos == 0)
;;;445                        continue;
;;;446    
;;;447                    shell->line_position--;
;;;448                    shell->line_curpos--;
;;;449    
;;;450                    if (shell->line_position > shell->line_curpos)
;;;451                    {
;;;452                        int i;
;;;453    
;;;454                        rt_memmove(&shell->line[shell->line_curpos],
;;;455                                   &shell->line[shell->line_curpos + 1],
;;;456                                   shell->line_position - shell->line_curpos);
;;;457                        shell->line[shell->line_position] = 0;
;;;458    
;;;459                        rt_kprintf("\b%s  \b", &shell->line[shell->line_curpos]);
;;;460    
;;;461                        /* move the cursor to the origin position */
;;;462                        for (i = shell->line_curpos; i <= shell->line_position; i++)
;;;463                            rt_kprintf("\b");
;;;464                    }
;;;465                    else
;;;466                    {
;;;467                        rt_kprintf("\b \b");
;;;468                        shell->line[shell->line_position] = 0;
;;;469                    }
;;;470    
;;;471                    continue;
;;;472                }
;;;473    
;;;474                /* handle end of line, break */
;;;475                if (ch == '\r' || ch == '\n')
000182  280d              CMP      r0,#0xd
000184  d07e              BEQ      |L10.644|
                  |L10.390|
000186  f89d2000          LDRB     r2,[sp,#0]
00018a  2a0a              CMP      r2,#0xa
00018c  d07a              BEQ      |L10.644|
;;;476                {
;;;477                    #ifdef FINSH_USING_HISTORY
;;;478                    shell_push_history(shell);
;;;479                    #endif
;;;480    
;;;481                    #ifdef FINSH_USING_MSH
;;;482                    if (msh_is_used() == RT_TRUE)
;;;483                    {
;;;484                        rt_kprintf("\n");
;;;485                        msh_exec(shell->line, shell->line_position);
;;;486                    }
;;;487                    else
;;;488                    #endif
;;;489                    {
;;;490                    #ifndef FINSH_USING_MSH_ONLY                
;;;491                        /* add ';' and run the command line */
;;;492                        shell->line[shell->line_position] = ';';
;;;493    
;;;494                        if (shell->line_position != 0) finsh_run_line(&shell->parser, shell->line);
;;;495                        else rt_kprintf("\n");
;;;496                    #endif                  
;;;497                    }
;;;498    
;;;499                    rt_kprintf(FINSH_PROMPT);
;;;500                    memset(shell->line, 0, sizeof(shell->line));
;;;501                    shell->line_curpos = shell->line_position = 0;
;;;502                    break;
;;;503                }
;;;504    
;;;505                /* it's a large line, discard it */
;;;506                if (shell->line_position >= FINSH_CMD_SIZE)
00018e  6830              LDR      r0,[r6,#0]  ; shell
000190  f89012a4          LDRB     r1,[r0,#0x2a4]
000194  2950              CMP      r1,#0x50
000196  d301              BCC      |L10.412|
;;;507                    shell->line_position = 0;
000198  f88052a4          STRB     r5,[r0,#0x2a4]
                  |L10.412|
;;;508    
;;;509                /* normal character */
;;;510                if (shell->line_curpos < shell->line_position)
00019c  f89032a5          LDRB     r3,[r0,#0x2a5]
0001a0  f89012a4          LDRB     r1,[r0,#0x2a4]
0001a4  428b              CMP      r3,r1
0001a6  d26e              BCS      |L10.646|
;;;511                {
;;;512                    int i;
;;;513    
;;;514                    rt_memmove(&shell->line[shell->line_curpos + 1],
0001a8  1aca              SUBS     r2,r1,r3
0001aa  f5007115          ADD      r1,r0,#0x254
0001ae  f2002055          ADD      r0,r0,#0x255
0001b2  4419              ADD      r1,r1,r3
0001b4  4418              ADD      r0,r0,r3
0001b6  f7fffffe          BL       rt_memmove
;;;515                               &shell->line[shell->line_curpos],
;;;516                               shell->line_position - shell->line_curpos);
;;;517                    shell->line[shell->line_curpos] = ch;
0001ba  e001              B        |L10.448|
                  |L10.444|
0001bc  e019              B        |L10.498|
                  |L10.446|
0001be  e03c              B        |L10.570|
                  |L10.448|
0001c0  6830              LDR      r0,[r6,#0]  ; shell
0001c2  f89d1000          LDRB     r1,[sp,#0]
0001c6  f89022a5          LDRB     r2,[r0,#0x2a5]
0001ca  f5007015          ADD      r0,r0,#0x254
0001ce  5411              STRB     r1,[r2,r0]
;;;518                    if (shell->echo_mode)
0001d0  6830              LDR      r0,[r6,#0]  ; shell
0001d2  f8901021          LDRB     r1,[r0,#0x21]
0001d6  07c9              LSLS     r1,r1,#31
0001d8  d007              BEQ      |L10.490|
;;;519                        rt_kprintf("%s", &shell->line[shell->line_curpos]);
0001da  f89012a5          LDRB     r1,[r0,#0x2a5]
0001de  f5007015          ADD      r0,r0,#0x254
0001e2  4401              ADD      r1,r1,r0
0001e4  a076              ADR      r0,|L10.960|
0001e6  f7fffffe          BL       rt_kprintf
                  |L10.490|
;;;520    
;;;521                    /* move the cursor to new position */
;;;522                    for (i = shell->line_curpos; i < shell->line_position; i++)
0001ea  6830              LDR      r0,[r6,#0]  ; shell
0001ec  f89042a5          LDRB     r4,[r0,#0x2a5]
0001f0  e092              B        |L10.792|
                  |L10.498|
0001f2  2400              MOVS     r4,#0                 ;430
0001f4  e003              B        |L10.510|
                  |L10.502|
0001f6  a070              ADR      r0,|L10.952|
0001f8  f7fffffe          BL       rt_kprintf
0001fc  1c64              ADDS     r4,r4,#1              ;431
                  |L10.510|
0001fe  6830              LDR      r0,[r6,#0]            ;430  ; shell
000200  f89002a5          LDRB     r0,[r0,#0x2a5]        ;430
000204  42a0              CMP      r0,r4                 ;430
000206  dcf6              BGT      |L10.502|
000208  6834              LDR      r4,[r6,#0]            ;430  ; shell
00020a  a06e              ADR      r0,|L10.964|
00020c  f5047415          ADD      r4,r4,#0x254          ;430
000210  f7fffffe          BL       rt_kprintf
000214  4620              MOV      r0,r4                 ;430
000216  f7fffffe          BL       list_prefix
00021a  4622              MOV      r2,r4                 ;430
00021c  a16a              ADR      r1,|L10.968|
00021e  a06c              ADR      r0,|L10.976|
000220  f7fffffe          BL       rt_kprintf
000224  6830              LDR      r0,[r6,#0]            ;436  ; shell
000226  f5007015          ADD      r0,r0,#0x254          ;436
00022a  f7fffffe          BL       strlen
00022e  6831              LDR      r1,[r6,#0]            ;436  ; shell
000230  f88102a4          STRB     r0,[r1,#0x2a4]        ;436
000234  f88102a5          STRB     r0,[r1,#0x2a5]        ;436
000238  e090              B        |L10.860|
                  |L10.570|
00023a  f89022a5          LDRB     r2,[r0,#0x2a5]        ;444
00023e  2a00              CMP      r2,#0                 ;444
000240  d03d              BEQ      |L10.702|
000242  f89012a4          LDRB     r1,[r0,#0x2a4]        ;447
000246  1e52              SUBS     r2,r2,#1              ;447
000248  1e49              SUBS     r1,r1,#1              ;447
00024a  b2c9              UXTB     r1,r1                 ;447
00024c  b2d3              UXTB     r3,r2                 ;448
00024e  f88012a4          STRB     r1,[r0,#0x2a4]        ;447
000252  f88032a5          STRB     r3,[r0,#0x2a5]        ;448
000256  4299              CMP      r1,r3                 ;450
000258  d928              BLS      |L10.684|
00025a  1aca              SUBS     r2,r1,r3              ;454
00025c  f2002155          ADD      r1,r0,#0x255          ;454
000260  f5007015          ADD      r0,r0,#0x254          ;454
000264  4419              ADD      r1,r1,r3              ;454
000266  4418              ADD      r0,r0,r3              ;454
000268  f7fffffe          BL       rt_memmove
00026c  6830              LDR      r0,[r6,#0]            ;457  ; shell
00026e  f89012a4          LDRB     r1,[r0,#0x2a4]        ;457
000272  f5007015          ADD      r0,r0,#0x254          ;457
000276  540d              STRB     r5,[r1,r0]            ;457
000278  6830              LDR      r0,[r6,#0]            ;459  ; shell
00027a  f89012a5          LDRB     r1,[r0,#0x2a5]        ;459
00027e  f5007015          ADD      r0,r0,#0x254          ;459
000282  e001              B        |L10.648|
                  |L10.644|
000284  e01c              B        |L10.704|
                  |L10.646|
000286  e04d              B        |L10.804|
                  |L10.648|
000288  4401              ADD      r1,r1,r0              ;459
00028a  a053              ADR      r0,|L10.984|
00028c  f7fffffe          BL       rt_kprintf
000290  6830              LDR      r0,[r6,#0]            ;462  ; shell
000292  f89042a5          LDRB     r4,[r0,#0x2a5]        ;462
000296  e003              B        |L10.672|
                  |L10.664|
000298  a047              ADR      r0,|L10.952|
00029a  f7fffffe          BL       rt_kprintf
00029e  1c64              ADDS     r4,r4,#1              ;463
                  |L10.672|
0002a0  6830              LDR      r0,[r6,#0]            ;462  ; shell
0002a2  f89002a4          LDRB     r0,[r0,#0x2a4]        ;462
0002a6  42a0              CMP      r0,r4                 ;462
0002a8  db58              BLT      |L10.860|
0002aa  e7f5              B        |L10.664|
                  |L10.684|
0002ac  a04c              ADR      r0,|L10.992|
0002ae  f7fffffe          BL       rt_kprintf
0002b2  6830              LDR      r0,[r6,#0]            ;468  ; shell
0002b4  f89012a4          LDRB     r1,[r0,#0x2a4]        ;468
0002b8  f5007015          ADD      r0,r0,#0x254          ;468
0002bc  540d              STRB     r5,[r1,r0]            ;468
                  |L10.702|
0002be  e04d              B        |L10.860|
                  |L10.704|
0002c0  6830              LDR      r0,[r6,#0]            ;478  ; shell
0002c2  f7fffffe          BL       shell_push_history
0002c6  6830              LDR      r0,[r6,#0]            ;492  ; shell
0002c8  213b              MOVS     r1,#0x3b              ;492
0002ca  f89022a4          LDRB     r2,[r0,#0x2a4]        ;492
0002ce  f5007015          ADD      r0,r0,#0x254          ;492
0002d2  5411              STRB     r1,[r2,r0]            ;492
0002d4  6830              LDR      r0,[r6,#0]            ;494  ; shell
0002d6  f89012a4          LDRB     r1,[r0,#0x2a4]        ;494
0002da  b131              CBZ      r1,|L10.746|
0002dc  f5007115          ADD      r1,r0,#0x254          ;494
0002e0  f50070dc          ADD      r0,r0,#0x1b8          ;494
0002e4  f7fffffe          BL       finsh_run_line
0002e8  e002              B        |L10.752|
                  |L10.746|
0002ea  a031              ADR      r0,|L10.944|
0002ec  f7fffffe          BL       rt_kprintf
                  |L10.752|
0002f0  a021              ADR      r0,|L10.888|
0002f2  f7fffffe          BL       rt_kprintf
0002f6  6830              LDR      r0,[r6,#0]            ;500  ; shell
0002f8  2150              MOVS     r1,#0x50              ;500
0002fa  4634              MOV      r4,r6                 ;500
0002fc  f5007015          ADD      r0,r0,#0x254          ;500
000300  f7fffffe          BL       __aeabi_memclr4
000304  6820              LDR      r0,[r4,#0]            ;501  ; shell
000306  f88052a4          STRB     r5,[r0,#0x2a4]        ;501
00030a  f88052a5          STRB     r5,[r0,#0x2a5]        ;501
                  |L10.782|
00030e  e6aa              B        |L10.102|
                  |L10.784|
;;;523                        rt_kprintf("\b");
000310  a029              ADR      r0,|L10.952|
000312  f7fffffe          BL       rt_kprintf
000316  1c64              ADDS     r4,r4,#1
                  |L10.792|
000318  6830              LDR      r0,[r6,#0]            ;522  ; shell
00031a  f89002a4          LDRB     r0,[r0,#0x2a4]        ;522
00031e  42a0              CMP      r0,r4                 ;522
000320  dcf6              BGT      |L10.784|
000322  e007              B        |L10.820|
                  |L10.804|
000324  f5007015          ADD      r0,r0,#0x254          ;522
;;;524                }
;;;525                else
;;;526                {
;;;527                    shell->line[shell->line_position] = ch;
000328  540a              STRB     r2,[r1,r0]
;;;528                    rt_kprintf("%c", ch);
00032a  f89d1000          LDRB     r1,[sp,#0]
00032e  a023              ADR      r0,|L10.956|
000330  f7fffffe          BL       rt_kprintf
                  |L10.820|
;;;529                }
;;;530    
;;;531                ch = 0;
000334  f88d5000          STRB     r5,[sp,#0]
;;;532                shell->line_position ++;
000338  6830              LDR      r0,[r6,#0]  ; shell
00033a  f89012a4          LDRB     r1,[r0,#0x2a4]
00033e  1c49              ADDS     r1,r1,#1
000340  b2c9              UXTB     r1,r1
000342  f88012a4          STRB     r1,[r0,#0x2a4]
;;;533                shell->line_curpos++;
000346  f89022a5          LDRB     r2,[r0,#0x2a5]
00034a  1c52              ADDS     r2,r2,#1
00034c  f88022a5          STRB     r2,[r0,#0x2a5]
;;;534    			if (shell->line_position >= 80) 
000350  2950              CMP      r1,#0x50
000352  d303              BCC      |L10.860|
;;;535    			{
;;;536    				/* clear command line */
;;;537    				shell->line_position = 0;
000354  f88052a4          STRB     r5,[r0,#0x2a4]
;;;538    				shell->line_curpos = 0;
000358  f88052a5          STRB     r5,[r0,#0x2a5]
                  |L10.860|
00035c  6830              LDR      r0,[r6,#0]            ;323  ; shell
00035e  2301              MOVS     r3,#1                 ;323
000360  466a              MOV      r2,sp                 ;323
000362  f8d002a8          LDR      r0,[r0,#0x2a8]        ;323
000366  2100              MOVS     r1,#0                 ;323
000368  f7fffffe          BL       rt_device_read
00036c  2801              CMP      r0,#1                 ;323
00036e  d1ce              BNE      |L10.782|
000370  e680              B        |L10.116|
;;;539    			}
;;;540            } /* end of device read */
;;;541        }
;;;542    }
;;;543    
                          ENDP

000372  0000              DCW      0x0000
                  |L10.884|
                          DCD      ||.data||
                  |L10.888|
000378  66696e73          DCB      "finsh>>",0
00037c  683e3e00
                  |L10.896|
                          DCD      ||.constdata||+0x4d
                  |L10.900|
000384  7368656c          DCB      "shell->device",0
000388  6c2d3e64
00038c  65766963
000390  6500    
000392  00                DCB      0
000393  00                DCB      0
                  |L10.916|
000394  28257329          DCB      "(%s) assert failed at %s:%d "
000398  20617373
00039c  65727420
0003a0  6661696c
0003a4  65642061
0003a8  74202573
0003ac  3a256420
                  |L10.944|
0003b0  0a00              DCB      "\n",0
0003b2  00                DCB      0
0003b3  00                DCB      0
                  |L10.948|
                          DCD      finsh_rx_ind
                  |L10.952|
0003b8  0800              DCB      "\b",0
0003ba  00                DCB      0
0003bb  00                DCB      0
                  |L10.956|
0003bc  256300            DCB      "%c",0
0003bf  00                DCB      0
                  |L10.960|
0003c0  257300            DCB      "%s",0
0003c3  00                DCB      0
                  |L10.964|
0003c4  0a00              DCB      "\n",0
0003c6  00                DCB      0
0003c7  00                DCB      0
                  |L10.968|
0003c8  66696e73          DCB      "finsh>>",0
0003cc  683e3e00
                  |L10.976|
0003d0  25732573          DCB      "%s%s",0
0003d4  00      
0003d5  00                DCB      0
0003d6  00                DCB      0
0003d7  00                DCB      0
                  |L10.984|
0003d8  08257320          DCB      "\b%s  \b",0
0003dc  200800  
0003df  00                DCB      0
                  |L10.992|
0003e0  08200800          DCB      "\b \b",0

                          AREA ||i.shell_handle_history||, CODE, READONLY, ALIGN=2

                  shell_handle_history PROC
;;;238    #ifdef FINSH_USING_HISTORY
;;;239    static rt_bool_t shell_handle_history(struct finsh_shell* shell)
000000  b510              PUSH     {r4,lr}
;;;240    {
000002  4604              MOV      r4,r0
;;;241    #if defined(_WIN32)
;;;242        int i;
;;;243        rt_kprintf("\r");
;;;244    
;;;245        for(i=0; i<= 60; i++)
;;;246            putchar(' ');
;;;247        rt_kprintf("\r");
;;;248    
;;;249    #else
;;;250        rt_kprintf("\033[2K\r");
000004  a005              ADR      r0,|L11.28|
000006  f7fffffe          BL       rt_kprintf
;;;251    #endif
;;;252        rt_kprintf("%s%s", FINSH_PROMPT, shell->line);
00000a  4906              LDR      r1,|L11.36|
00000c  f5047215          ADD      r2,r4,#0x254
000010  f1010008          ADD      r0,r1,#8
000014  f7fffffe          BL       rt_kprintf
;;;253        return RT_FALSE;
000018  2000              MOVS     r0,#0
;;;254    }
00001a  bd10              POP      {r4,pc}
;;;255    
                          ENDP

                  |L11.28|
00001c  1b5b324b          DCB      27,"[2K\r",0
000020  0d00    
000022  00                DCB      0
000023  00                DCB      0
                  |L11.36|
                          DCD      ||i.finsh_thread_entry||+0x3c8

                          AREA ||i.shell_push_history||, CODE, READONLY, ALIGN=1

                  shell_push_history PROC
;;;255    
;;;256    static void shell_push_history(struct finsh_shell* shell)
000000  b570              PUSH     {r4-r6,lr}
;;;257    {
000002  4604              MOV      r4,r0
;;;258        if (shell->line_position != 0)
000004  f89002a4          LDRB     r0,[r0,#0x2a4]
000008  b3c8              CBZ      r0,|L12.126|
;;;259        {
;;;260            /* push history */
;;;261            if (shell->history_count >= FINSH_HISTORY_LINES)
00000a  8ca0              LDRH     r0,[r4,#0x24]
;;;262            {
;;;263                /* move history */
;;;264                int index;
;;;265                for (index = 0; index < FINSH_HISTORY_LINES - 1; index ++)
;;;266                {
;;;267                    memcpy(&shell->cmd_history[index][0],
;;;268                        &shell->cmd_history[index + 1][0], FINSH_CMD_SIZE);
;;;269                }
;;;270                memset(&shell->cmd_history[index][0], 0, FINSH_CMD_SIZE);
;;;271                memcpy(&shell->cmd_history[index][0], shell->line, shell->line_position);
00000c  f5047615          ADD      r6,r4,#0x254
000010  2805              CMP      r0,#5                 ;261
000012  d31e              BCC      |L12.82|
000014  2500              MOVS     r5,#0                 ;265
                  |L12.22|
000016  eb050085          ADD      r0,r5,r5,LSL #2       ;267
00001a  eb041000          ADD      r0,r4,r0,LSL #4       ;267
00001e  f1000176          ADD      r1,r0,#0x76           ;267
000022  2250              MOVS     r2,#0x50              ;267
000024  3026              ADDS     r0,r0,#0x26           ;267
000026  f7fffffe          BL       __aeabi_memcpy
00002a  1c6d              ADDS     r5,r5,#1              ;267
00002c  2d04              CMP      r5,#4                 ;265
00002e  dbf2              BLT      |L12.22|
000030  eb050085          ADD      r0,r5,r5,LSL #2       ;270
000034  eb041000          ADD      r0,r4,r0,LSL #4       ;270
000038  3026              ADDS     r0,r0,#0x26           ;270
00003a  4605              MOV      r5,r0                 ;270
00003c  2150              MOVS     r1,#0x50              ;270
00003e  f7fffffe          BL       __aeabi_memclr
000042  f89422a4          LDRB     r2,[r4,#0x2a4]
000046  4628              MOV      r0,r5
000048  4631              MOV      r1,r6
00004a  f7fffffe          BL       __aeabi_memcpy
;;;272    
;;;273                /* it's the maximum history */
;;;274                shell->history_count = FINSH_HISTORY_LINES;
00004e  2005              MOVS     r0,#5
;;;275            }
000050  e014              B        |L12.124|
                  |L12.82|
;;;276            else
;;;277            {
;;;278                memset(&shell->cmd_history[shell->history_count][0], 0, FINSH_CMD_SIZE);
000052  eb000080          ADD      r0,r0,r0,LSL #2
000056  eb041000          ADD      r0,r4,r0,LSL #4
00005a  2150              MOVS     r1,#0x50
00005c  3026              ADDS     r0,r0,#0x26
00005e  f7fffffe          BL       __aeabi_memclr
;;;279                memcpy(&shell->cmd_history[shell->history_count][0], shell->line, shell->line_position);
000062  8ca0              LDRH     r0,[r4,#0x24]
000064  f89422a4          LDRB     r2,[r4,#0x2a4]
000068  eb000080          ADD      r0,r0,r0,LSL #2
00006c  eb041000          ADD      r0,r4,r0,LSL #4
000070  4631              MOV      r1,r6
000072  3026              ADDS     r0,r0,#0x26
000074  f7fffffe          BL       __aeabi_memcpy
;;;280    
;;;281                /* increase count and set current history position */
;;;282                shell->history_count ++;
000078  8ca0              LDRH     r0,[r4,#0x24]
00007a  1c40              ADDS     r0,r0,#1
                  |L12.124|
00007c  84a0              STRH     r0,[r4,#0x24]
                  |L12.126|
;;;283            }
;;;284        }
;;;285        shell->current_history = shell->history_count;
00007e  8ca0              LDRH     r0,[r4,#0x24]
000080  8460              STRH     r0,[r4,#0x22]
;;;286    }
000082  bd70              POP      {r4-r6,pc}
;;;287    #endif
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  finsh_thread
                          %        128
                  finsh_thread_stack
                          %        2048

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  66696e73          DCB      0x66,0x69,0x6e,0x73
000004  685f7278          DCB      0x68,0x5f,0x72,0x78
000008  5f696e64          DCB      0x5f,0x69,0x6e,0x64
00000c  00                DCB      0x00
                  |symbol_number.44|
00000d  66696e            DCB      0x66,0x69,0x6e
000010  73685f73          DCB      0x73,0x68,0x5f,0x73
000014  65745f64          DCB      0x65,0x74,0x5f,0x64
000018  65766963          DCB      0x65,0x76,0x69,0x63
00001c  6500              DCB      0x65,0x00
                  |symbol_number.45|
00001e  6669              DCB      0x66,0x69
000020  6e73685f          DCB      0x6e,0x73,0x68,0x5f
000024  6765745f          DCB      0x67,0x65,0x74,0x5f
000028  64657669          DCB      0x64,0x65,0x76,0x69
00002c  636500            DCB      0x63,0x65,0x00
                  |symbol_number.46|
00002f  66                DCB      0x66
000030  696e7368          DCB      0x69,0x6e,0x73,0x68
000034  5f736574          DCB      0x5f,0x73,0x65,0x74
000038  5f656368          DCB      0x5f,0x65,0x63,0x68
00003c  6f00              DCB      0x6f,0x00
                  |symbol_number.47|
00003e  6669              DCB      0x66,0x69
000040  6e73685f          DCB      0x6e,0x73,0x68,0x5f
000044  6765745f          DCB      0x67,0x65,0x74,0x5f
000048  6563686f          DCB      0x65,0x63,0x68,0x6f
00004c  00                DCB      0x00
                  |symbol_number.48|
00004d  66696e            DCB      0x66,0x69,0x6e
000050  73685f74          DCB      0x73,0x68,0x5f,0x74
000054  68726561          DCB      0x68,0x72,0x65,0x61
000058  645f656e          DCB      0x64,0x5f,0x65,0x6e
00005c  74727900          DCB      0x74,0x72,0x79,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  shell
                          DCD      0x00000000
