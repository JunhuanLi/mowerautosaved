; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f4xx_cryp_tdes.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_cryp_tdes.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\stm32f4xx_cryp_tdes.crf ..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_tdes.c]
                          THUMB

                          AREA ||i.CRYP_TDES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_CBC PROC
;;;197      */
;;;198    ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;199                              uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;200    {
000004  b08f              SUB      sp,sp,#0x3c
;;;201      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;202      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;203      CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
;;;204      __IO uint32_t counter = 0;
000006  f04f0a00          MOV      r10,#0
00000a  e9ddb51c          LDRD     r11,r5,[sp,#0x70]     ;200
00000e  461c              MOV      r4,r3                 ;200
;;;205      uint32_t busystatus = 0;
;;;206      ErrorStatus status = SUCCESS;
000010  2701              MOVS     r7,#1
;;;207      uint32_t keyaddr    = (uint32_t)Key;
000012  4688              MOV      r8,r1
;;;208      uint32_t inputaddr  = (uint32_t)Input;
;;;209      uint32_t outputaddr = (uint32_t)Output;
;;;210      uint32_t ivaddr     = (uint32_t)InitVectors;
000014  4691              MOV      r9,r2
;;;211      uint32_t i = 0;
000016  4656              MOV      r6,r10
;;;212    
;;;213      /* Crypto structures initialisation*/
;;;214      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cda028          STR      r10,[sp,#0x28]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;215    
;;;216      /* Crypto Init for Encryption process */
;;;217      if(Mode == MODE_ENCRYPT) /* TDES encryption */
000022  980f              LDR      r0,[sp,#0x3c]
000024  2801              CMP      r0,#1
000026  d037              BEQ      |L1.152|
;;;218      {
;;;219        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;220      }
;;;221      else
;;;222      {
;;;223        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000028  2004              MOVS     r0,#4
00002a  f8ad0020          STRH     r0,[sp,#0x20]
                  |L1.46|
;;;224      }
;;;225      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
00002e  2008              MOVS     r0,#8
000030  f8ad0022          STRH     r0,[sp,#0x22]
;;;226      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000034  2080              MOVS     r0,#0x80
000036  f8ad0024          STRH     r0,[sp,#0x24]
;;;227    
;;;228      CRYP_Init(&TDES_CRYP_InitStructure);
00003a  a808              ADD      r0,sp,#0x20
00003c  f7fffffe          BL       CRYP_Init
;;;229    
;;;230      /* Key Initialisation */
;;;231      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000040  f8d80000          LDR      r0,[r8,#0]
000044  ba00              REV      r0,r0
;;;232      keyaddr+=4;
;;;233      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000046  9002              STR      r0,[sp,#8]
000048  f8d81004          LDR      r1,[r8,#4]
00004c  ba09              REV      r1,r1
;;;234      keyaddr+=4;
;;;235      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004e  9103              STR      r1,[sp,#0xc]
000050  f8d81008          LDR      r1,[r8,#8]
000054  ba09              REV      r1,r1
;;;236      keyaddr+=4;
;;;237      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000056  9104              STR      r1,[sp,#0x10]
000058  f8d8100c          LDR      r1,[r8,#0xc]
00005c  ba09              REV      r1,r1
;;;238      keyaddr+=4;
;;;239      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00005e  9105              STR      r1,[sp,#0x14]
000060  f8d81010          LDR      r1,[r8,#0x10]
000064  ba09              REV      r1,r1
;;;240      keyaddr+=4;
;;;241      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000066  9106              STR      r1,[sp,#0x18]
000068  f8d80014          LDR      r0,[r8,#0x14]
00006c  ba00              REV      r0,r0
;;;242      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
00006e  9007              STR      r0,[sp,#0x1c]
000070  4668              MOV      r0,sp
000072  f7fffffe          BL       CRYP_KeyInit
;;;243    
;;;244      /* Initialization Vectors */
;;;245      TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000076  f8d90000          LDR      r0,[r9,#0]
00007a  ba00              REV      r0,r0
;;;246      ivaddr+=4;
;;;247      TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
00007c  900b              STR      r0,[sp,#0x2c]
00007e  f8d90004          LDR      r0,[r9,#4]
000082  ba00              REV      r0,r0
;;;248      CRYP_IVInit(&TDES_CRYP_IVInitStructure);
000084  900c              STR      r0,[sp,#0x30]
000086  a80b              ADD      r0,sp,#0x2c
000088  f7fffffe          BL       CRYP_IVInit
;;;249    
;;;250      /* Flush IN/OUT FIFO */
;;;251      CRYP_FIFOFlush();
00008c  f7fffffe          BL       CRYP_FIFOFlush
;;;252    
;;;253      /* Enable Crypto processor */
;;;254      CRYP_Cmd(ENABLE);
000090  2001              MOVS     r0,#1
000092  f7fffffe          BL       CRYP_Cmd
;;;255    
;;;256      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
000096  e024              B        |L1.226|
                  |L1.152|
000098  f8ada020          STRH     r10,[sp,#0x20]        ;219
00009c  e7c7              B        |L1.46|
                  |L1.158|
;;;257      {
;;;258        /* Write the Input block in the Input FIFO */
;;;259        CRYP_DataIn(*(uint32_t*)(inputaddr));
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       CRYP_DataIn
;;;260        inputaddr+=4;
;;;261        CRYP_DataIn(*(uint32_t*)(inputaddr));
0000a4  f8540f04          LDR      r0,[r4,#4]!
0000a8  f7fffffe          BL       CRYP_DataIn
;;;262        inputaddr+=4;
;;;263    
;;;264        /* Wait until the complete message has been processed */
;;;265        counter = 0;
;;;266        do
;;;267        {
;;;268          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;269          counter++;
;;;270        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
0000ac  f44f3880          MOV      r8,#0x10000
0000b0  1d24              ADDS     r4,r4,#4
0000b2  f8cda028          STR      r10,[sp,#0x28]
                  |L1.182|
0000b6  2010              MOVS     r0,#0x10              ;268
0000b8  f7fffffe          BL       CRYP_GetFlagStatus
0000bc  990a              LDR      r1,[sp,#0x28]         ;269
0000be  1c49              ADDS     r1,r1,#1              ;269
0000c0  910a              STR      r1,[sp,#0x28]
0000c2  4541              CMP      r1,r8
0000c4  d002              BEQ      |L1.204|
0000c6  2800              CMP      r0,#0
0000c8  d1f5              BNE      |L1.182|
0000ca  e002              B        |L1.210|
                  |L1.204|
;;;271    
;;;272        if (busystatus != RESET)
0000cc  b108              CBZ      r0,|L1.210|
;;;273       {
;;;274           status = ERROR;
0000ce  2700              MOVS     r7,#0
0000d0  e006              B        |L1.224|
                  |L1.210|
;;;275        }
;;;276        else
;;;277        {
;;;278    
;;;279          /* Read the Output block from the Output FIFO */
;;;280          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000d2  f7fffffe          BL       CRYP_DataOut
;;;281          outputaddr+=4;
;;;282          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000d6  6028              STR      r0,[r5,#0]
0000d8  f7fffffe          BL       CRYP_DataOut
0000dc  6068              STR      r0,[r5,#4]
0000de  3508              ADDS     r5,r5,#8
                  |L1.224|
0000e0  3608              ADDS     r6,r6,#8
                  |L1.226|
0000e2  455e              CMP      r6,r11                ;256
0000e4  d201              BCS      |L1.234|
0000e6  2f00              CMP      r7,#0                 ;256
0000e8  d1d9              BNE      |L1.158|
                  |L1.234|
;;;283          outputaddr+=4;
;;;284        }
;;;285      }
;;;286    
;;;287      /* Disable Crypto */
;;;288      CRYP_Cmd(DISABLE);
0000ea  2000              MOVS     r0,#0
0000ec  f7fffffe          BL       CRYP_Cmd
;;;289    
;;;290      return status; 
;;;291    }
0000f0  b013              ADD      sp,sp,#0x4c
0000f2  4638              MOV      r0,r7                 ;290
0000f4  e8bd8ff0          POP      {r4-r11,pc}
;;;292    /**
                          ENDP


                          AREA ||i.CRYP_TDES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_ECB PROC
;;;95       */
;;;96     ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;97                               uint32_t Ilength, uint8_t *Output)
;;;98     {
000004  b08b              SUB      sp,sp,#0x2c
;;;99       CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;100      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;101      __IO uint32_t counter = 0;
000006  f04f0900          MOV      r9,#0
00000a  4683              MOV      r11,r0                ;98
00000c  9d14              LDR      r5,[sp,#0x50]
00000e  469a              MOV      r10,r3                ;98
000010  4614              MOV      r4,r2                 ;98
;;;102      uint32_t busystatus = 0;
;;;103      ErrorStatus status = SUCCESS;
000012  2701              MOVS     r7,#1
;;;104      uint32_t keyaddr    = (uint32_t)Key;
000014  4688              MOV      r8,r1
;;;105      uint32_t inputaddr  = (uint32_t)Input;
;;;106      uint32_t outputaddr = (uint32_t)Output;
;;;107      uint32_t i = 0;
000016  464e              MOV      r6,r9
;;;108    
;;;109      /* Crypto structures initialisation*/
;;;110      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cd9028          STR      r9,[sp,#0x28]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;111    
;;;112      /* Crypto Init for Encryption process */
;;;113      if(Mode == MODE_ENCRYPT) /* TDES encryption */
000022  f1bb0f01          CMP      r11,#1
000026  d02b              BEQ      |L2.128|
;;;114      {
;;;115         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;116      }
;;;117      else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
;;;118      {
;;;119         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000028  2004              MOVS     r0,#4
00002a  f8ad0020          STRH     r0,[sp,#0x20]
                  |L2.46|
;;;120      }
;;;121    
;;;122      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
;;;123      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00002e  2080              MOVS     r0,#0x80
000030  f8ad0024          STRH     r0,[sp,#0x24]
000034  f8ad9022          STRH     r9,[sp,#0x22]         ;122
;;;124      CRYP_Init(&TDES_CRYP_InitStructure);
000038  a808              ADD      r0,sp,#0x20
00003a  f7fffffe          BL       CRYP_Init
;;;125    
;;;126      /* Key Initialisation */
;;;127      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003e  f8d80000          LDR      r0,[r8,#0]
000042  ba00              REV      r0,r0
;;;128      keyaddr+=4;
;;;129      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000044  9002              STR      r0,[sp,#8]
000046  f8d81004          LDR      r1,[r8,#4]
00004a  ba09              REV      r1,r1
;;;130      keyaddr+=4;
;;;131      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004c  9103              STR      r1,[sp,#0xc]
00004e  f8d81008          LDR      r1,[r8,#8]
000052  ba09              REV      r1,r1
;;;132      keyaddr+=4;
;;;133      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000054  9104              STR      r1,[sp,#0x10]
000056  f8d8100c          LDR      r1,[r8,#0xc]
00005a  ba09              REV      r1,r1
;;;134      keyaddr+=4;
;;;135      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00005c  9105              STR      r1,[sp,#0x14]
00005e  f8d81010          LDR      r1,[r8,#0x10]
000062  ba09              REV      r1,r1
;;;136      keyaddr+=4;
;;;137      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000064  9106              STR      r1,[sp,#0x18]
000066  f8d80014          LDR      r0,[r8,#0x14]
00006a  ba00              REV      r0,r0
;;;138      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
00006c  9007              STR      r0,[sp,#0x1c]
00006e  4668              MOV      r0,sp
000070  f7fffffe          BL       CRYP_KeyInit
;;;139    
;;;140      /* Flush IN/OUT FIFO */
;;;141      CRYP_FIFOFlush();
000074  f7fffffe          BL       CRYP_FIFOFlush
;;;142    
;;;143      /* Enable Crypto processor */
;;;144      CRYP_Cmd(ENABLE);
000078  2001              MOVS     r0,#1
00007a  f7fffffe          BL       CRYP_Cmd
;;;145    
;;;146      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
00007e  e024              B        |L2.202|
                  |L2.128|
000080  f8ad9020          STRH     r9,[sp,#0x20]         ;115
000084  e7d3              B        |L2.46|
                  |L2.134|
;;;147      {
;;;148        /* Write the Input block in the Input FIFO */
;;;149        CRYP_DataIn(*(uint32_t*)(inputaddr));
000086  6820              LDR      r0,[r4,#0]
000088  f7fffffe          BL       CRYP_DataIn
;;;150        inputaddr+=4;
;;;151        CRYP_DataIn(*(uint32_t*)(inputaddr));
00008c  f8540f04          LDR      r0,[r4,#4]!
000090  f7fffffe          BL       CRYP_DataIn
;;;152        inputaddr+=4;
;;;153    
;;;154        /* Wait until the complete message has been processed */
;;;155        counter = 0;
;;;156        do
;;;157        {
;;;158          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;159          counter++;
;;;160        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
000094  f44f3880          MOV      r8,#0x10000
000098  1d24              ADDS     r4,r4,#4
00009a  f8cd9028          STR      r9,[sp,#0x28]
                  |L2.158|
00009e  2010              MOVS     r0,#0x10              ;158
0000a0  f7fffffe          BL       CRYP_GetFlagStatus
0000a4  990a              LDR      r1,[sp,#0x28]         ;159
0000a6  1c49              ADDS     r1,r1,#1              ;159
0000a8  910a              STR      r1,[sp,#0x28]
0000aa  4541              CMP      r1,r8
0000ac  d002              BEQ      |L2.180|
0000ae  2800              CMP      r0,#0
0000b0  d1f5              BNE      |L2.158|
0000b2  e002              B        |L2.186|
                  |L2.180|
;;;161    
;;;162        if (busystatus != RESET)
0000b4  b108              CBZ      r0,|L2.186|
;;;163        {
;;;164           status = ERROR;
0000b6  2700              MOVS     r7,#0
0000b8  e006              B        |L2.200|
                  |L2.186|
;;;165        }
;;;166        else
;;;167        {
;;;168    
;;;169          /* Read the Output block from the Output FIFO */
;;;170          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000ba  f7fffffe          BL       CRYP_DataOut
;;;171          outputaddr+=4;
;;;172          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000be  6028              STR      r0,[r5,#0]
0000c0  f7fffffe          BL       CRYP_DataOut
0000c4  6068              STR      r0,[r5,#4]
0000c6  3508              ADDS     r5,r5,#8
                  |L2.200|
0000c8  3608              ADDS     r6,r6,#8
                  |L2.202|
0000ca  4556              CMP      r6,r10                ;146
0000cc  d201              BCS      |L2.210|
0000ce  2f00              CMP      r7,#0                 ;146
0000d0  d1d9              BNE      |L2.134|
                  |L2.210|
;;;173          outputaddr+=4;
;;;174        }
;;;175      }
;;;176    
;;;177      /* Disable Crypto */
;;;178      CRYP_Cmd(DISABLE);
0000d2  2000              MOVS     r0,#0
0000d4  f7fffffe          BL       CRYP_Cmd
;;;179    
;;;180      return status; 
;;;181    }
0000d8  b00b              ADD      sp,sp,#0x2c
0000da  4638              MOV      r0,r7                 ;180
0000dc  e8bd8ff0          POP      {r4-r11,pc}
;;;182    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_cryp_tdes.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH|
#line 128
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
