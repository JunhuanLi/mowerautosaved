; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f4xx_flash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_flash.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\stm32f4xx_flash.crf ..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_flash.c]
                          THUMB

                          AREA ||i.FLASH_ClearFlag||, CODE, READONLY, ALIGN=2

                  FLASH_ClearFlag PROC
;;;963      */
;;;964    void FLASH_ClearFlag(uint32_t FLASH_FLAG)
000000  b510              PUSH     {r4,lr}
;;;965    {
000002  4604              MOV      r4,r0
;;;966      /* Check the parameters */
;;;967      assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
000004  f03000f3          BICS     r0,r0,#0xf3
000008  d100              BNE      |L1.12|
00000a  b924              CBNZ     r4,|L1.22|
                  |L1.12|
00000c  f24031c7          MOV      r1,#0x3c7
000010  4802              LDR      r0,|L1.28|
000012  f7fffffe          BL       assert_failed
                  |L1.22|
;;;968      
;;;969      /* Clear the flags */
;;;970      FLASH->SR = FLASH_FLAG;
000016  4802              LDR      r0,|L1.32|
000018  6004              STR      r4,[r0,#0]
;;;971    }
00001a  bd10              POP      {r4,pc}
;;;972    
                          ENDP

                  |L1.28|
                          DCD      ||.conststring||
                  |L1.32|
                          DCD      0x40023c0c

                          AREA ||i.FLASH_DataCacheCmd||, CODE, READONLY, ALIGN=2

                  FLASH_DataCacheCmd PROC
;;;223      */
;;;224    void FLASH_DataCacheCmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;225    {
;;;226      /* Check the parameters */
;;;227      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;228      
;;;229      if(NewState != DISABLE)
;;;230      {
;;;231        FLASH->ACR |= FLASH_ACR_DCEN;
000002  4c08              LDR      r4,|L2.36|
000004  b148              CBZ      r0,|L2.26|
000006  2801              CMP      r0,#1                 ;227
000008  d003              BEQ      |L2.18|
00000a  21e3              MOVS     r1,#0xe3              ;227
00000c  4806              LDR      r0,|L2.40|
00000e  f7fffffe          BL       assert_failed
                  |L2.18|
000012  6820              LDR      r0,[r4,#0]
000014  f4406080          ORR      r0,r0,#0x400
000018  e002              B        |L2.32|
                  |L2.26|
;;;232      }
;;;233      else
;;;234      {
;;;235        FLASH->ACR &= (~FLASH_ACR_DCEN);
00001a  6820              LDR      r0,[r4,#0]
00001c  f4206080          BIC      r0,r0,#0x400
                  |L2.32|
000020  6020              STR      r0,[r4,#0]            ;231
;;;236      }
;;;237    }
000022  bd10              POP      {r4,pc}
;;;238    
                          ENDP

                  |L2.36|
                          DCD      0x40023c00
                  |L2.40|
                          DCD      ||.conststring||

                          AREA ||i.FLASH_DataCacheReset||, CODE, READONLY, ALIGN=2

                  FLASH_DataCacheReset PROC
;;;255      */
;;;256    void FLASH_DataCacheReset(void)
000000  4802              LDR      r0,|L3.12|
;;;257    {
;;;258      FLASH->ACR |= FLASH_ACR_DCRST;
000002  6801              LDR      r1,[r0,#0]
000004  f4415180          ORR      r1,r1,#0x1000
000008  6001              STR      r1,[r0,#0]
;;;259    }
00000a  4770              BX       lr
;;;260    
                          ENDP

                  |L3.12|
                          DCD      0x40023c00

                          AREA ||i.FLASH_EraseAllSectors||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllSectors PROC
;;;405      */
;;;406    FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
000000  b570              PUSH     {r4-r6,lr}
;;;407    {
000002  4604              MOV      r4,r0
;;;408      uint32_t tmp_psize = 0x0;
000004  2500              MOVS     r5,#0
;;;409      FLASH_Status status = FLASH_COMPLETE;
;;;410      
;;;411      /* Wait for last operation to be completed */
;;;412      status = FLASH_WaitForLastOperation();
000006  f7fffffe          BL       FLASH_WaitForLastOperation
00000a  4606              MOV      r6,r0
;;;413      assert_param(IS_VOLTAGERANGE(VoltageRange));
00000c  b164              CBZ      r4,|L4.40|
00000e  2c01              CMP      r4,#1
000010  d00d              BEQ      |L4.46|
000012  2c02              CMP      r4,#2
000014  d00e              BEQ      |L4.52|
000016  2c03              CMP      r4,#3
000018  d004              BEQ      |L4.36|
00001a  f240119d          MOV      r1,#0x19d
00001e  4813              LDR      r0,|L4.108|
000020  f7fffffe          BL       assert_failed
                  |L4.36|
;;;414      
;;;415      if(VoltageRange == VoltageRange_1)
;;;416      {
;;;417         tmp_psize = FLASH_PSIZE_BYTE;
;;;418      }
;;;419      else if(VoltageRange == VoltageRange_2)
;;;420      {
;;;421        tmp_psize = FLASH_PSIZE_HALF_WORD;
;;;422      }
;;;423      else if(VoltageRange == VoltageRange_3)
;;;424      {
;;;425        tmp_psize = FLASH_PSIZE_WORD;
;;;426      }
;;;427      else
;;;428      {
;;;429        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
000024  f44f7540          MOV      r5,#0x300
                  |L4.40|
;;;430      }  
;;;431      if(status == FLASH_COMPLETE)
000028  2e08              CMP      r6,#8
00002a  d006              BEQ      |L4.58|
00002c  e01c              B        |L4.104|
                  |L4.46|
00002e  f44f7580          MOV      r5,#0x100             ;421
000032  e7f9              B        |L4.40|
                  |L4.52|
000034  f44f7500          MOV      r5,#0x200             ;425
000038  e7f6              B        |L4.40|
                  |L4.58|
;;;432      {
;;;433        /* if the previous operation is completed, proceed to erase all sectors */
;;;434         FLASH->CR &= CR_PSIZE_MASK;
00003a  4c0d              LDR      r4,|L4.112|
00003c  6820              LDR      r0,[r4,#0]
00003e  f4207040          BIC      r0,r0,#0x300
000042  6020              STR      r0,[r4,#0]
;;;435         FLASH->CR |= tmp_psize;
000044  6820              LDR      r0,[r4,#0]
000046  4328              ORRS     r0,r0,r5
000048  6020              STR      r0,[r4,#0]
;;;436         FLASH->CR |= FLASH_CR_MER;
00004a  6820              LDR      r0,[r4,#0]
00004c  f0400004          ORR      r0,r0,#4
000050  6020              STR      r0,[r4,#0]
;;;437         FLASH->CR |= FLASH_CR_STRT;
000052  6820              LDR      r0,[r4,#0]
000054  f4403080          ORR      r0,r0,#0x10000
000058  6020              STR      r0,[r4,#0]
;;;438        
;;;439        /* Wait for last operation to be completed */
;;;440        status = FLASH_WaitForLastOperation();
00005a  f7fffffe          BL       FLASH_WaitForLastOperation
00005e  4606              MOV      r6,r0
;;;441    
;;;442        /* if the erase operation is completed, disable the MER Bit */
;;;443        FLASH->CR &= (~FLASH_CR_MER);
000060  6820              LDR      r0,[r4,#0]
000062  f0200004          BIC      r0,r0,#4
000066  6020              STR      r0,[r4,#0]
                  |L4.104|
;;;444    
;;;445      }   
;;;446      /* Return the Erase Status */
;;;447      return status;
000068  4630              MOV      r0,r6
;;;448    }
00006a  bd70              POP      {r4-r6,pc}
;;;449    
                          ENDP

                  |L4.108|
                          DCD      ||.conststring||
                  |L4.112|
                          DCD      0x40023c10

                          AREA ||i.FLASH_EraseSector||, CODE, READONLY, ALIGN=2

                  FLASH_EraseSector PROC
;;;340      */
;;;341    FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
000000  b570              PUSH     {r4-r6,lr}
;;;342    {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
;;;343      uint32_t tmp_psize = 0x0;
000006  f04f0600          MOV      r6,#0
00000a  d01a              BEQ      |L5.66|
;;;344      FLASH_Status status = FLASH_COMPLETE;
;;;345    
;;;346      /* Check the parameters */
;;;347      assert_param(IS_FLASH_SECTOR(FLASH_Sector));
00000c  2c08              CMP      r4,#8
00000e  d018              BEQ      |L5.66|
000010  2c10              CMP      r4,#0x10
000012  d016              BEQ      |L5.66|
000014  2c18              CMP      r4,#0x18
000016  d014              BEQ      |L5.66|
000018  2c20              CMP      r4,#0x20
00001a  d012              BEQ      |L5.66|
00001c  2c28              CMP      r4,#0x28
00001e  d010              BEQ      |L5.66|
000020  2c30              CMP      r4,#0x30
000022  d00e              BEQ      |L5.66|
000024  2c38              CMP      r4,#0x38
000026  d00c              BEQ      |L5.66|
000028  2c40              CMP      r4,#0x40
00002a  d00a              BEQ      |L5.66|
00002c  2c48              CMP      r4,#0x48
00002e  d008              BEQ      |L5.66|
000030  2c50              CMP      r4,#0x50
000032  d006              BEQ      |L5.66|
000034  2c58              CMP      r4,#0x58
000036  d004              BEQ      |L5.66|
000038  f240115b          MOV      r1,#0x15b
00003c  481d              LDR      r0,|L5.180|
00003e  f7fffffe          BL       assert_failed
                  |L5.66|
;;;348      assert_param(IS_VOLTAGERANGE(VoltageRange));
000042  b165              CBZ      r5,|L5.94|
000044  2d01              CMP      r5,#1
000046  d02e              BEQ      |L5.166|
000048  2d02              CMP      r5,#2
00004a  d02f              BEQ      |L5.172|
00004c  2d03              CMP      r5,#3
00004e  d004              BEQ      |L5.90|
000050  f44f71ae          MOV      r1,#0x15c
000054  4817              LDR      r0,|L5.180|
000056  f7fffffe          BL       assert_failed
                  |L5.90|
;;;349      
;;;350      if(VoltageRange == VoltageRange_1)
;;;351      {
;;;352         tmp_psize = FLASH_PSIZE_BYTE;
;;;353      }
;;;354      else if(VoltageRange == VoltageRange_2)
;;;355      {
;;;356        tmp_psize = FLASH_PSIZE_HALF_WORD;
;;;357      }
;;;358      else if(VoltageRange == VoltageRange_3)
;;;359      {
;;;360        tmp_psize = FLASH_PSIZE_WORD;
;;;361      }
;;;362      else
;;;363      {
;;;364        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
00005a  f44f7640          MOV      r6,#0x300
                  |L5.94|
;;;365      }
;;;366      /* Wait for last operation to be completed */
;;;367      status = FLASH_WaitForLastOperation();
00005e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;368      
;;;369      if(status == FLASH_COMPLETE)
000062  2808              CMP      r0,#8
000064  d11e              BNE      |L5.164|
;;;370      { 
;;;371        /* if the previous operation is completed, proceed to erase the sector */
;;;372        FLASH->CR &= CR_PSIZE_MASK;
000066  4d14              LDR      r5,|L5.184|
000068  6828              LDR      r0,[r5,#0]
00006a  f4207040          BIC      r0,r0,#0x300
00006e  6028              STR      r0,[r5,#0]
;;;373        FLASH->CR |= tmp_psize;
000070  6828              LDR      r0,[r5,#0]
000072  4330              ORRS     r0,r0,r6
000074  6028              STR      r0,[r5,#0]
;;;374        FLASH->CR &= SECTOR_MASK;
000076  6828              LDR      r0,[r5,#0]
000078  f02000f8          BIC      r0,r0,#0xf8
00007c  6028              STR      r0,[r5,#0]
;;;375        FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
00007e  6828              LDR      r0,[r5,#0]
000080  f0440102          ORR      r1,r4,#2
000084  4308              ORRS     r0,r0,r1
000086  6028              STR      r0,[r5,#0]
;;;376        FLASH->CR |= FLASH_CR_STRT;
000088  6828              LDR      r0,[r5,#0]
00008a  f4403080          ORR      r0,r0,#0x10000
00008e  6028              STR      r0,[r5,#0]
;;;377        
;;;378        /* Wait for last operation to be completed */
;;;379        status = FLASH_WaitForLastOperation();
000090  f7fffffe          BL       FLASH_WaitForLastOperation
;;;380        
;;;381        /* if the erase operation is completed, disable the SER Bit */
;;;382        FLASH->CR &= (~FLASH_CR_SER);
000094  6829              LDR      r1,[r5,#0]
000096  f0210102          BIC      r1,r1,#2
00009a  6029              STR      r1,[r5,#0]
;;;383        FLASH->CR &= SECTOR_MASK; 
00009c  6829              LDR      r1,[r5,#0]
00009e  f02101f8          BIC      r1,r1,#0xf8
0000a2  6029              STR      r1,[r5,#0]
                  |L5.164|
;;;384      }
;;;385      /* Return the Erase Status */
;;;386      return status;
;;;387    }
0000a4  bd70              POP      {r4-r6,pc}
                  |L5.166|
0000a6  f44f7680          MOV      r6,#0x100             ;356
0000aa  e7d8              B        |L5.94|
                  |L5.172|
0000ac  f44f7600          MOV      r6,#0x200             ;360
0000b0  e7d5              B        |L5.94|
;;;388    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L5.180|
                          DCD      ||.conststring||
                  |L5.184|
                          DCD      0x40023c10

                          AREA ||i.FLASH_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetFlagStatus PROC
;;;933      */
;;;934    FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;935    {
;;;936      FlagStatus bitstatus = RESET;
000002  2500              MOVS     r5,#0
000004  4604              MOV      r4,r0                 ;935
;;;937      /* Check the parameters */
;;;938      assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
000006  2801              CMP      r0,#1
000008  d011              BEQ      |L6.46|
00000a  2c02              CMP      r4,#2
00000c  d00f              BEQ      |L6.46|
00000e  2c10              CMP      r4,#0x10
000010  d00d              BEQ      |L6.46|
000012  2c20              CMP      r4,#0x20
000014  d00b              BEQ      |L6.46|
000016  2c40              CMP      r4,#0x40
000018  d009              BEQ      |L6.46|
00001a  2c80              CMP      r4,#0x80
00001c  d007              BEQ      |L6.46|
00001e  f5b43f80          CMP      r4,#0x10000
000022  d004              BEQ      |L6.46|
000024  f24031aa          MOV      r1,#0x3aa
000028  4804              LDR      r0,|L6.60|
00002a  f7fffffe          BL       assert_failed
                  |L6.46|
;;;939    
;;;940      if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
00002e  4804              LDR      r0,|L6.64|
000030  6800              LDR      r0,[r0,#0]
000032  4220              TST      r0,r4
000034  d000              BEQ      |L6.56|
;;;941      {
;;;942        bitstatus = SET;
000036  2501              MOVS     r5,#1
                  |L6.56|
;;;943      }
;;;944      else
;;;945      {
;;;946        bitstatus = RESET;
;;;947      }
;;;948      /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;949      return bitstatus; 
000038  4628              MOV      r0,r5
;;;950    }
00003a  bd70              POP      {r4-r6,pc}
;;;951    
                          ENDP

                  |L6.60|
                          DCD      ||.conststring||
                  |L6.64|
                          DCD      0x40023c0c

                          AREA ||i.FLASH_GetStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetStatus PROC
;;;978      */
;;;979    FLASH_Status FLASH_GetStatus(void)
000000  490b              LDR      r1,|L7.48|
;;;980    {
;;;981      FLASH_Status flashstatus = FLASH_COMPLETE;
000002  2008              MOVS     r0,#8
;;;982      
;;;983      if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
000004  680a              LDR      r2,[r1,#0]
000006  03d2              LSLS     r2,r2,#15
000008  d501              BPL      |L7.14|
;;;984      {
;;;985        flashstatus = FLASH_BUSY;
00000a  2001              MOVS     r0,#1
;;;986      }
;;;987      else 
;;;988      {  
;;;989        if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
;;;990        { 
;;;991          flashstatus = FLASH_ERROR_WRP;
;;;992        }
;;;993        else 
;;;994        {
;;;995          if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
;;;996          {
;;;997            flashstatus = FLASH_ERROR_PROGRAM; 
;;;998          }
;;;999          else
;;;1000         {
;;;1001           if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
;;;1002           {
;;;1003             flashstatus = FLASH_ERROR_OPERATION;
;;;1004           }
;;;1005           else
;;;1006           {
;;;1007             flashstatus = FLASH_COMPLETE;
;;;1008           }
;;;1009         }
;;;1010       }
;;;1011     }
;;;1012     /* Return the FLASH Status */
;;;1013     return flashstatus;
;;;1014   }
00000c  4770              BX       lr
                  |L7.14|
00000e  680a              LDR      r2,[r1,#0]            ;989
000010  06d2              LSLS     r2,r2,#27             ;989
000012  d501              BPL      |L7.24|
000014  2005              MOVS     r0,#5                 ;991
000016  4770              BX       lr
                  |L7.24|
000018  680a              LDR      r2,[r1,#0]            ;995
00001a  f0120fef          TST      r2,#0xef              ;995
00001e  d001              BEQ      |L7.36|
000020  2006              MOVS     r0,#6                 ;997
                  |L7.34|
000022  4770              BX       lr
                  |L7.36|
000024  6809              LDR      r1,[r1,#0]            ;1001
000026  0789              LSLS     r1,r1,#30             ;1001
000028  d5fb              BPL      |L7.34|
00002a  2007              MOVS     r0,#7                 ;1003
00002c  4770              BX       lr
;;;1015   
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
                          DCD      0x40023c0c

                          AREA ||i.FLASH_ITConfig||, CODE, READONLY, ALIGN=2

                  FLASH_ITConfig PROC
;;;902      */
;;;903    void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;904    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;905      /* Check the parameters */
;;;906      assert_param(IS_FLASH_IT(FLASH_IT)); 
000006  f0307040          BICS     r0,r0,#0x3000000
00000a  d100              BNE      |L8.14|
00000c  b924              CBNZ     r4,|L8.24|
                  |L8.14|
00000e  f240318a          MOV      r1,#0x38a
000012  4809              LDR      r0,|L8.56|
000014  f7fffffe          BL       assert_failed
                  |L8.24|
;;;907      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;908    
;;;909      if(NewState != DISABLE)
;;;910      {
;;;911        /* Enable the interrupt sources */
;;;912        FLASH->CR |= FLASH_IT;
000018  4e08              LDR      r6,|L8.60|
00001a  b14d              CBZ      r5,|L8.48|
00001c  2d01              CMP      r5,#1                 ;907
00001e  d004              BEQ      |L8.42|
000020  f240318b          MOV      r1,#0x38b             ;907
000024  4804              LDR      r0,|L8.56|
000026  f7fffffe          BL       assert_failed
                  |L8.42|
00002a  6830              LDR      r0,[r6,#0]
00002c  4320              ORRS     r0,r0,r4
00002e  e001              B        |L8.52|
                  |L8.48|
;;;913      }
;;;914      else
;;;915      {
;;;916        /* Disable the interrupt sources */
;;;917        FLASH->CR &= ~(uint32_t)FLASH_IT;
000030  6830              LDR      r0,[r6,#0]
000032  43a0              BICS     r0,r0,r4
                  |L8.52|
000034  6030              STR      r0,[r6,#0]            ;912
;;;918      }
;;;919    }
000036  bd70              POP      {r4-r6,pc}
;;;920    
                          ENDP

                  |L8.56|
                          DCD      ||.conststring||
                  |L8.60|
                          DCD      0x40023c10

                          AREA ||i.FLASH_InstructionCacheCmd||, CODE, READONLY, ALIGN=2

                  FLASH_InstructionCacheCmd PROC
;;;202      */
;;;203    void FLASH_InstructionCacheCmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;204    {
;;;205      /* Check the parameters */
;;;206      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;207      
;;;208      if(NewState != DISABLE)
;;;209      {
;;;210        FLASH->ACR |= FLASH_ACR_ICEN;
000002  4c08              LDR      r4,|L9.36|
000004  b148              CBZ      r0,|L9.26|
000006  2801              CMP      r0,#1                 ;206
000008  d003              BEQ      |L9.18|
00000a  21ce              MOVS     r1,#0xce              ;206
00000c  4806              LDR      r0,|L9.40|
00000e  f7fffffe          BL       assert_failed
                  |L9.18|
000012  6820              LDR      r0,[r4,#0]
000014  f4407000          ORR      r0,r0,#0x200
000018  e002              B        |L9.32|
                  |L9.26|
;;;211      }
;;;212      else
;;;213      {
;;;214        FLASH->ACR &= (~FLASH_ACR_ICEN);
00001a  6820              LDR      r0,[r4,#0]
00001c  f4207000          BIC      r0,r0,#0x200
                  |L9.32|
000020  6020              STR      r0,[r4,#0]            ;210
;;;215      }
;;;216    }
000022  bd10              POP      {r4,pc}
;;;217    
                          ENDP

                  |L9.36|
                          DCD      0x40023c00
                  |L9.40|
                          DCD      ||.conststring||

                          AREA ||i.FLASH_InstructionCacheReset||, CODE, READONLY, ALIGN=2

                  FLASH_InstructionCacheReset PROC
;;;244      */
;;;245    void FLASH_InstructionCacheReset(void)
000000  4802              LDR      r0,|L10.12|
;;;246    {
;;;247      FLASH->ACR |= FLASH_ACR_ICRST;
000002  6801              LDR      r1,[r0,#0]
000004  f4416100          ORR      r1,r1,#0x800
000008  6001              STR      r1,[r0,#0]
;;;248    }
00000a  4770              BX       lr
;;;249    
                          ENDP

                  |L10.12|
                          DCD      0x40023c00

                          AREA ||i.FLASH_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_Lock PROC
;;;314      */
;;;315    void FLASH_Lock(void)
000000  4802              LDR      r0,|L11.12|
;;;316    {
;;;317      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;318      FLASH->CR |= FLASH_CR_LOCK;
000002  6801              LDR      r1,[r0,#0]
000004  f0414100          ORR      r1,r1,#0x80000000
000008  6001              STR      r1,[r0,#0]
;;;319    }
00000a  4770              BX       lr
;;;320    
                          ENDP

                  |L11.12|
                          DCD      0x40023c10

                          AREA ||i.FLASH_OB_BORConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_BORConfig PROC
;;;788      */
;;;789    void FLASH_OB_BORConfig(uint8_t OB_BOR)
000000  b510              PUSH     {r4,lr}
;;;790    {
000002  4604              MOV      r4,r0
;;;791      /* Check the parameters */
;;;792      assert_param(IS_OB_BOR(OB_BOR));
000004  2808              CMP      r0,#8
000006  d009              BEQ      |L12.28|
000008  2c04              CMP      r4,#4
00000a  d007              BEQ      |L12.28|
00000c  b134              CBZ      r4,|L12.28|
00000e  2c0c              CMP      r4,#0xc
000010  d004              BEQ      |L12.28|
000012  f44f7146          MOV      r1,#0x318
000016  4806              LDR      r0,|L12.48|
000018  f7fffffe          BL       assert_failed
                  |L12.28|
;;;793    
;;;794      /* Set the BOR Level */
;;;795      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
00001c  4805              LDR      r0,|L12.52|
00001e  7801              LDRB     r1,[r0,#0]
000020  f021010c          BIC      r1,r1,#0xc
000024  7001              STRB     r1,[r0,#0]
;;;796      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
000026  7801              LDRB     r1,[r0,#0]
000028  4321              ORRS     r1,r1,r4
00002a  7001              STRB     r1,[r0,#0]
;;;797    
;;;798    }
00002c  bd10              POP      {r4,pc}
;;;799    
                          ENDP

00002e  0000              DCW      0x0000
                  |L12.48|
                          DCD      ||.conststring||
                  |L12.52|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_GetBOR||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetBOR PROC
;;;872      */
;;;873    uint8_t FLASH_OB_GetBOR(void)
000000  4802              LDR      r0,|L13.12|
;;;874    {
;;;875      /* Return the FLASH BOR level */
;;;876      return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
000002  7800              LDRB     r0,[r0,#0]
000004  f000000c          AND      r0,r0,#0xc
;;;877    }
000008  4770              BX       lr
;;;878    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;848      */
;;;849    FlagStatus FLASH_OB_GetRDP(void)
000000  4903              LDR      r1,|L14.16|
;;;850    {
;;;851      FlagStatus readstatus = RESET;
000002  2000              MOVS     r0,#0
;;;852    
;;;853      if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
000004  7809              LDRB     r1,[r1,#0]
000006  29aa              CMP      r1,#0xaa
000008  d000              BEQ      |L14.12|
;;;854      {
;;;855        readstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L14.12|
;;;856      }
;;;857      else
;;;858      {
;;;859        readstatus = RESET;
;;;860      }
;;;861      return readstatus;
;;;862    }
00000c  4770              BX       lr
;;;863    
                          ENDP

00000e  0000              DCW      0x0000
                  |L14.16|
                          DCD      0x40023c15

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;824      */
;;;825    uint8_t FLASH_OB_GetUser(void)
000000  4802              LDR      r0,|L15.12|
;;;826    {
;;;827      /* Return the User Option Byte */
;;;828      return (uint8_t)(FLASH->OPTCR >> 5);
000002  6800              LDR      r0,[r0,#0]
000004  f3c01047          UBFX     r0,r0,#5,#8
;;;829    }
000008  4770              BX       lr
;;;830    
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;835      */
;;;836    uint16_t FLASH_OB_GetWRP(void)
000000  4801              LDR      r0,|L16.8|
;;;837    {
;;;838      /* Return the FLASH write protection Register value */
;;;839      return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
000002  8800              LDRH     r0,[r0,#0]
;;;840    }
000004  4770              BX       lr
;;;841    
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      0x40023c16

                          AREA ||i.FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Launch PROC
;;;805      */
;;;806    FLASH_Status FLASH_OB_Launch(void)
000000  4803              LDR      r0,|L17.16|
;;;807    {
;;;808      FLASH_Status status = FLASH_COMPLETE;
;;;809    
;;;810      /* Set the OPTSTRT bit in OPTCR register */
;;;811      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
000002  7801              LDRB     r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  7001              STRB     r1,[r0,#0]
;;;812    
;;;813      /* Wait for last operation to be completed */
;;;814      status = FLASH_WaitForLastOperation();
00000a  f7ffbffe          B.W      FLASH_WaitForLastOperation
;;;815    
;;;816      return status;
;;;817    }
;;;818    
                          ENDP

00000e  0000              DCW      0x0000
                  |L17.16|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Lock PROC
;;;672      */
;;;673    void FLASH_OB_Lock(void)
000000  4802              LDR      r0,|L18.12|
;;;674    {
;;;675      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;676      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;677    }
00000a  4770              BX       lr
;;;678    
                          ENDP

                  |L18.12|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_RDPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDPConfig PROC
;;;723      */
;;;724    void FLASH_OB_RDPConfig(uint8_t OB_RDP)
000000  b510              PUSH     {r4,lr}
;;;725    {
000002  4604              MOV      r4,r0
;;;726      FLASH_Status status = FLASH_COMPLETE;
;;;727    
;;;728      /* Check the parameters */
;;;729      assert_param(IS_OB_RDP(OB_RDP));
000004  28aa              CMP      r0,#0xaa
000006  d006              BEQ      |L19.22|
000008  2c55              CMP      r4,#0x55
00000a  d004              BEQ      |L19.22|
00000c  f24021d9          MOV      r1,#0x2d9
000010  4804              LDR      r0,|L19.36|
000012  f7fffffe          BL       assert_failed
                  |L19.22|
;;;730    
;;;731      status = FLASH_WaitForLastOperation();
000016  f7fffffe          BL       FLASH_WaitForLastOperation
;;;732    
;;;733      if(status == FLASH_COMPLETE)
00001a  2808              CMP      r0,#8
00001c  d101              BNE      |L19.34|
;;;734      {
;;;735        *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
00001e  4802              LDR      r0,|L19.40|
000020  7004              STRB     r4,[r0,#0]
                  |L19.34|
;;;736    
;;;737      }
;;;738    }
000022  bd10              POP      {r4,pc}
;;;739    
                          ENDP

                  |L19.36|
                          DCD      ||.conststring||
                  |L19.40|
                          DCD      0x40023c15

                          AREA ||i.FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Unlock PROC
;;;657      */
;;;658    void FLASH_OB_Unlock(void)
000000  4805              LDR      r0,|L20.24|
;;;659    {
;;;660      if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  d005              BEQ      |L20.20|
;;;661      {
;;;662        /* Authorizes the Option Byte register programming */
;;;663        FLASH->OPTKEYR = FLASH_OPT_KEY1;
000008  4803              LDR      r0,|L20.24|
00000a  4904              LDR      r1,|L20.28|
00000c  380c              SUBS     r0,r0,#0xc
00000e  6001              STR      r1,[r0,#0]
;;;664        FLASH->OPTKEYR = FLASH_OPT_KEY2;
000010  4903              LDR      r1,|L20.32|
000012  6001              STR      r1,[r0,#0]
                  |L20.20|
;;;665      }  
;;;666    }
000014  4770              BX       lr
;;;667    
                          ENDP

000016  0000              DCW      0x0000
                  |L20.24|
                          DCD      0x40023c14
                  |L20.28|
                          DCD      0x08192a3b
                  |L20.32|
                          DCD      0x4c5d6e7f

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;755      */
;;;756    void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
000000  b570              PUSH     {r4-r6,lr}
;;;757    {
000002  4615              MOV      r5,r2
000004  460c              MOV      r4,r1
000006  4606              MOV      r6,r0
;;;758      uint8_t optiontmp = 0xFF;
;;;759      FLASH_Status status = FLASH_COMPLETE; 
;;;760    
;;;761      /* Check the parameters */
;;;762      assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
000008  2820              CMP      r0,#0x20
00000a  d005              BEQ      |L21.24|
00000c  b126              CBZ      r6,|L21.24|
00000e  f24021fa          MOV      r1,#0x2fa
000012  4810              LDR      r0,|L21.84|
000014  f7fffffe          BL       assert_failed
                  |L21.24|
;;;763      assert_param(IS_OB_STOP_SOURCE(OB_STOP));
000018  2c40              CMP      r4,#0x40
00001a  d005              BEQ      |L21.40|
00001c  b124              CBZ      r4,|L21.40|
00001e  f24021fb          MOV      r1,#0x2fb
000022  480c              LDR      r0,|L21.84|
000024  f7fffffe          BL       assert_failed
                  |L21.40|
;;;764      assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
000028  2d80              CMP      r5,#0x80
00002a  d005              BEQ      |L21.56|
00002c  b125              CBZ      r5,|L21.56|
00002e  f44f713f          MOV      r1,#0x2fc
000032  4808              LDR      r0,|L21.84|
000034  f7fffffe          BL       assert_failed
                  |L21.56|
;;;765    
;;;766      /* Wait for last operation to be completed */
;;;767      status = FLASH_WaitForLastOperation();
000038  f7fffffe          BL       FLASH_WaitForLastOperation
;;;768      
;;;769      if(status == FLASH_COMPLETE)
00003c  2808              CMP      r0,#8
00003e  d107              BNE      |L21.80|
;;;770      { 
;;;771        /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
;;;772        optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
000040  4905              LDR      r1,|L21.88|
000042  7808              LDRB     r0,[r1,#0]
000044  f000000f          AND      r0,r0,#0xf
;;;773    
;;;774        /* Update User Option Byte */
;;;775        *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
000048  4304              ORRS     r4,r4,r0
00004a  432c              ORRS     r4,r4,r5
00004c  4334              ORRS     r4,r4,r6
00004e  700c              STRB     r4,[r1,#0]
                  |L21.80|
;;;776      }  
;;;777    }
000050  bd70              POP      {r4-r6,pc}
;;;778    
                          ENDP

000052  0000              DCW      0x0000
                  |L21.84|
                          DCD      ||.conststring||
                  |L21.88|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_WRPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_WRPConfig PROC
;;;688      */
;;;689    void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;690    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;691      FLASH_Status status = FLASH_COMPLETE;
;;;692      
;;;693      /* Check the parameters */
;;;694      assert_param(IS_OB_WRP(OB_WRP));
000006  0b00              LSRS     r0,r0,#12
000008  d100              BNE      |L22.12|
00000a  b924              CBNZ     r4,|L22.22|
                  |L22.12|
00000c  f24021b6          MOV      r1,#0x2b6
000010  480b              LDR      r0,|L22.64|
000012  f7fffffe          BL       assert_failed
                  |L22.22|
;;;695      assert_param(IS_FUNCTIONAL_STATE(NewState));
000016  b135              CBZ      r5,|L22.38|
000018  2d01              CMP      r5,#1
00001a  d004              BEQ      |L22.38|
00001c  f24021b7          MOV      r1,#0x2b7
000020  4807              LDR      r0,|L22.64|
000022  f7fffffe          BL       assert_failed
                  |L22.38|
;;;696        
;;;697      status = FLASH_WaitForLastOperation();
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;698    
;;;699      if(status == FLASH_COMPLETE)
00002a  2808              CMP      r0,#8
00002c  d106              BNE      |L22.60|
;;;700      { 
;;;701        if(NewState != DISABLE)
;;;702        {
;;;703          *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
00002e  4805              LDR      r0,|L22.68|
;;;704        }
;;;705        else
;;;706        {
;;;707          *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
000030  8801              LDRH     r1,[r0,#0]
000032  b10d              CBZ      r5,|L22.56|
000034  43a1              BICS     r1,r1,r4              ;703
000036  e000              B        |L22.58|
                  |L22.56|
000038  4321              ORRS     r1,r1,r4
                  |L22.58|
00003a  8001              STRH     r1,[r0,#0]
                  |L22.60|
;;;708        }
;;;709      }
;;;710    }
00003c  bd70              POP      {r4-r6,pc}
;;;711    
                          ENDP

00003e  0000              DCW      0x0000
                  |L22.64|
                          DCD      ||.conststring||
                  |L22.68|
                          DCD      0x40023c16

                          AREA ||i.FLASH_PrefetchBufferCmd||, CODE, READONLY, ALIGN=2

                  FLASH_PrefetchBufferCmd PROC
;;;180      */
;;;181    void FLASH_PrefetchBufferCmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;182    {
;;;183      /* Check the parameters */
;;;184      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;185      
;;;186      /* Enable or disable the Prefetch Buffer */
;;;187      if(NewState != DISABLE)
;;;188      {
;;;189        FLASH->ACR |= FLASH_ACR_PRFTEN;
000002  4c08              LDR      r4,|L23.36|
000004  b148              CBZ      r0,|L23.26|
000006  2801              CMP      r0,#1                 ;184
000008  d003              BEQ      |L23.18|
00000a  21b8              MOVS     r1,#0xb8              ;184
00000c  4806              LDR      r0,|L23.40|
00000e  f7fffffe          BL       assert_failed
                  |L23.18|
000012  6820              LDR      r0,[r4,#0]
000014  f4407080          ORR      r0,r0,#0x100
000018  e002              B        |L23.32|
                  |L23.26|
;;;190      }
;;;191      else
;;;192      {
;;;193        FLASH->ACR &= (~FLASH_ACR_PRFTEN);
00001a  6820              LDR      r0,[r4,#0]
00001c  f4207080          BIC      r0,r0,#0x100
                  |L23.32|
000020  6020              STR      r0,[r4,#0]            ;189
;;;194      }
;;;195    }
000022  bd10              POP      {r4,pc}
;;;196    
                          ENDP

                  |L23.36|
                          DCD      0x40023c00
                  |L23.40|
                          DCD      ||.conststring||

                          AREA ||i.FLASH_ProgramByte||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramByte PROC
;;;572      */
;;;573    FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;574    {
000002  460e              MOV      r6,r1
000004  4605              MOV      r5,r0
;;;575      FLASH_Status status = FLASH_COMPLETE;
;;;576    
;;;577      /* Check the parameters */
;;;578      assert_param(IS_FLASH_ADDRESS(Address));
000006  4913              LDR      r1,|L24.84|
000008  f1a06000          SUB      r0,r0,#0x8000000
00000c  4288              CMP      r0,r1
00000e  d30a              BCC      |L24.38|
000010  4811              LDR      r0,|L24.88|
000012  f240210f          MOV      r1,#0x20f
000016  4428              ADD      r0,r0,r5
000018  4288              CMP      r0,r1
00001a  d304              BCC      |L24.38|
00001c  f2402142          MOV      r1,#0x242
000020  480e              LDR      r0,|L24.92|
000022  f7fffffe          BL       assert_failed
                  |L24.38|
;;;579    
;;;580      /* Wait for last operation to be completed */
;;;581      status = FLASH_WaitForLastOperation();
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;582      
;;;583      if(status == FLASH_COMPLETE)
00002a  2808              CMP      r0,#8
00002c  d111              BNE      |L24.82|
;;;584      {
;;;585        /* if the previous operation is completed, proceed to program the new data */
;;;586        FLASH->CR &= CR_PSIZE_MASK;
00002e  4c0c              LDR      r4,|L24.96|
000030  6820              LDR      r0,[r4,#0]
000032  f4207040          BIC      r0,r0,#0x300
000036  6020              STR      r0,[r4,#0]
;;;587        FLASH->CR |= FLASH_PSIZE_BYTE;
000038  6820              LDR      r0,[r4,#0]
00003a  6020              STR      r0,[r4,#0]
;;;588        FLASH->CR |= FLASH_CR_PG;
00003c  6820              LDR      r0,[r4,#0]
00003e  f0400001          ORR      r0,r0,#1
000042  6020              STR      r0,[r4,#0]
;;;589      
;;;590        *(__IO uint8_t*)Address = Data;
000044  702e              STRB     r6,[r5,#0]
;;;591            
;;;592        /* Wait for last operation to be completed */
;;;593        status = FLASH_WaitForLastOperation();
000046  f7fffffe          BL       FLASH_WaitForLastOperation
;;;594    
;;;595        /* if the program operation is completed, disable the PG Bit */
;;;596        FLASH->CR &= (~FLASH_CR_PG);
00004a  6821              LDR      r1,[r4,#0]
00004c  f0210101          BIC      r1,r1,#1
000050  6021              STR      r1,[r4,#0]
                  |L24.82|
;;;597      } 
;;;598    
;;;599      /* Return the Program Status */
;;;600      return status;
;;;601    }
000052  bd70              POP      {r4-r6,pc}
;;;602    
                          ENDP

                  |L24.84|
                          DCD      0x000fffff
                  |L24.88|
                          DCD      0xe0008800
                  |L24.92|
                          DCD      ||.conststring||
                  |L24.96|
                          DCD      0x40023c10

                          AREA ||i.FLASH_ProgramDoubleWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramDoubleWord PROC
;;;458      */
;;;459    FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;460    {
000004  4605              MOV      r5,r0
;;;461      FLASH_Status status = FLASH_COMPLETE;
;;;462    
;;;463      /* Check the parameters */
;;;464      assert_param(IS_FLASH_ADDRESS(Address));
000006  4916              LDR      r1,|L25.96|
000008  f1a06000          SUB      r0,r0,#0x8000000
00000c  4616              MOV      r6,r2                 ;460
00000e  461f              MOV      r7,r3                 ;460
000010  4288              CMP      r0,r1
000012  d30a              BCC      |L25.42|
000014  4813              LDR      r0,|L25.100|
000016  f240210f          MOV      r1,#0x20f
00001a  4428              ADD      r0,r0,r5
00001c  4288              CMP      r0,r1
00001e  d304              BCC      |L25.42|
000020  f44f71e8          MOV      r1,#0x1d0
000024  4810              LDR      r0,|L25.104|
000026  f7fffffe          BL       assert_failed
                  |L25.42|
;;;465    
;;;466      /* Wait for last operation to be completed */
;;;467      status = FLASH_WaitForLastOperation();
00002a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;468      
;;;469      if(status == FLASH_COMPLETE)
00002e  2808              CMP      r0,#8
000030  d114              BNE      |L25.92|
;;;470      {
;;;471        /* if the previous operation is completed, proceed to program the new data */
;;;472        FLASH->CR &= CR_PSIZE_MASK;
000032  4c0e              LDR      r4,|L25.108|
000034  6820              LDR      r0,[r4,#0]
000036  f4207040          BIC      r0,r0,#0x300
00003a  6020              STR      r0,[r4,#0]
;;;473        FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
00003c  6820              LDR      r0,[r4,#0]
00003e  f4407040          ORR      r0,r0,#0x300
000042  6020              STR      r0,[r4,#0]
;;;474        FLASH->CR |= FLASH_CR_PG;
000044  6820              LDR      r0,[r4,#0]
000046  f0400001          ORR      r0,r0,#1
00004a  6020              STR      r0,[r4,#0]
;;;475      
;;;476        *(__IO uint64_t*)Address = Data;
00004c  602e              STR      r6,[r5,#0]
00004e  606f              STR      r7,[r5,#4]
;;;477            
;;;478        /* Wait for last operation to be completed */
;;;479        status = FLASH_WaitForLastOperation();
000050  f7fffffe          BL       FLASH_WaitForLastOperation
;;;480    
;;;481        /* if the program operation is completed, disable the PG Bit */
;;;482        FLASH->CR &= (~FLASH_CR_PG);
000054  6821              LDR      r1,[r4,#0]
000056  f0210101          BIC      r1,r1,#1
00005a  6021              STR      r1,[r4,#0]
                  |L25.92|
;;;483      } 
;;;484      /* Return the Program Status */
;;;485      return status;
;;;486    }
00005c  e8bd81f0          POP      {r4-r8,pc}
;;;487    
                          ENDP

                  |L25.96|
                          DCD      0x000fffff
                  |L25.100|
                          DCD      0xe0008800
                  |L25.104|
                          DCD      ||.conststring||
                  |L25.108|
                          DCD      0x40023c10

                          AREA ||i.FLASH_ProgramHalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramHalfWord PROC
;;;534      */
;;;535    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;536    {
000002  460e              MOV      r6,r1
000004  4605              MOV      r5,r0
;;;537      FLASH_Status status = FLASH_COMPLETE;
;;;538    
;;;539      /* Check the parameters */
;;;540      assert_param(IS_FLASH_ADDRESS(Address));
000006  4914              LDR      r1,|L26.88|
000008  f1a06000          SUB      r0,r0,#0x8000000
00000c  4288              CMP      r0,r1
00000e  d30a              BCC      |L26.38|
000010  4812              LDR      r0,|L26.92|
000012  f240210f          MOV      r1,#0x20f
000016  4428              ADD      r0,r0,r5
000018  4288              CMP      r0,r1
00001a  d304              BCC      |L26.38|
00001c  f44f7107          MOV      r1,#0x21c
000020  480f              LDR      r0,|L26.96|
000022  f7fffffe          BL       assert_failed
                  |L26.38|
;;;541    
;;;542      /* Wait for last operation to be completed */
;;;543      status = FLASH_WaitForLastOperation();
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;544      
;;;545      if(status == FLASH_COMPLETE)
00002a  2808              CMP      r0,#8
00002c  d113              BNE      |L26.86|
;;;546      {
;;;547        /* if the previous operation is completed, proceed to program the new data */
;;;548        FLASH->CR &= CR_PSIZE_MASK;
00002e  4c0d              LDR      r4,|L26.100|
000030  6820              LDR      r0,[r4,#0]
000032  f4207040          BIC      r0,r0,#0x300
000036  6020              STR      r0,[r4,#0]
;;;549        FLASH->CR |= FLASH_PSIZE_HALF_WORD;
000038  6820              LDR      r0,[r4,#0]
00003a  f4407080          ORR      r0,r0,#0x100
00003e  6020              STR      r0,[r4,#0]
;;;550        FLASH->CR |= FLASH_CR_PG;
000040  6820              LDR      r0,[r4,#0]
000042  f0400001          ORR      r0,r0,#1
000046  6020              STR      r0,[r4,#0]
;;;551      
;;;552        *(__IO uint16_t*)Address = Data;
000048  802e              STRH     r6,[r5,#0]
;;;553            
;;;554        /* Wait for last operation to be completed */
;;;555        status = FLASH_WaitForLastOperation();
00004a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;556    
;;;557        /* if the program operation is completed, disable the PG Bit */
;;;558        FLASH->CR &= (~FLASH_CR_PG);
00004e  6821              LDR      r1,[r4,#0]
000050  f0210101          BIC      r1,r1,#1
000054  6021              STR      r1,[r4,#0]
                  |L26.86|
;;;559      } 
;;;560      /* Return the Program Status */
;;;561      return status;
;;;562    }
000056  bd70              POP      {r4-r6,pc}
;;;563    
                          ENDP

                  |L26.88|
                          DCD      0x000fffff
                  |L26.92|
                          DCD      0xe0008800
                  |L26.96|
                          DCD      ||.conststring||
                  |L26.100|
                          DCD      0x40023c10

                          AREA ||i.FLASH_ProgramWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramWord PROC
;;;496      */
;;;497    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;498    {
000002  460e              MOV      r6,r1
000004  4605              MOV      r5,r0
;;;499      FLASH_Status status = FLASH_COMPLETE;
;;;500    
;;;501      /* Check the parameters */
;;;502      assert_param(IS_FLASH_ADDRESS(Address));
000006  4914              LDR      r1,|L27.88|
000008  f1a06000          SUB      r0,r0,#0x8000000
00000c  4288              CMP      r0,r1
00000e  d30a              BCC      |L27.38|
000010  4812              LDR      r0,|L27.92|
000012  f240210f          MOV      r1,#0x20f
000016  4428              ADD      r0,r0,r5
000018  4288              CMP      r0,r1
00001a  d304              BCC      |L27.38|
00001c  f44f71fb          MOV      r1,#0x1f6
000020  480f              LDR      r0,|L27.96|
000022  f7fffffe          BL       assert_failed
                  |L27.38|
;;;503    
;;;504      /* Wait for last operation to be completed */
;;;505      status = FLASH_WaitForLastOperation();
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;506      
;;;507      if(status == FLASH_COMPLETE)
00002a  2808              CMP      r0,#8
00002c  d113              BNE      |L27.86|
;;;508      {
;;;509        /* if the previous operation is completed, proceed to program the new data */
;;;510        FLASH->CR &= CR_PSIZE_MASK;
00002e  4c0d              LDR      r4,|L27.100|
000030  6820              LDR      r0,[r4,#0]
000032  f4207040          BIC      r0,r0,#0x300
000036  6020              STR      r0,[r4,#0]
;;;511        FLASH->CR |= FLASH_PSIZE_WORD;
000038  6820              LDR      r0,[r4,#0]
00003a  f4407000          ORR      r0,r0,#0x200
00003e  6020              STR      r0,[r4,#0]
;;;512        FLASH->CR |= FLASH_CR_PG;
000040  6820              LDR      r0,[r4,#0]
000042  f0400001          ORR      r0,r0,#1
000046  6020              STR      r0,[r4,#0]
;;;513      
;;;514        *(__IO uint32_t*)Address = Data;
000048  602e              STR      r6,[r5,#0]
;;;515            
;;;516        /* Wait for last operation to be completed */
;;;517        status = FLASH_WaitForLastOperation();
00004a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;518    
;;;519        /* if the program operation is completed, disable the PG Bit */
;;;520        FLASH->CR &= (~FLASH_CR_PG);
00004e  6821              LDR      r1,[r4,#0]
000050  f0210101          BIC      r1,r1,#1
000054  6021              STR      r1,[r4,#0]
                  |L27.86|
;;;521      } 
;;;522      /* Return the Program Status */
;;;523      return status;
;;;524    }
000056  bd70              POP      {r4-r6,pc}
;;;525    
                          ENDP

                  |L27.88|
                          DCD      0x000fffff
                  |L27.92|
                          DCD      0xe0008800
                  |L27.96|
                          DCD      ||.conststring||
                  |L27.100|
                          DCD      0x40023c10

                          AREA ||i.FLASH_SetLatency||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;165      */
;;;166    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  b510              PUSH     {r4,lr}
;;;167    {
000002  0004              MOVS     r4,r0
000004  d011              BEQ      |L28.42|
;;;168      /* Check the parameters */
;;;169      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
000006  2c01              CMP      r4,#1
000008  d00f              BEQ      |L28.42|
00000a  2c02              CMP      r4,#2
00000c  d00d              BEQ      |L28.42|
00000e  2c03              CMP      r4,#3
000010  d00b              BEQ      |L28.42|
000012  2c04              CMP      r4,#4
000014  d009              BEQ      |L28.42|
000016  2c05              CMP      r4,#5
000018  d007              BEQ      |L28.42|
00001a  2c06              CMP      r4,#6
00001c  d005              BEQ      |L28.42|
00001e  2c07              CMP      r4,#7
000020  d003              BEQ      |L28.42|
000022  21a9              MOVS     r1,#0xa9
000024  4802              LDR      r0,|L28.48|
000026  f7fffffe          BL       assert_failed
                  |L28.42|
;;;170      
;;;171      /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
;;;172      *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
00002a  4802              LDR      r0,|L28.52|
00002c  7004              STRB     r4,[r0,#0]
;;;173    }
00002e  bd10              POP      {r4,pc}
;;;174    
                          ENDP

                  |L28.48|
                          DCD      ||.conststring||
                  |L28.52|
                          DCD      0x40023c00

                          AREA ||i.FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_Unlock PROC
;;;299      */
;;;300    void FLASH_Unlock(void)
000000  4805              LDR      r0,|L29.24|
;;;301    {
;;;302      if((FLASH->CR & FLASH_CR_LOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  2800              CMP      r0,#0
000006  da05              BGE      |L29.20|
;;;303      {
;;;304        /* Authorize the FLASH Registers access */
;;;305        FLASH->KEYR = FLASH_KEY1;
000008  4803              LDR      r0,|L29.24|
00000a  4904              LDR      r1,|L29.28|
00000c  380c              SUBS     r0,r0,#0xc
00000e  6001              STR      r1,[r0,#0]
;;;306        FLASH->KEYR = FLASH_KEY2;
000010  4903              LDR      r1,|L29.32|
000012  6001              STR      r1,[r0,#0]
                  |L29.20|
;;;307      }  
;;;308    }
000014  4770              BX       lr
;;;309    
                          ENDP

000016  0000              DCW      0x0000
                  |L29.24|
                          DCD      0x40023c10
                  |L29.28|
                          DCD      0x45670123
                  |L29.32|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=1

                  FLASH_WaitForLastOperation PROC
;;;1021     */
;;;1022   FLASH_Status FLASH_WaitForLastOperation(void)
000000  b508              PUSH     {r3,lr}
;;;1023   { 
;;;1024     __IO FLASH_Status status = FLASH_COMPLETE;
000002  2008              MOVS     r0,#8
000004  f88d0000          STRB     r0,[sp,#0]
                  |L30.8|
;;;1025      
;;;1026     /* Check for the FLASH Status */
;;;1027     status = FLASH_GetStatus();
;;;1028   
;;;1029     /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;1030        Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;1031        flag will be set */
;;;1032     while(status == FLASH_BUSY)
;;;1033     {
;;;1034       status = FLASH_GetStatus();
000008  f7fffffe          BL       FLASH_GetStatus
00000c  f88d0000          STRB     r0,[sp,#0]
000010  f89d0000          LDRB     r0,[sp,#0]            ;1032
000014  2801              CMP      r0,#1                 ;1032
000016  d0f7              BEQ      |L30.8|
;;;1035     }
;;;1036     /* Return the operation status */
;;;1037     return status;
000018  f89d0000          LDRB     r0,[sp,#0]
;;;1038   }
00001c  bd08              POP      {r3,pc}
;;;1039   
                          ENDP


                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2e2e5c4f          DCB      "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_"
000004  535c6273
000008  705c7374
00000c  6d333266
000010  3430785c
000014  4c696272
000018  61726965
00001c  735c5354
000020  4d333246
000024  3478785f
000028  53746450
00002c  65726970
000030  685f    
000032  44726976          DCB      "Driver\\src\\stm32f4xx_flash.c",0
000036  65725c73
00003a  72635c73
00003e  746d3332
000042  66347878
000046  5f666c61
00004a  73682e63
00004e  00      

;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_flash.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_flash_c_a2a150d6____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_stm32f4xx_flash_c_a2a150d6____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_flash_c_a2a150d6____REVSH|
#line 128
|__asm___17_stm32f4xx_flash_c_a2a150d6____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
