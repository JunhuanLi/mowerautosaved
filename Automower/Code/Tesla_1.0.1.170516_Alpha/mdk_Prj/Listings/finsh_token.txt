; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\finsh_token.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\finsh_token.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\finsh_token.crf ..\OS\components\finsh\finsh_token.c]
                          THUMB

                          AREA ||i.finsh_token_get_token||, CODE, READONLY, ALIGN=1

                  finsh_token_get_token PROC
;;;87     
;;;88     void finsh_token_get_token(struct finsh_token* self, u_char* token)
000000  460b              MOV      r3,r1
;;;89     {
;;;90     	strncpy((char*)token, (char*)self->string, FINSH_NAME_MAX);
000002  f1000110          ADD      r1,r0,#0x10
000006  2210              MOVS     r2,#0x10
000008  4618              MOV      r0,r3
00000a  f7ffbffe          B.W      strncpy
;;;91     }
;;;92     
                          ENDP


                          AREA ||i.finsh_token_init||, CODE, READONLY, ALIGN=1

                  finsh_token_init PROC
;;;72     
;;;73     void finsh_token_init(struct finsh_token* self, u_char* line)
000000  b570              PUSH     {r4-r6,lr}
;;;74     {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;75     	memset(self, 0, sizeof(struct finsh_token));
000006  2194              MOVS     r1,#0x94
000008  f7fffffe          BL       __aeabi_memclr4
;;;76     
;;;77     	self->line = line;
00000c  f8c54090          STR      r4,[r5,#0x90]
;;;78     }
000010  bd70              POP      {r4-r6,pc}
;;;79     
                          ENDP


                          AREA ||i.finsh_token_token||, CODE, READONLY, ALIGN=1

                  finsh_token_token PROC
;;;79     
;;;80     enum finsh_token_type finsh_token_token(struct finsh_token* self)
000000  b510              PUSH     {r4,lr}
;;;81     {
000002  4604              MOV      r4,r0
;;;82     	if ( self->replay )	self->replay = 0;
000004  7840              LDRB     r0,[r0,#1]
000006  b110              CBZ      r0,|L3.14|
000008  2000              MOVS     r0,#0
00000a  7060              STRB     r0,[r4,#1]
00000c  e002              B        |L3.20|
                  |L3.14|
;;;83     	else token_run(self);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       token_run
                  |L3.20|
;;;84     
;;;85     	return (enum finsh_token_type)self->current_token;
000014  7a20              LDRB     r0,[r4,#8]
;;;86     }
000016  bd10              POP      {r4,pc}
;;;87     
                          ENDP


                          AREA ||i.token_get_string||, CODE, READONLY, ALIGN=1

                  token_get_string PROC
;;;92     
;;;93     int token_get_string(struct finsh_token* self, u_char* str)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;94     {
000004  460c              MOV      r4,r1
000006  4605              MOV      r5,r0
;;;95     	unsigned char *p=str;
;;;96     	char ch;
;;;97     
;;;98     	ch = token_next_char(self);
000008  f7fffffe          BL       token_next_char
;;;99     	if (is_eof(self)) return -1;
00000c  7829              LDRB     r1,[r5,#0]
00000e  f04f37ff          MOV      r7,#0xffffffff
000012  b111              CBZ      r1,|L4.26|
                  |L4.20|
000014  4638              MOV      r0,r7
                  |L4.22|
;;;100    
;;;101    	str[0] = '\0';
;;;102    
;;;103    	if ( is_digit(ch) )/*the first character of identifier is not a digit.*/
;;;104    	{
;;;105    		token_prev_char(self);
;;;106    		return -1;
;;;107    	}
;;;108    
;;;109    	while (!is_separator(ch) && !is_eof(self))
;;;110    	{
;;;111    		*p++ = ch;
;;;112    
;;;113    		ch = token_next_char(self);
;;;114    	}
;;;115    	self->eof = 0;
;;;116    
;;;117    	token_prev_char(self);
;;;118    	*p = '\0';
;;;119    
;;;120    	return 0;
;;;121    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L4.26|
00001a  2600              MOVS     r6,#0                 ;101
00001c  f1a00130          SUB      r1,r0,#0x30           ;103
000020  7026              STRB     r6,[r4,#0]            ;101
000022  2909              CMP      r1,#9                 ;103
000024  d808              BHI      |L4.56|
000026  4628              MOV      r0,r5                 ;105
000028  f7fffffe          BL       token_prev_char
00002c  e7f2              B        |L4.20|
                  |L4.46|
00002e  f8040b01          STRB     r0,[r4],#1            ;111
000032  4628              MOV      r0,r5                 ;113
000034  f7fffffe          BL       token_next_char
                  |L4.56|
000038  f1a00161          SUB      r1,r0,#0x61           ;109
00003c  2919              CMP      r1,#0x19              ;109
00003e  d907              BLS      |L4.80|
000040  3120              ADDS     r1,r1,#0x20           ;109
000042  2919              CMP      r1,#0x19              ;109
000044  d904              BLS      |L4.80|
000046  3111              ADDS     r1,r1,#0x11           ;109
000048  2909              CMP      r1,#9                 ;109
00004a  d901              BLS      |L4.80|
00004c  285f              CMP      r0,#0x5f              ;109
00004e  d102              BNE      |L4.86|
                  |L4.80|
000050  7829              LDRB     r1,[r5,#0]            ;109
000052  2900              CMP      r1,#0                 ;109
000054  d0eb              BEQ      |L4.46|
                  |L4.86|
000056  702e              STRB     r6,[r5,#0]            ;115
000058  4628              MOV      r0,r5                 ;117
00005a  f7fffffe          BL       token_prev_char
00005e  7026              STRB     r6,[r4,#0]            ;118
000060  2000              MOVS     r0,#0                 ;120
000062  e7d8              B        |L4.22|
;;;122    
                          ENDP


                          AREA ||i.token_next_char||, CODE, READONLY, ALIGN=1

                  token_next_char PROC
;;;125    */
;;;126    static char token_next_char(struct finsh_token* self)
000000  b510              PUSH     {r4,lr}
;;;127    {
000002  4604              MOV      r4,r0
;;;128    	if (self->eof) return '\0';
000004  7800              LDRB     r0,[r0,#0]
000006  b108              CBZ      r0,|L5.12|
                  |L5.8|
000008  2000              MOVS     r0,#0
;;;129    
;;;130    	if (self->position == (int)strlen((char*)self->line) || self->line[self->position] =='\n')
;;;131    	{
;;;132    			self->eof = 1;
;;;133    			self->position = 0;
;;;134    			return '\0';
;;;135    	}
;;;136    
;;;137    	return self->line[self->position++];
;;;138    }
00000a  bd10              POP      {r4,pc}
                  |L5.12|
00000c  f8d40090          LDR      r0,[r4,#0x90]         ;130
000010  f7fffffe          BL       strlen
000014  4601              MOV      r1,r0                 ;130
000016  6860              LDR      r0,[r4,#4]            ;130
000018  4281              CMP      r1,r0                 ;130
00001a  d008              BEQ      |L5.46|
00001c  f8d41090          LDR      r1,[r4,#0x90]         ;130
000020  5c0a              LDRB     r2,[r1,r0]            ;130
000022  2a0a              CMP      r2,#0xa               ;130
000024  d003              BEQ      |L5.46|
000026  1c42              ADDS     r2,r0,#1              ;137
000028  6062              STR      r2,[r4,#4]            ;137
00002a  5c08              LDRB     r0,[r1,r0]            ;137
00002c  bd10              POP      {r4,pc}
                  |L5.46|
00002e  2001              MOVS     r0,#1                 ;132
000030  7020              STRB     r0,[r4,#0]            ;132
000032  2000              MOVS     r0,#0                 ;133
000034  6060              STR      r0,[r4,#4]            ;134
000036  e7e7              B        |L5.8|
;;;139    
                          ENDP


                          AREA ||i.token_prev_char||, CODE, READONLY, ALIGN=1

                  token_prev_char PROC
;;;139    
;;;140    static void token_prev_char(struct finsh_token* self)
000000  7801              LDRB     r1,[r0,#0]
;;;141    {
000002  2900              CMP      r1,#0
000004  d104              BNE      |L6.16|
;;;142    	if ( self->eof ) return;
;;;143    
;;;144    	if ( self->position == 0 ) return;
000006  6841              LDR      r1,[r0,#4]
000008  2900              CMP      r1,#0
00000a  d001              BEQ      |L6.16|
00000c  1e49              SUBS     r1,r1,#1
;;;145        else self->position--;
00000e  6041              STR      r1,[r0,#4]
                  |L6.16|
;;;146    }
000010  4770              BX       lr
;;;147    
                          ENDP


                          AREA ||i.token_proc_char||, CODE, READONLY, ALIGN=1

                  token_proc_char PROC
;;;339    
;;;340    static char token_proc_char(struct finsh_token* self)
000000  b5f8              PUSH     {r3-r7,lr}
;;;341    {
000002  4606              MOV      r6,r0
;;;342    	char ch;
;;;343    	char buf[4], *p;
;;;344    
;;;345    	p = buf;
000004  466d              MOV      r5,sp
;;;346    	ch = token_next_char(self);
000006  f7fffffe          BL       token_next_char
00000a  4604              MOV      r4,r0
;;;347    
;;;348    	if ( ch == '\\' )
00000c  285c              CMP      r0,#0x5c
00000e  d131              BNE      |L7.116|
;;;349    	{
;;;350    		ch = token_next_char(self);
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       token_next_char
;;;351    		switch ( ch )
000016  286e              CMP      r0,#0x6e
000018  d00e              BEQ      |L7.56|
00001a  dc06              BGT      |L7.42|
00001c  2827              CMP      r0,#0x27
00001e  d017              BEQ      |L7.80|
000020  285c              CMP      r0,#0x5c
000022  d013              BEQ      |L7.76|
000024  2862              CMP      r0,#0x62
000026  d119              BNE      |L7.92|
000028  e00c              B        |L7.68|
                  |L7.42|
00002a  2872              CMP      r0,#0x72
00002c  d00c              BEQ      |L7.72|
00002e  2874              CMP      r0,#0x74
000030  d004              BEQ      |L7.60|
000032  2876              CMP      r0,#0x76
000034  d112              BNE      |L7.92|
000036  e003              B        |L7.64|
                  |L7.56|
;;;352    		{
;;;353    		case 'n': ch = '\n'; break;
000038  240a              MOVS     r4,#0xa
00003a  e01b              B        |L7.116|
                  |L7.60|
;;;354    		case 't': ch = '\t'; break;
00003c  2409              MOVS     r4,#9
00003e  e019              B        |L7.116|
                  |L7.64|
;;;355    		case 'v': ch = '\v'; break;
000040  240b              MOVS     r4,#0xb
000042  e017              B        |L7.116|
                  |L7.68|
;;;356    		case 'b': ch = '\b'; break;
000044  2408              MOVS     r4,#8
000046  e015              B        |L7.116|
                  |L7.72|
;;;357    		case 'r': ch = '\r'; break;
000048  240d              MOVS     r4,#0xd
00004a  e013              B        |L7.116|
                  |L7.76|
;;;358    		case '\\': ch = '\\';  break;
00004c  245c              MOVS     r4,#0x5c
00004e  e011              B        |L7.116|
                  |L7.80|
;;;359    		case '\'': ch = '\'';  break;
000050  2427              MOVS     r4,#0x27
000052  e00f              B        |L7.116|
                  |L7.84|
;;;360    		default :
;;;361    			while ( is_digit(ch) )/*for '\113' char*/
;;;362    			{
;;;363    				ch = token_next_char(self);
000054  f7fffffe          BL       token_next_char
;;;364    				*p++ = ch;
000058  f8050b01          STRB     r0,[r5],#1
                  |L7.92|
00005c  3830              SUBS     r0,r0,#0x30
00005e  2809              CMP      r0,#9                 ;361
;;;365    			}
;;;366    
;;;367    			token_prev_char(self);
000060  4630              MOV      r0,r6
000062  d9f7              BLS      |L7.84|
000064  f7fffffe          BL       token_prev_char
;;;368    			*p = '\0';
000068  2000              MOVS     r0,#0
00006a  7028              STRB     r0,[r5,#0]
;;;369    			ch = atoi(p);
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       atoi
000072  b2c4              UXTB     r4,r0
                  |L7.116|
;;;370    			break;
;;;371    		}
;;;372    	}
;;;373    
;;;374    	if ( token_next_char(self) != '\'' )
000074  4630              MOV      r0,r6
000076  f7fffffe          BL       token_next_char
00007a  2827              CMP      r0,#0x27
00007c  d005              BEQ      |L7.138|
;;;375    	{
;;;376    		token_prev_char(self);
00007e  4630              MOV      r0,r6
000080  f7fffffe          BL       token_prev_char
;;;377    		finsh_error_set(FINSH_ERROR_EXPECT_CHAR);
000084  2009              MOVS     r0,#9
000086  f7fffffe          BL       finsh_error_set
                  |L7.138|
;;;378    		return ch;
;;;379    	}
;;;380    
;;;381    	return ch;
00008a  4620              MOV      r0,r4
;;;382    }
00008c  bdf8              POP      {r3-r7,pc}
;;;383    
                          ENDP


                          AREA ||i.token_proc_escape||, CODE, READONLY, ALIGN=1

                  token_proc_escape PROC
;;;412    
;;;413    static int token_proc_escape(struct finsh_token* self)
000000  b570              PUSH     {r4-r6,lr}
;;;414    {
000002  4605              MOV      r5,r0
;;;415    	char ch;
;;;416    	int result=0;
000004  2400              MOVS     r4,#0
;;;417    
;;;418    	ch = token_next_char(self);
000006  f7fffffe          BL       token_next_char
;;;419    	switch (ch)
00000a  2872              CMP      r0,#0x72
00000c  d02a              BEQ      |L8.100|
00000e  dc08              BGT      |L8.34|
000010  2861              CMP      r0,#0x61
000012  d02b              BEQ      |L8.108|
000014  2862              CMP      r0,#0x62
000016  d023              BEQ      |L8.96|
000018  2866              CMP      r0,#0x66
00001a  d025              BEQ      |L8.104|
00001c  286e              CMP      r0,#0x6e
00001e  d106              BNE      |L8.46|
000020  e018              B        |L8.84|
                  |L8.34|
000022  2874              CMP      r0,#0x74
000024  d018              BEQ      |L8.88|
000026  2876              CMP      r0,#0x76
000028  d018              BEQ      |L8.92|
00002a  2878              CMP      r0,#0x78
00002c  d020              BEQ      |L8.112|
                  |L8.46|
;;;420    	{
;;;421    	case 'n':
;;;422    		result = '\n';
;;;423    		break;
;;;424    	case 't':
;;;425    		result = '\t';
;;;426    		break;
;;;427    	case 'v':
;;;428    		result = '\v';
;;;429    		break;
;;;430    	case 'b':
;;;431    		result = '\b';
;;;432    		break;
;;;433    	case 'r':
;;;434    		result = '\r';
;;;435    		break;
;;;436    	case 'f':
;;;437    		result = '\f';
;;;438    		break;
;;;439    	case 'a':
;;;440    		result = '\007';
;;;441    		break;
;;;442    	case 'x':
;;;443    		result = 0;
;;;444    		ch  = token_next_char(self);
;;;445    		while ( (ch - '0')<16u )
;;;446    		{
;;;447    			result = result*16 + ch - '0';
;;;448    			ch = token_next_char(self);
;;;449    		}
;;;450    		token_prev_char(self);
;;;451    		break;
;;;452    	default:
;;;453    		if ( (ch - '0') < 8u)
00002e  f1a00130          SUB      r1,r0,#0x30
000032  2908              CMP      r1,#8
000034  d20c              BCS      |L8.80|
                  |L8.54|
;;;454    		{
;;;455    			result = 0;
;;;456    			while ( (ch - '0') < 8u )
;;;457    			{
;;;458    				result = result*8 + ch - '0';
000036  eb0004c4          ADD      r4,r0,r4,LSL #3
;;;459    				ch = token_next_char(self);
00003a  4628              MOV      r0,r5
00003c  3c30              SUBS     r4,r4,#0x30
00003e  f7fffffe          BL       token_next_char
000042  f1a00130          SUB      r1,r0,#0x30           ;456
000046  2908              CMP      r1,#8                 ;456
000048  d3f5              BCC      |L8.54|
                  |L8.74|
;;;460    			}
;;;461    
;;;462    			token_prev_char(self);
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       token_prev_char
                  |L8.80|
;;;463    		}
;;;464    		break;
;;;465    	}
;;;466    
;;;467    	return result;
000050  4620              MOV      r0,r4
;;;468    }
000052  bd70              POP      {r4-r6,pc}
                  |L8.84|
000054  240a              MOVS     r4,#0xa               ;422
000056  e7fb              B        |L8.80|
                  |L8.88|
000058  2409              MOVS     r4,#9                 ;425
00005a  e7f9              B        |L8.80|
                  |L8.92|
00005c  240b              MOVS     r4,#0xb               ;428
00005e  e7f7              B        |L8.80|
                  |L8.96|
000060  2408              MOVS     r4,#8                 ;431
000062  e7f5              B        |L8.80|
                  |L8.100|
000064  240d              MOVS     r4,#0xd               ;434
000066  e7f3              B        |L8.80|
                  |L8.104|
000068  240c              MOVS     r4,#0xc               ;437
00006a  e7f1              B        |L8.80|
                  |L8.108|
00006c  2407              MOVS     r4,#7                 ;440
00006e  e7ef              B        |L8.80|
                  |L8.112|
000070  4628              MOV      r0,r5                 ;444
000072  e003              B        |L8.124|
                  |L8.116|
000074  eb001404          ADD      r4,r0,r4,LSL #4       ;447
000078  4628              MOV      r0,r5                 ;448
00007a  3c30              SUBS     r4,r4,#0x30           ;448
                  |L8.124|
00007c  f7fffffe          BL       token_next_char
000080  f1a00130          SUB      r1,r0,#0x30           ;445
000084  2910              CMP      r1,#0x10              ;445
000086  d3f5              BCC      |L8.116|
000088  e7df              B        |L8.74|
;;;469    
                          ENDP


                          AREA ||i.token_proc_number||, CODE, READONLY, ALIGN=1

                  token_proc_number PROC
;;;472    */
;;;473    static void token_proc_number(struct finsh_token* self)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;474    {
000004  b0a1              SUB      sp,sp,#0x84
000006  4607              MOV      r7,r0
;;;475    	char ch;
;;;476    	char *p, buf[128];
;;;477    	long value;
;;;478    
;;;479    	value = 0;
000008  2600              MOVS     r6,#0
;;;480    	p = buf;
00000a  466d              MOV      r5,sp
;;;481    
;;;482    	ch  = token_next_char(self);
00000c  f7fffffe          BL       token_next_char
000010  4604              MOV      r4,r0
;;;483    	if ( ch == '0' )
;;;484    	{
;;;485    		int b;
;;;486    		ch = token_next_char(self);
;;;487    		if ( ch == 'x' || ch == 'X' )/*it's a hex number*/
;;;488    		{
;;;489    			b = 16;
;;;490    			ch = token_next_char(self);
;;;491    			while ( is_digit(ch) || is_alpha(ch) )
;;;492    			{
;;;493    				*p++ = ch;
;;;494    				ch = token_next_char(self);
;;;495    			}
;;;496    
;;;497    			*p = '\0';
;;;498    		}
;;;499    		else if ( ch == 'b' || ch == 'B' )
;;;500    		{
;;;501    			b = 2;
;;;502    			ch = token_next_char(self);
;;;503    			while ( (ch=='0')||(ch=='1') )
;;;504    			{
;;;505    				*p++ = ch;
;;;506    				ch = token_next_char(self);
;;;507    			}
;;;508    
;;;509    			*p = '\0';
;;;510    		}
;;;511    		else
;;;512    		{
;;;513    			b = 8;
;;;514    			while ( is_digit(ch) )
;;;515    			{
;;;516    				*p++ = ch;
;;;517    				ch = token_next_char(self);
;;;518    			}
;;;519    
;;;520    			*p = '\0';
;;;521    		}
;;;522    
;;;523    		self->value.int_value = token_spec_number(buf, strlen(buf), b);
;;;524    		self->current_token = finsh_token_type_value_int;
000012  f04f091b          MOV      r9,#0x1b
000016  2830              CMP      r0,#0x30              ;483
000018  d14b              BNE      |L9.178|
00001a  4638              MOV      r0,r7                 ;486
00001c  f7fffffe          BL       token_next_char
000020  4604              MOV      r4,r0                 ;486
000022  46b0              MOV      r8,r6                 ;486
000024  2878              CMP      r0,#0x78              ;487
000026  d007              BEQ      |L9.56|
000028  2c58              CMP      r4,#0x58              ;487
00002a  d005              BEQ      |L9.56|
00002c  2c62              CMP      r4,#0x62              ;499
00002e  d014              BEQ      |L9.90|
000030  2c42              CMP      r4,#0x42              ;499
000032  d012              BEQ      |L9.90|
000034  2608              MOVS     r6,#8                 ;513
000036  e02e              B        |L9.150|
                  |L9.56|
000038  2610              MOVS     r6,#0x10              ;489
00003a  e001              B        |L9.64|
                  |L9.60|
00003c  f8054b01          STRB     r4,[r5],#1            ;493
                  |L9.64|
000040  4638              MOV      r0,r7                 ;490
000042  f7fffffe          BL       token_next_char
000046  4604              MOV      r4,r0                 ;490
000048  3830              SUBS     r0,r0,#0x30           ;491
00004a  2809              CMP      r0,#9                 ;491
00004c  d9f6              BLS      |L9.60|
00004e  f0440020          ORR      r0,r4,#0x20           ;491
000052  3861              SUBS     r0,r0,#0x61           ;491
000054  281a              CMP      r0,#0x1a              ;491
000056  d3f1              BCC      |L9.60|
000058  e00b              B        |L9.114|
                  |L9.90|
00005a  2602              MOVS     r6,#2                 ;501
00005c  e001              B        |L9.98|
                  |L9.94|
00005e  f8050b01          STRB     r0,[r5],#1            ;505
                  |L9.98|
000062  4638              MOV      r0,r7                 ;502
000064  f7fffffe          BL       token_next_char
000068  4604              MOV      r4,r0                 ;502
00006a  2830              CMP      r0,#0x30              ;503
00006c  d0f7              BEQ      |L9.94|
00006e  2c31              CMP      r4,#0x31              ;503
000070  d0f5              BEQ      |L9.94|
                  |L9.114|
000072  f8858000          STRB     r8,[r5,#0]            ;509
000076  4668              MOV      r0,sp                 ;523
000078  f7fffffe          BL       strlen
00007c  4601              MOV      r1,r0                 ;523
00007e  4632              MOV      r2,r6                 ;523
000080  4668              MOV      r0,sp                 ;523
000082  f7fffffe          BL       token_spec_number
;;;525    	}
000086  60f8              STR      r0,[r7,#0xc]
000088  e018              B        |L9.188|
                  |L9.138|
00008a  f8054b01          STRB     r4,[r5],#1            ;516
00008e  4638              MOV      r0,r7                 ;517
000090  f7fffffe          BL       token_next_char
000094  4604              MOV      r4,r0                 ;517
                  |L9.150|
000096  f1a40030          SUB      r0,r4,#0x30           ;514
00009a  2809              CMP      r0,#9                 ;514
00009c  d9f5              BLS      |L9.138|
00009e  e7e8              B        |L9.114|
                  |L9.160|
;;;526    	else
;;;527    	{
;;;528    		while ( is_digit(ch) )
;;;529    		{
;;;530    			value = value*10 + ( ch - '0' );
0000a0  eb060086          ADD      r0,r6,r6,LSL #2
0000a4  eb040640          ADD      r6,r4,r0,LSL #1
;;;531    			ch = token_next_char(self);
0000a8  4638              MOV      r0,r7
0000aa  3e30              SUBS     r6,r6,#0x30
0000ac  f7fffffe          BL       token_next_char
0000b0  4604              MOV      r4,r0
                  |L9.178|
0000b2  f1a40030          SUB      r0,r4,#0x30           ;528
0000b6  2809              CMP      r0,#9                 ;528
0000b8  d9f2              BLS      |L9.160|
;;;532    		}
;;;533    
;;;534    		self->value.int_value = value;
0000ba  60fe              STR      r6,[r7,#0xc]
                  |L9.188|
;;;535    		self->current_token = finsh_token_type_value_int;
0000bc  f8879008          STRB     r9,[r7,#8]
;;;536    	}
;;;537    
;;;538    	switch ( ch )
0000c0  2c4c              CMP      r4,#0x4c
0000c2  d007              BEQ      |L9.212|
0000c4  2c6c              CMP      r4,#0x6c
0000c6  d005              BEQ      |L9.212|
;;;539    	{
;;;540    	case 'l':
;;;541    	case 'L':
;;;542    		self->current_token = finsh_token_type_value_long;
;;;543    		break;
;;;544    
;;;545    	default:
;;;546    		token_prev_char(self);
0000c8  4638              MOV      r0,r7
0000ca  f7fffffe          BL       token_prev_char
                  |L9.206|
;;;547    		break;
;;;548    	}
;;;549    }
0000ce  b021              ADD      sp,sp,#0x84
0000d0  e8bd83f0          POP      {r4-r9,pc}
                  |L9.212|
0000d4  201c              MOVS     r0,#0x1c              ;542
0000d6  7238              STRB     r0,[r7,#8]            ;542
0000d8  e7f9              B        |L9.206|
;;;550    
                          ENDP


                          AREA ||i.token_run||, CODE, READONLY, ALIGN=2

                  token_run PROC
;;;147    
;;;148    static void token_run(struct finsh_token* self)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;149    {
000004  4604              MOV      r4,r0
                  |L10.6|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       token_next_char
00000c  2820              CMP      r0,#0x20
00000e  d0fa              BEQ      |L10.6|
000010  2809              CMP      r0,#9
000012  d0f8              BEQ      |L10.6|
000014  280d              CMP      r0,#0xd
000016  d0f6              BEQ      |L10.6|
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       token_prev_char
;;;150    	char ch;
;;;151    
;;;152    	token_trim_space(self); /* first trim space and tab. */
;;;153    	token_get_string(self, &(self->string[0]));
00001e  f1040110          ADD      r1,r4,#0x10
000022  460e              MOV      r6,r1
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       token_get_string
;;;154    
;;;155    	if ( is_eof(self) ) /*if it is eof, break;*/
00002a  7820              LDRB     r0,[r4,#0]
;;;156    	{
;;;157    		self->current_token = finsh_token_type_eof;
00002c  2721              MOVS     r7,#0x21
00002e  2800              CMP      r0,#0                 ;155
000030  d178              BNE      |L10.292|
;;;158    		return ;
;;;159    	}
;;;160    
;;;161    	if (self->string[0] != '\0') /*It is a key word or a identifier.*/
000032  7c20              LDRB     r0,[r4,#0x10]
000034  f04f0900          MOV      r9,#0
000038  f04f0801          MOV      r8,#1
00003c  b188              CBZ      r0,|L10.98|
;;;162    	{
;;;163    		if ( !token_match_name(self, (char*)self->string) )
00003e  4637              MOV      r7,r6
000040  4e5c              LDR      r6,|L10.436|
000042  2500              MOVS     r5,#0
                  |L10.68|
000044  4639              MOV      r1,r7
000046  f8560035          LDR      r0,[r6,r5,LSL #3]
00004a  f7fffffe          BL       strcmp
00004e  b120              CBZ      r0,|L10.90|
000050  1c6d              ADDS     r5,r5,#1
000052  2d08              CMP      r5,#8
000054  d3f6              BCC      |L10.68|
;;;164    		{
;;;165    			self->current_token = finsh_token_type_identifier;
000056  201f              MOVS     r0,#0x1f
000058  e077              B        |L10.330|
                  |L10.90|
00005a  eb0600c5          ADD      r0,r6,r5,LSL #3
00005e  7900              LDRB     r0,[r0,#4]
000060  e073              B        |L10.330|
                  |L10.98|
;;;166    		}
;;;167    	}
;;;168    	else/*It is a operator character.*/
;;;169    	{
;;;170    		ch = token_next_char(self);
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       token_next_char
000068  2520              MOVS     r5,#0x20
;;;171    
;;;172    		switch ( ch )
00006a  282d              CMP      r0,#0x2d
00006c  d043              BEQ      |L10.246|
00006e  dc0b              BGT      |L10.136|
000070  f1a00122          SUB      r1,r0,#0x22
000074  290b              CMP      r1,#0xb
000076  d219              BCS      |L10.172|
000078  e8dff001          TBB      [pc,r1]
00007c  8d18186b          DCB      0x8d,0x18,0x18,0x6b
000080  2d732327          DCB      0x2d,0x73,0x23,0x27
000084  2f312900          DCB      0x2f,0x31,0x29,0x00
                  |L10.136|
000088  283e              CMP      r0,#0x3e
00008a  d054              BEQ      |L10.310|
00008c  dc08              BGT      |L10.160|
00008e  282f              CMP      r0,#0x2f
000090  d03d              BEQ      |L10.270|
000092  283b              CMP      r0,#0x3b
000094  d01d              BEQ      |L10.210|
000096  283c              CMP      r0,#0x3c
000098  d046              BEQ      |L10.296|
00009a  283d              CMP      r0,#0x3d
00009c  d106              BNE      |L10.172|
00009e  e05e              B        |L10.350|
                  |L10.160|
0000a0  285e              CMP      r0,#0x5e
0000a2  d05a              BEQ      |L10.346|
0000a4  287c              CMP      r0,#0x7c
0000a6  d052              BEQ      |L10.334|
0000a8  287e              CMP      r0,#0x7e
0000aa  d054              BEQ      |L10.342|
                  |L10.172|
0000ac  3830              SUBS     r0,r0,#0x30
;;;173    		{
;;;174    		case '(':
;;;175    			self->current_token = finsh_token_type_left_paren;
;;;176    			break;
;;;177    
;;;178    		case ')':
;;;179    			self->current_token = finsh_token_type_right_paren;
;;;180    			break;
;;;181    
;;;182    		case ',':
;;;183    			self->current_token = finsh_token_type_comma;
;;;184    			break;
;;;185    
;;;186    		case ';':
;;;187    			self->current_token = finsh_token_type_semicolon;
;;;188    			break;
;;;189    
;;;190    		case '&':
;;;191    			self->current_token = finsh_token_type_and;
;;;192    			break;
;;;193    
;;;194    		case '*':
;;;195    			self->current_token = finsh_token_type_mul;
;;;196    			break;
;;;197    
;;;198    		case '+':
;;;199    			ch = token_next_char(self);
;;;200    
;;;201    			if ( ch == '+' )
;;;202    			{
;;;203    				self->current_token = finsh_token_type_inc;
;;;204    			}
;;;205    			else
;;;206    			{
;;;207    				token_prev_char(self);
;;;208    				self->current_token = finsh_token_type_add;
;;;209    			}
;;;210    			break;
;;;211    
;;;212    		case '-':
;;;213    			ch = token_next_char(self);
;;;214    
;;;215    			if ( ch == '-' )
;;;216    			{
;;;217    				self->current_token = finsh_token_type_dec;
;;;218    			}
;;;219    			else
;;;220    			{
;;;221    				token_prev_char(self);
;;;222    				self->current_token = finsh_token_type_sub;
;;;223    			}
;;;224    			break;
;;;225    
;;;226    		case '/':
;;;227    			ch = token_next_char(self);
;;;228    			if (ch == '/')
;;;229    			{
;;;230    				/* line comments, set to end of file */
;;;231    				self->current_token = finsh_token_type_eof;
;;;232    			}
;;;233    			else
;;;234    			{
;;;235    				token_prev_char(self);
;;;236    				self->current_token = finsh_token_type_div;
;;;237    			}
;;;238    			break;
;;;239    
;;;240    		case '<':
;;;241    			ch = token_next_char(self);
;;;242    
;;;243    			if ( ch == '<' )
;;;244    			{
;;;245    				self->current_token = finsh_token_type_shl;
;;;246    			}
;;;247    			else
;;;248    			{
;;;249    				token_prev_char(self);
;;;250    				self->current_token = finsh_token_type_bad;
;;;251    			}
;;;252    			break;
;;;253    
;;;254    		case '>':
;;;255    			ch = token_next_char(self);
;;;256    
;;;257    			if ( ch == '>' )
;;;258    			{
;;;259    				self->current_token = finsh_token_type_shr;
;;;260    			}
;;;261    			else
;;;262    			{
;;;263    				token_prev_char(self);
;;;264    				self->current_token = finsh_token_type_bad;
;;;265    			}
;;;266    			break;
;;;267    
;;;268    		case '|':
;;;269    			self->current_token = finsh_token_type_or;
;;;270    			break;
;;;271    
;;;272    		case '%':
;;;273    			self->current_token = finsh_token_type_mod;
;;;274    			break;
;;;275    
;;;276    		case '~':
;;;277    			self->current_token = finsh_token_type_bitwise;
;;;278    			break;
;;;279    
;;;280    		case '^':
;;;281    			self->current_token = finsh_token_type_xor;
;;;282    			break;
;;;283    
;;;284    		case '=':
;;;285    			self->current_token = finsh_token_type_assign;
;;;286    			break;
;;;287    
;;;288    		case '\'':
;;;289    			self->value.char_value = token_proc_char(self);
;;;290    			self->current_token = finsh_token_type_value_char;
;;;291    			break;
;;;292    
;;;293    		case '"':
;;;294    			token_proc_string(self);
;;;295    			self->current_token = finsh_token_type_value_string;
;;;296    			break;
;;;297    
;;;298    		default:
;;;299    			if ( is_digit(ch) )
0000ae  2809              CMP      r0,#9
0000b0  d87b              BHI      |L10.426|
;;;300    			{
;;;301    				token_prev_char(self);
0000b2  4620              MOV      r0,r4
0000b4  f7fffffe          BL       token_prev_char
;;;302    				token_proc_number(self);
0000b8  4620              MOV      r0,r4
0000ba  e8bd47f0          POP      {r4-r10,lr}
0000be  f7ffbffe          B.W      token_proc_number
0000c2  f8848008          STRB     r8,[r4,#8]            ;175
                  |L10.198|
;;;303    				break;
;;;304    			}
;;;305    
;;;306    			finsh_error_set(FINSH_ERROR_UNKNOWN_TOKEN);
;;;307    			self->current_token = finsh_token_type_bad;
;;;308    
;;;309    			break;
;;;310    		}
;;;311    	}
;;;312    }
0000c6  e8bd87f0          POP      {r4-r10,pc}
0000ca  2002              MOVS     r0,#2                 ;179
0000cc  e03d              B        |L10.330|
0000ce  2003              MOVS     r0,#3                 ;183
0000d0  e03b              B        |L10.330|
                  |L10.210|
0000d2  2004              MOVS     r0,#4                 ;187
0000d4  e039              B        |L10.330|
0000d6  200d              MOVS     r0,#0xd               ;191
0000d8  e037              B        |L10.330|
0000da  2005              MOVS     r0,#5                 ;195
0000dc  e035              B        |L10.330|
0000de  4620              MOV      r0,r4                 ;199
0000e0  f7fffffe          BL       token_next_char
0000e4  282b              CMP      r0,#0x2b              ;201
0000e6  d004              BEQ      |L10.242|
0000e8  4620              MOV      r0,r4                 ;207
0000ea  f7fffffe          BL       token_prev_char
0000ee  2006              MOVS     r0,#6                 ;208
0000f0  e02b              B        |L10.330|
                  |L10.242|
0000f2  2007              MOVS     r0,#7                 ;203
0000f4  e029              B        |L10.330|
                  |L10.246|
0000f6  4620              MOV      r0,r4                 ;213
0000f8  f7fffffe          BL       token_next_char
0000fc  282d              CMP      r0,#0x2d              ;215
0000fe  d004              BEQ      |L10.266|
000100  4620              MOV      r0,r4                 ;221
000102  f7fffffe          BL       token_prev_char
000106  2008              MOVS     r0,#8                 ;222
000108  e01f              B        |L10.330|
                  |L10.266|
00010a  2009              MOVS     r0,#9                 ;217
00010c  e01d              B        |L10.330|
                  |L10.270|
00010e  4620              MOV      r0,r4                 ;227
000110  f7fffffe          BL       token_next_char
000114  282f              CMP      r0,#0x2f              ;228
000116  d005              BEQ      |L10.292|
000118  4620              MOV      r0,r4                 ;235
00011a  f7fffffe          BL       token_prev_char
00011e  200a              MOVS     r0,#0xa               ;236
000120  e013              B        |L10.330|
000122  e7ff              B        |L10.292|
                  |L10.292|
000124  7227              STRB     r7,[r4,#8]            ;231
000126  e7ce              B        |L10.198|
                  |L10.296|
000128  4620              MOV      r0,r4                 ;241
00012a  f7fffffe          BL       token_next_char
00012e  283c              CMP      r0,#0x3c              ;243
000130  d106              BNE      |L10.320|
000132  2011              MOVS     r0,#0x11              ;245
000134  e009              B        |L10.330|
                  |L10.310|
000136  4620              MOV      r0,r4                 ;255
000138  f7fffffe          BL       token_next_char
00013c  283e              CMP      r0,#0x3e              ;257
00013e  d003              BEQ      |L10.328|
                  |L10.320|
000140  4620              MOV      r0,r4                 ;263
000142  f7fffffe          BL       token_prev_char
000146  e033              B        |L10.432|
                  |L10.328|
000148  2012              MOVS     r0,#0x12              ;259
                  |L10.330|
00014a  7220              STRB     r0,[r4,#8]            ;165
00014c  e7bb              B        |L10.198|
                  |L10.334|
00014e  200e              MOVS     r0,#0xe               ;269
000150  e7fb              B        |L10.330|
000152  200b              MOVS     r0,#0xb               ;273
000154  e7f9              B        |L10.330|
                  |L10.342|
000156  2010              MOVS     r0,#0x10              ;277
000158  e7f7              B        |L10.330|
                  |L10.346|
00015a  200f              MOVS     r0,#0xf               ;281
00015c  e7f5              B        |L10.330|
                  |L10.350|
00015e  200c              MOVS     r0,#0xc               ;285
000160  e7f3              B        |L10.330|
000162  4620              MOV      r0,r4                 ;289
000164  f7fffffe          BL       token_proc_char
000168  7320              STRB     r0,[r4,#0xc]          ;289
00016a  201a              MOVS     r0,#0x1a              ;290
00016c  e7ed              B        |L10.330|
                  |L10.366|
00016e  4620              MOV      r0,r4                 ;291
000170  f7fffffe          BL       token_next_char
000174  7821              LDRB     r1,[r4,#0]            ;291
000176  b119              CBZ      r1,|L10.384|
000178  200a              MOVS     r0,#0xa               ;291
00017a  f7fffffe          BL       finsh_error_set
00017e  e00e              B        |L10.414|
                  |L10.384|
000180  285c              CMP      r0,#0x5c              ;291
000182  d002              BEQ      |L10.394|
000184  2822              CMP      r0,#0x22              ;291
000186  d00d              BEQ      |L10.420|
000188  e003              B        |L10.402|
                  |L10.394|
00018a  4620              MOV      r0,r4                 ;291
00018c  f7fffffe          BL       token_proc_escape
000190  b2c0              UXTB     r0,r0                 ;291
                  |L10.402|
000192  f8060b01          STRB     r0,[r6],#1            ;291
000196  1b30              SUBS     r0,r6,r4              ;291
000198  3810              SUBS     r0,r0,#0x10           ;291
00019a  2880              CMP      r0,#0x80              ;291
00019c  dbe7              BLT      |L10.366|
                  |L10.414|
00019e  201d              MOVS     r0,#0x1d              ;295
0001a0  e7d3              B        |L10.330|
0001a2  e002              B        |L10.426|
                  |L10.420|
0001a4  f8869000          STRB     r9,[r6,#0]            ;296
0001a8  e7f9              B        |L10.414|
                  |L10.426|
0001aa  200b              MOVS     r0,#0xb               ;306
0001ac  f7fffffe          BL       finsh_error_set
                  |L10.432|
0001b0  7225              STRB     r5,[r4,#8]            ;264
0001b2  e788              B        |L10.198|
;;;313    
                          ENDP

                  |L10.436|
                          DCD      ||.constdata||

                          AREA ||i.token_spec_number||, CODE, READONLY, ALIGN=1

                  token_spec_number PROC
;;;553    
;;;554    static long token_spec_number(char* string, int length, int b)
000000  b5fc              PUSH     {r2-r7,lr}
;;;555    {
;;;556    	char* p;
;;;557    	int t;
;;;558    	int i, j, shift=1;
000002  2501              MOVS     r5,#1
;;;559    	unsigned int bn[BN_SIZE], v;
;;;560    	long d;
;;;561    
;;;562    	p = string;
;;;563    	i = 0;
000004  2600              MOVS     r6,#0
;;;564    
;;;565    	switch ( b )
000006  2a02              CMP      r2,#2
000008  d006              BEQ      |L11.24|
00000a  2a08              CMP      r2,#8
00000c  d003              BEQ      |L11.22|
00000e  2a10              CMP      r2,#0x10
000010  d102              BNE      |L11.24|
;;;566    	{
;;;567    	case 16: shift = 4;
000012  2504              MOVS     r5,#4
;;;568    		break;
000014  e000              B        |L11.24|
                  |L11.22|
;;;569    	case 8:  shift = 3;
000016  2503              MOVS     r5,#3
                  |L11.24|
;;;570    		break;
;;;571    	case 2:  shift = 1;
;;;572    		break;
;;;573    	default: break;
;;;574    	}
;;;575    
;;;576    	for ( j=0; j<BN_SIZE ; j++) bn[j] = 0;
000018  2200              MOVS     r2,#0
00001a  4613              MOV      r3,r2
00001c  46ec              MOV      r12,sp                ;559
                  |L11.30|
00001e  f84c3022          STR      r3,[r12,r2,LSL #2]
000022  1c52              ADDS     r2,r2,#1
000024  2a02              CMP      r2,#2
000026  dbfa              BLT      |L11.30|
000028  e01e              B        |L11.104|
                  |L11.42|
;;;577    
;;;578    	while ( i<length )
;;;579    	{
;;;580    		t = *p++;
00002a  f8103b01          LDRB     r3,[r0],#1
;;;581    		if ( t>='a' && t <='f' )
00002e  f1a30261          SUB      r2,r3,#0x61
000032  2a05              CMP      r2,#5
000034  d801              BHI      |L11.58|
000036  3b57              SUBS     r3,r3,#0x57
;;;582    		{
;;;583    			t = t - 'a' +10;
000038  e006              B        |L11.72|
                  |L11.58|
;;;584    		}
;;;585    		else if ( t >='A' && t <='F' )
00003a  f1a30241          SUB      r2,r3,#0x41
00003e  2a05              CMP      r2,#5
000040  d801              BHI      |L11.70|
000042  3b37              SUBS     r3,r3,#0x37
;;;586    		{
;;;587    			t = t - 'A' +10;
000044  e000              B        |L11.72|
                  |L11.70|
000046  3b30              SUBS     r3,r3,#0x30
                  |L11.72|
;;;588    		}
;;;589    		else t = t - '0';
;;;590    
;;;591    		for ( j=0; j<BN_SIZE ; j++)
000048  2200              MOVS     r2,#0
;;;592    		{
;;;593    			v = bn[j];
;;;594    			bn[j] = (v<<shift) | t;
;;;595    			t = v >> (32 - shift);
00004a  f1c50e20          RSB      lr,r5,#0x20
                  |L11.78|
00004e  f85c4022          LDR      r4,[r12,r2,LSL #2]    ;593
000052  fa04f705          LSL      r7,r4,r5              ;594
000056  431f              ORRS     r7,r7,r3              ;594
000058  f84c7022          STR      r7,[r12,r2,LSL #2]    ;594
00005c  fa24f30e          LSR      r3,r4,lr
000060  1c52              ADDS     r2,r2,#1
000062  2a02              CMP      r2,#2                 ;591
000064  dbf3              BLT      |L11.78|
000066  1c76              ADDS     r6,r6,#1              ;591
                  |L11.104|
000068  428e              CMP      r6,r1                 ;578
00006a  dbde              BLT      |L11.42|
;;;596    		}
;;;597    		i++;
;;;598    	}
;;;599    
;;;600    	d = (long)bn[0];
00006c  9800              LDR      r0,[sp,#0]
;;;601    
;;;602    	return d;
;;;603    }
00006e  bdfc              POP      {r2-r7,pc}
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  finsh_name_table
                          DCD      ||.conststring||
000004  14000000          DCB      0x14,0x00,0x00,0x00
                          DCD      ||.conststring||+0x8
00000c  15000000          DCB      0x15,0x00,0x00,0x00
                          DCD      ||.conststring||+0x10
000014  16000000          DCB      0x16,0x00,0x00,0x00
                          DCD      ||.conststring||+0x18
00001c  17000000          DCB      0x17,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1c
000024  18000000          DCB      0x18,0x00,0x00,0x00
                          DCD      ||.conststring||+0x24
00002c  19000000          DCB      0x19,0x00,0x00,0x00
                          DCD      ||.conststring||+0x30
000034  1e000000          DCB      0x1e,0x00,0x00,0x00
                          DCD      ||.conststring||+0x38
00003c  1e000000          DCB      0x1e,0x00,0x00,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  766f6964          DCB      "void",0
000004  00      
000005  00                DCB      0
000006  00                DCB      0
000007  00                DCB      0
000008  63686172          DCB      "char",0
00000c  00      
00000d  00                DCB      0
00000e  00                DCB      0
00000f  00                DCB      0
000010  73686f72          DCB      "short",0
000014  7400    
000016  00                DCB      0
000017  00                DCB      0
000018  696e7400          DCB      "int",0
00001c  6c6f6e67          DCB      "long",0
000020  00      
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
000024  756e7369          DCB      "unsigned",0
000028  676e6564
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
000030  4e554c4c          DCB      "NULL",0
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
000038  6e756c6c          DCB      "null",0
00003c  00      
