; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\system_stm32f4xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\system_stm32f4xx.crf ..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Source\Templates\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;341      */
;;;342    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;343    {
;;;344    /******************************************************************************/
;;;345    /*            PLL (clocked by HSE) used as System clock source                */
;;;346    /******************************************************************************/
;;;347      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2200              MOVS     r2,#0
;;;348      
;;;349      /* Enable HSE */
;;;350      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  4927              LDR      r1,|L1.164|
000006  9200              STR      r2,[sp,#0]            ;347
000008  9201              STR      r2,[sp,#4]
00000a  6808              LDR      r0,[r1,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  6008              STR      r0,[r1,#0]
;;;351     
;;;352      /* Wait till HSE is ready and if Time out is reached exit */
;;;353      do
;;;354      {
;;;355        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;356        StartUpCounter++;
;;;357      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000012  f44f63a0          MOV      r3,#0x500
                  |L1.22|
000016  6808              LDR      r0,[r1,#0]            ;355
000018  f4003000          AND      r0,r0,#0x20000        ;355
00001c  9001              STR      r0,[sp,#4]            ;356
00001e  9800              LDR      r0,[sp,#0]            ;356
000020  1c40              ADDS     r0,r0,#1              ;356
000022  9000              STR      r0,[sp,#0]
000024  9801              LDR      r0,[sp,#4]
000026  b910              CBNZ     r0,|L1.46|
000028  9800              LDR      r0,[sp,#0]
00002a  4298              CMP      r0,r3
00002c  d1f3              BNE      |L1.22|
                  |L1.46|
;;;358    
;;;359      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00002e  6808              LDR      r0,[r1,#0]
000030  0380              LSLS     r0,r0,#14
000032  d534              BPL      |L1.158|
;;;360      {
;;;361        HSEStatus = (uint32_t)0x01;
000034  2001              MOVS     r0,#1
;;;362      }
;;;363      else
;;;364      {
;;;365        HSEStatus = (uint32_t)0x00;
;;;366      }
;;;367    
;;;368      if (HSEStatus == (uint32_t)0x01)
;;;369      {
;;;370        /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
;;;371        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
000036  9001              STR      r0,[sp,#4]
000038  481a              LDR      r0,|L1.164|
00003a  3040              ADDS     r0,r0,#0x40
00003c  6802              LDR      r2,[r0,#0]
00003e  f0425280          ORR      r2,r2,#0x10000000
000042  6002              STR      r2,[r0,#0]
;;;372        PWR->CR |= PWR_CR_VOS;
000044  4818              LDR      r0,|L1.168|
000046  6802              LDR      r2,[r0,#0]
000048  f4424280          ORR      r2,r2,#0x4000
00004c  6002              STR      r2,[r0,#0]
;;;373    
;;;374        /* HCLK = SYSCLK / 1*/
;;;375        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
00004e  4815              LDR      r0,|L1.164|
000050  3008              ADDS     r0,r0,#8
000052  6802              LDR      r2,[r0,#0]
000054  6002              STR      r2,[r0,#0]
;;;376          
;;;377        /* PCLK2 = HCLK / 2*/
;;;378        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000056  6802              LDR      r2,[r0,#0]
000058  f4424200          ORR      r2,r2,#0x8000
00005c  6002              STR      r2,[r0,#0]
;;;379        
;;;380        /* PCLK1 = HCLK / 4*/
;;;381        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00005e  6802              LDR      r2,[r0,#0]
000060  f44252a0          ORR      r2,r2,#0x1400
000064  6002              STR      r2,[r0,#0]
;;;382    
;;;383        /* Configure the main PLL */
;;;384        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000066  1f03              SUBS     r3,r0,#4
000068  4a10              LDR      r2,|L1.172|
00006a  601a              STR      r2,[r3,#0]
;;;385                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;386    
;;;387        /* Enable the main PLL */
;;;388        RCC->CR |= RCC_CR_PLLON;
00006c  680a              LDR      r2,[r1,#0]
00006e  f0427280          ORR      r2,r2,#0x1000000
000072  600a              STR      r2,[r1,#0]
                  |L1.116|
;;;389    
;;;390        /* Wait till the main PLL is ready */
;;;391        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000074  680a              LDR      r2,[r1,#0]
000076  0192              LSLS     r2,r2,#6
000078  d5fc              BPL      |L1.116|
;;;392        {
;;;393        }
;;;394       
;;;395        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;396        FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
00007a  490d              LDR      r1,|L1.176|
00007c  f2406205          MOV      r2,#0x605
000080  600a              STR      r2,[r1,#0]
;;;397    
;;;398        /* Select the main PLL as system clock source */
;;;399        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000082  6801              LDR      r1,[r0,#0]
000084  f0210103          BIC      r1,r1,#3
000088  6001              STR      r1,[r0,#0]
;;;400        RCC->CFGR |= RCC_CFGR_SW_PLL;
00008a  6801              LDR      r1,[r0,#0]
00008c  f0410102          ORR      r1,r1,#2
000090  6001              STR      r1,[r0,#0]
                  |L1.146|
;;;401    
;;;402        /* Wait till the main PLL is used as system clock source */
;;;403        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
000092  6801              LDR      r1,[r0,#0]
000094  f3c10181          UBFX     r1,r1,#2,#2
000098  2902              CMP      r1,#2
00009a  d1fa              BNE      |L1.146|
;;;404        {
;;;405        }
;;;406      }
;;;407      else
;;;408      { /* If HSE fails to start-up, the application will have wrong clock
;;;409             configuration. User can add here some code to deal with this error */
;;;410      }
;;;411    
;;;412    }
00009c  bd0c              POP      {r2,r3,pc}
                  |L1.158|
00009e  9201              STR      r2,[sp,#4]            ;365
0000a0  bd0c              POP      {r2,r3,pc}
;;;413    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L1.164|
                          DCD      0x40023800
                  |L1.168|
                          DCD      0x40007000
                  |L1.172|
                          DCD      0x07405419
                  |L1.176|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;285      */
;;;286    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;287    {
;;;288      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;289      
;;;290      /* Get SYSCLK source -------------------------------------------------------*/
;;;291      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4d1a              LDR      r5,|L2.108|
000004  6828              LDR      r0,[r5,#0]
;;;292    
;;;293      switch (tmp)
;;;294      {
;;;295        case 0x00:  /* HSI used as system clock source */
;;;296          SystemCoreClock = HSI_VALUE;
000006  4b1a              LDR      r3,|L2.112|
000008  491a              LDR      r1,|L2.116|
00000a  f010000c          ANDS     r0,r0,#0xc            ;291
00000e  d004              BEQ      |L2.26|
;;;297          break;
;;;298        case 0x04:  /* HSE used as system clock source */
;;;299          SystemCoreClock = HSE_VALUE;
000010  105e              ASRS     r6,r3,#1
000012  2804              CMP      r0,#4                 ;293
000014  d003              BEQ      |L2.30|
000016  2808              CMP      r0,#8                 ;293
000018  d003              BEQ      |L2.34|
                  |L2.26|
00001a  600b              STR      r3,[r1,#0]            ;297  ; SystemCoreClock
00001c  e01b              B        |L2.86|
                  |L2.30|
;;;300          break;
00001e  600e              STR      r6,[r1,#0]  ; SystemCoreClock
000020  e019              B        |L2.86|
                  |L2.34|
;;;301        case 0x08:  /* PLL used as system clock source */
;;;302    
;;;303          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;304             SYSCLK = PLL_VCO / PLL_P
;;;305             */    
;;;306          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000022  4a12              LDR      r2,|L2.108|
000024  1f12              SUBS     r2,r2,#4
000026  6810              LDR      r0,[r2,#0]
000028  f3c05480          UBFX     r4,r0,#22,#1
;;;307          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002c  6810              LDR      r0,[r2,#0]
00002e  f000003f          AND      r0,r0,#0x3f
;;;308          
;;;309          if (pllsource != 0)
000032  b114              CBZ      r4,|L2.58|
;;;310          {
;;;311            /* HSE used as PLL clock source */
;;;312            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000034  fbb6f0f0          UDIV     r0,r6,r0
000038  e001              B        |L2.62|
                  |L2.58|
;;;313          }
;;;314          else
;;;315          {
;;;316            /* HSI used as PLL clock source */
;;;317            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
00003a  fbb3f0f0          UDIV     r0,r3,r0
                  |L2.62|
00003e  6813              LDR      r3,[r2,#0]
;;;318          }
;;;319    
;;;320          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000040  6812              LDR      r2,[r2,#0]
000042  f3c31388          UBFX     r3,r3,#6,#9           ;317
000046  4358              MULS     r0,r3,r0              ;317
000048  f3c24201          UBFX     r2,r2,#16,#2
00004c  1c52              ADDS     r2,r2,#1
00004e  0052              LSLS     r2,r2,#1
;;;321          SystemCoreClock = pllvco/pllp;
000050  fbb0f0f2          UDIV     r0,r0,r2
000054  6008              STR      r0,[r1,#0]  ; SystemCoreClock
                  |L2.86|
;;;322          break;
;;;323        default:
;;;324          SystemCoreClock = HSI_VALUE;
;;;325          break;
;;;326      }
;;;327      /* Compute HCLK frequency --------------------------------------------------*/
;;;328      /* Get HCLK prescaler */
;;;329      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000056  6828              LDR      r0,[r5,#0]
000058  4a06              LDR      r2,|L2.116|
00005a  f3c01003          UBFX     r0,r0,#4,#4
00005e  1d12              ADDS     r2,r2,#4
000060  5c10              LDRB     r0,[r2,r0]
;;;330      /* HCLK frequency */
;;;331      SystemCoreClock >>= tmp;
000062  680a              LDR      r2,[r1,#0]  ; SystemCoreClock
000064  40c2              LSRS     r2,r2,r0
000066  600a              STR      r2,[r1,#0]  ; SystemCoreClock
;;;332    }
000068  bd70              POP      {r4-r6,pc}
;;;333    
                          ENDP

00006a  0000              DCW      0x0000
                  |L2.108|
                          DCD      0x40023808
                  |L2.112|
                          DCD      0x00f42400
                  |L2.116|
                          DCD      ||.data||

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;207      */
;;;208    void SystemInit(void)
000000  4812              LDR      r0,|L3.76|
;;;209    {
000002  b510              PUSH     {r4,lr}
;;;210      /* FPU settings ------------------------------------------------------------*/
;;;211      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;212        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000004  6801              LDR      r1,[r0,#0]
000006  f4410170          ORR      r1,r1,#0xf00000
00000a  6001              STR      r1,[r0,#0]
;;;213      #endif
;;;214    
;;;215      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;216      /* Set HSION bit */
;;;217      RCC->CR |= (uint32_t)0x00000001;
00000c  4810              LDR      r0,|L3.80|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410101          ORR      r1,r1,#1
000014  6001              STR      r1,[r0,#0]
;;;218    
;;;219      /* Reset CFGR register */
;;;220      RCC->CFGR = 0x00000000;
000016  4a0e              LDR      r2,|L3.80|
000018  2100              MOVS     r1,#0
00001a  3208              ADDS     r2,r2,#8
00001c  6011              STR      r1,[r2,#0]
;;;221    
;;;222      /* Reset HSEON, CSSON and PLLON bits */
;;;223      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001e  6802              LDR      r2,[r0,#0]
000020  4b0c              LDR      r3,|L3.84|
000022  401a              ANDS     r2,r2,r3
000024  6002              STR      r2,[r0,#0]
;;;224    
;;;225      /* Reset PLLCFGR register */
;;;226      RCC->PLLCFGR = 0x24003010;
000026  1d03              ADDS     r3,r0,#4
000028  4a0b              LDR      r2,|L3.88|
00002a  601a              STR      r2,[r3,#0]
;;;227    
;;;228      /* Reset HSEBYP bit */
;;;229      RCC->CR &= (uint32_t)0xFFFBFFFF;
00002c  6802              LDR      r2,[r0,#0]
00002e  f4222280          BIC      r2,r2,#0x40000
000032  6002              STR      r2,[r0,#0]
;;;230    
;;;231      /* Disable all interrupts */
;;;232      RCC->CIR = 0x00000000;
000034  4806              LDR      r0,|L3.80|
000036  300c              ADDS     r0,r0,#0xc
000038  6001              STR      r1,[r0,#0]
;;;233    
;;;234    #ifdef DATA_IN_ExtSRAM
;;;235      SystemInit_ExtMemCtl(); 
;;;236    #endif /* DATA_IN_ExtSRAM */
;;;237             
;;;238      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;239         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;240      SetSysClock();
00003a  f7fffffe          BL       SetSysClock
;;;241    
;;;242      /* Configure the Vector Table location add offset address ------------------*/
;;;243    #ifdef VECT_TAB_SRAM
;;;244      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;245    #else
;;;246      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00003e  4903              LDR      r1,|L3.76|
000040  f04f6000          MOV      r0,#0x8000000
000044  3980              SUBS     r1,r1,#0x80
000046  6008              STR      r0,[r1,#0]
;;;247    #endif
;;;248    }
000048  bd10              POP      {r4,pc}
;;;249    
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      0xe000ed88
                  |L3.80|
                          DCD      0x40023800
                  |L3.84|
                          DCD      0xfef6ffff
                  |L3.88|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\ST\\STM32F4xx\\Source\\Templates\\system_stm32f4xx.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 128
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
