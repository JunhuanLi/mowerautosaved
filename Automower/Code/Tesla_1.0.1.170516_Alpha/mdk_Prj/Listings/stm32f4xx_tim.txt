; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f4xx_tim.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_tim.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\stm32f4xx_tim.crf ..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_tim.c]
                          THUMB

                          AREA ||i.TI1_Config||, CODE, READONLY, ALIGN=1

                  TI1_Config PROC
;;;3190     */
;;;3191   static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000000  b570              PUSH     {r4-r6,lr}
;;;3192                          uint16_t TIM_ICFilter)
;;;3193   {
;;;3194     uint16_t tmpccmr1 = 0, tmpccer = 0;
;;;3195   
;;;3196     /* Disable the Channel 1: Reset the CC1E Bit */
;;;3197     TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
000002  8c04              LDRH     r4,[r0,#0x20]
000004  f0240401          BIC      r4,r4,#1
000008  8404              STRH     r4,[r0,#0x20]
;;;3198     tmpccmr1 = TIMx->CCMR1;
00000a  8b05              LDRH     r5,[r0,#0x18]
;;;3199     tmpccer = TIMx->CCER;
00000c  8c04              LDRH     r4,[r0,#0x20]
;;;3200   
;;;3201     /* Select the Input and set the filter */
;;;3202     tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
;;;3203     tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
00000e  f64f76ff          MOV      r6,#0xffff
000012  ea061303          AND      r3,r6,r3,LSL #4
000016  4313              ORRS     r3,r3,r2
000018  f02505f3          BIC      r5,r5,#0xf3           ;3202
00001c  432b              ORRS     r3,r3,r5
;;;3204   
;;;3205     /* Select the Polarity and set the CC1E Bit */
;;;3206     tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
00001e  f024020a          BIC      r2,r4,#0xa
;;;3207     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
000022  430a              ORRS     r2,r2,r1
000024  f0420101          ORR      r1,r2,#1
;;;3208   
;;;3209     /* Write to TIMx CCMR1 and CCER registers */
;;;3210     TIMx->CCMR1 = tmpccmr1;
000028  8303              STRH     r3,[r0,#0x18]
;;;3211     TIMx->CCER = tmpccer;
00002a  8401              STRH     r1,[r0,#0x20]
;;;3212   }
00002c  bd70              POP      {r4-r6,pc}
;;;3213   
                          ENDP


                          AREA ||i.TI2_Config||, CODE, READONLY, ALIGN=1

                  TI2_Config PROC
;;;3231     */
;;;3232   static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000000  b5f0              PUSH     {r4-r7,lr}
;;;3233                          uint16_t TIM_ICFilter)
;;;3234   {
;;;3235     uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
;;;3236   
;;;3237     /* Disable the Channel 2: Reset the CC2E Bit */
;;;3238     TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
000002  8c04              LDRH     r4,[r0,#0x20]
000004  f0240410          BIC      r4,r4,#0x10
000008  8404              STRH     r4,[r0,#0x20]
;;;3239     tmpccmr1 = TIMx->CCMR1;
00000a  8b07              LDRH     r7,[r0,#0x18]
;;;3240     tmpccer = TIMx->CCER;
00000c  8c06              LDRH     r6,[r0,#0x20]
;;;3241     tmp = (uint16_t)(TIM_ICPolarity << 4);
00000e  f64f74ff          MOV      r4,#0xffff
000012  ea041501          AND      r5,r4,r1,LSL #4
;;;3242   
;;;3243     /* Select the Input and set the filter */
;;;3244     tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
000016  f4274773          BIC      r7,r7,#0xf300
;;;3245     tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
00001a  ea043103          AND      r1,r4,r3,LSL #12
00001e  4339              ORRS     r1,r1,r7
;;;3246     tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
000020  ea042202          AND      r2,r4,r2,LSL #8
000024  430a              ORRS     r2,r2,r1
;;;3247   
;;;3248     /* Select the Polarity and set the CC2E Bit */
;;;3249     tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
000026  f02601a0          BIC      r1,r6,#0xa0
;;;3250     tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
00002a  4329              ORRS     r1,r1,r5
00002c  f0410110          ORR      r1,r1,#0x10
;;;3251   
;;;3252     /* Write to TIMx CCMR1 and CCER registers */
;;;3253     TIMx->CCMR1 = tmpccmr1 ;
000030  8302              STRH     r2,[r0,#0x18]
;;;3254     TIMx->CCER = tmpccer;
000032  8401              STRH     r1,[r0,#0x20]
;;;3255   }
000034  bdf0              POP      {r4-r7,pc}
;;;3256   
                          ENDP


                          AREA ||i.TIM_ARRPreloadConfig||, CODE, READONLY, ALIGN=2

                  TIM_ARRPreloadConfig PROC
;;;515      */
;;;516    void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;517    {
000002  4604              MOV      r4,r0
;;;518      /* Check the parameters */
;;;519      assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  4820              LDR      r0,|L3.136|
000006  460d              MOV      r5,r1                 ;517
000008  4284              CMP      r4,r0
00000a  d02b              BEQ      |L3.100|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d028              BEQ      |L3.100|
000012  481e              LDR      r0,|L3.140|
000014  4284              CMP      r4,r0
000016  d025              BEQ      |L3.100|
000018  481d              LDR      r0,|L3.144|
00001a  4284              CMP      r4,r0
00001c  d022              BEQ      |L3.100|
00001e  481d              LDR      r0,|L3.148|
000020  4284              CMP      r4,r0
000022  d01f              BEQ      |L3.100|
000024  481c              LDR      r0,|L3.152|
000026  4284              CMP      r4,r0
000028  d01c              BEQ      |L3.100|
00002a  481c              LDR      r0,|L3.156|
00002c  4284              CMP      r4,r0
00002e  d019              BEQ      |L3.100|
000030  481b              LDR      r0,|L3.160|
000032  4284              CMP      r4,r0
000034  d016              BEQ      |L3.100|
000036  481b              LDR      r0,|L3.164|
000038  4284              CMP      r4,r0
00003a  d013              BEQ      |L3.100|
00003c  481a              LDR      r0,|L3.168|
00003e  4284              CMP      r4,r0
000040  d010              BEQ      |L3.100|
000042  481a              LDR      r0,|L3.172|
000044  4284              CMP      r4,r0
000046  d00d              BEQ      |L3.100|
000048  4819              LDR      r0,|L3.176|
00004a  4284              CMP      r4,r0
00004c  d00a              BEQ      |L3.100|
00004e  4819              LDR      r0,|L3.180|
000050  4284              CMP      r4,r0
000052  d007              BEQ      |L3.100|
000054  4818              LDR      r0,|L3.184|
000056  4284              CMP      r4,r0
000058  d004              BEQ      |L3.100|
00005a  f2402107          MOV      r1,#0x207
00005e  4817              LDR      r0,|L3.188|
000060  f7fffffe          BL       assert_failed
                  |L3.100|
;;;520      assert_param(IS_FUNCTIONAL_STATE(NewState));
000064  b155              CBZ      r5,|L3.124|
000066  2d01              CMP      r5,#1
000068  d004              BEQ      |L3.116|
00006a  f44f7102          MOV      r1,#0x208
00006e  4813              LDR      r0,|L3.188|
000070  f7fffffe          BL       assert_failed
                  |L3.116|
;;;521    
;;;522      if (NewState != DISABLE)
;;;523      {
;;;524        /* Set the ARR Preload Bit */
;;;525        TIMx->CR1 |= TIM_CR1_ARPE;
000074  8820              LDRH     r0,[r4,#0]
000076  f0400080          ORR      r0,r0,#0x80
00007a  e002              B        |L3.130|
                  |L3.124|
;;;526      }
;;;527      else
;;;528      {
;;;529        /* Reset the ARR Preload Bit */
;;;530        TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
00007c  8820              LDRH     r0,[r4,#0]
00007e  f0200080          BIC      r0,r0,#0x80
                  |L3.130|
000082  8020              STRH     r0,[r4,#0]            ;525
;;;531      }
;;;532    }
000084  bd70              POP      {r4-r6,pc}
;;;533    
                          ENDP

000086  0000              DCW      0x0000
                  |L3.136|
                          DCD      0x40010000
                  |L3.140|
                          DCD      0x40000400
                  |L3.144|
                          DCD      0x40000800
                  |L3.148|
                          DCD      0x40000c00
                  |L3.152|
                          DCD      0x40001000
                  |L3.156|
                          DCD      0x40001400
                  |L3.160|
                          DCD      0x40010400
                  |L3.164|
                          DCD      0x40014000
                  |L3.168|
                          DCD      0x40014400
                  |L3.172|
                          DCD      0x40014800
                  |L3.176|
                          DCD      0x40001800
                  |L3.180|
                          DCD      0x40001c00
                  |L3.184|
                          DCD      0x40002000
                  |L3.188|
                          DCD      ||.conststring||

                          AREA ||i.TIM_BDTRConfig||, CODE, READONLY, ALIGN=2

                  TIM_BDTRConfig PROC
;;;2210     */
;;;2211   void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;2212   {
000002  4605              MOV      r5,r0
;;;2213     /* Check the parameters */
;;;2214     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
000004  482e              LDR      r0,|L4.192|
000006  460c              MOV      r4,r1                 ;2212
000008  4285              CMP      r5,r0
00000a  d007              BEQ      |L4.28|
00000c  482d              LDR      r0,|L4.196|
00000e  4285              CMP      r5,r0
000010  d004              BEQ      |L4.28|
000012  f64001a6          MOV      r1,#0x8a6
000016  482c              LDR      r0,|L4.200|
000018  f7fffffe          BL       assert_failed
                  |L4.28|
;;;2215     assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
00001c  8820              LDRH     r0,[r4,#0]
00001e  f5b06f00          CMP      r0,#0x800
000022  d005              BEQ      |L4.48|
000024  b120              CBZ      r0,|L4.48|
000026  f64001a7          MOV      r1,#0x8a7
00002a  4827              LDR      r0,|L4.200|
00002c  f7fffffe          BL       assert_failed
                  |L4.48|
;;;2216     assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
000030  8860              LDRH     r0,[r4,#2]
000032  f5b06f80          CMP      r0,#0x400
000036  d005              BEQ      |L4.68|
000038  b120              CBZ      r0,|L4.68|
00003a  f64001a8          MOV      r1,#0x8a8
00003e  4822              LDR      r0,|L4.200|
000040  f7fffffe          BL       assert_failed
                  |L4.68|
;;;2217     assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
000044  88a1              LDRH     r1,[r4,#4]
000046  b169              CBZ      r1,|L4.100|
000048  f5b17f80          CMP      r1,#0x100
00004c  d00a              BEQ      |L4.100|
00004e  f5b17f00          CMP      r1,#0x200
000052  d007              BEQ      |L4.100|
000054  f5b17f40          CMP      r1,#0x300
000058  d004              BEQ      |L4.100|
00005a  f64001a9          MOV      r1,#0x8a9
00005e  481a              LDR      r0,|L4.200|
000060  f7fffffe          BL       assert_failed
                  |L4.100|
;;;2218     assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
000064  8920              LDRH     r0,[r4,#8]
000066  f5b05f80          CMP      r0,#0x1000
00006a  d005              BEQ      |L4.120|
00006c  b120              CBZ      r0,|L4.120|
00006e  f64001aa          MOV      r1,#0x8aa
000072  4815              LDR      r0,|L4.200|
000074  f7fffffe          BL       assert_failed
                  |L4.120|
;;;2219     assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
000078  8960              LDRH     r0,[r4,#0xa]
00007a  b138              CBZ      r0,|L4.140|
00007c  f5b05f00          CMP      r0,#0x2000
000080  d004              BEQ      |L4.140|
000082  f64001ab          MOV      r1,#0x8ab
000086  4810              LDR      r0,|L4.200|
000088  f7fffffe          BL       assert_failed
                  |L4.140|
;;;2220     assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
00008c  89a0              LDRH     r0,[r4,#0xc]
00008e  f5b04f80          CMP      r0,#0x4000
000092  d005              BEQ      |L4.160|
000094  b120              CBZ      r0,|L4.160|
000096  f64001ac          MOV      r1,#0x8ac
00009a  480b              LDR      r0,|L4.200|
00009c  f7fffffe          BL       assert_failed
                  |L4.160|
;;;2221   
;;;2222     /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;2223        the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;2224     TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
0000a0  8820              LDRH     r0,[r4,#0]
0000a2  8861              LDRH     r1,[r4,#2]
0000a4  88e2              LDRH     r2,[r4,#6]
0000a6  4308              ORRS     r0,r0,r1
0000a8  88a1              LDRH     r1,[r4,#4]
0000aa  4311              ORRS     r1,r1,r2
0000ac  4308              ORRS     r0,r0,r1
0000ae  8921              LDRH     r1,[r4,#8]
0000b0  4308              ORRS     r0,r0,r1
0000b2  8961              LDRH     r1,[r4,#0xa]
0000b4  4308              ORRS     r0,r0,r1
0000b6  89a1              LDRH     r1,[r4,#0xc]
0000b8  4308              ORRS     r0,r0,r1
0000ba  f8a50044          STRH     r0,[r5,#0x44]
;;;2225                TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
;;;2226                TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
;;;2227                TIM_BDTRInitStruct->TIM_AutomaticOutput;
;;;2228   }
0000be  bd70              POP      {r4-r6,pc}
;;;2229   
                          ENDP

                  |L4.192|
                          DCD      0x40010000
                  |L4.196|
                          DCD      0x40010400
                  |L4.200|
                          DCD      ||.conststring||

                          AREA ||i.TIM_BDTRStructInit||, CODE, READONLY, ALIGN=1

                  TIM_BDTRStructInit PROC
;;;2235     */
;;;2236   void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
000000  2100              MOVS     r1,#0
;;;2237   {
;;;2238     /* Set the default configuration */
;;;2239     TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
000002  8001              STRH     r1,[r0,#0]
;;;2240     TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
000004  8041              STRH     r1,[r0,#2]
;;;2241     TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
000006  8081              STRH     r1,[r0,#4]
;;;2242     TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
000008  80c1              STRH     r1,[r0,#6]
;;;2243     TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
00000a  8101              STRH     r1,[r0,#8]
;;;2244     TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
00000c  8141              STRH     r1,[r0,#0xa]
;;;2245     TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
00000e  8181              STRH     r1,[r0,#0xc]
;;;2246   }
000010  4770              BX       lr
;;;2247   
                          ENDP


                          AREA ||i.TIM_CCPreloadControl||, CODE, READONLY, ALIGN=2

                  TIM_CCPreloadControl PROC
;;;2304     */
;;;2305   void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;2306   { 
000002  4604              MOV      r4,r0
;;;2307     /* Check the parameters */
;;;2308     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
000004  480e              LDR      r0,|L6.64|
000006  460d              MOV      r5,r1                 ;2306
000008  4284              CMP      r4,r0
00000a  d007              BEQ      |L6.28|
00000c  480d              LDR      r0,|L6.68|
00000e  4284              CMP      r4,r0
000010  d004              BEQ      |L6.28|
000012  f6401104          MOV      r1,#0x904
000016  480c              LDR      r0,|L6.72|
000018  f7fffffe          BL       assert_failed
                  |L6.28|
;;;2309     assert_param(IS_FUNCTIONAL_STATE(NewState));
00001c  b155              CBZ      r5,|L6.52|
00001e  2d01              CMP      r5,#1
000020  d004              BEQ      |L6.44|
000022  f6401105          MOV      r1,#0x905
000026  4808              LDR      r0,|L6.72|
000028  f7fffffe          BL       assert_failed
                  |L6.44|
;;;2310     if (NewState != DISABLE)
;;;2311     {
;;;2312       /* Set the CCPC Bit */
;;;2313       TIMx->CR2 |= TIM_CR2_CCPC;
00002c  88a0              LDRH     r0,[r4,#4]
00002e  f0400001          ORR      r0,r0,#1
000032  e002              B        |L6.58|
                  |L6.52|
;;;2314     }
;;;2315     else
;;;2316     {
;;;2317       /* Reset the CCPC Bit */
;;;2318       TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
000034  88a0              LDRH     r0,[r4,#4]
000036  f0200001          BIC      r0,r0,#1
                  |L6.58|
00003a  80a0              STRH     r0,[r4,#4]            ;2313
;;;2319     }
;;;2320   }
00003c  bd70              POP      {r4-r6,pc}
;;;2321   /**
                          ENDP

00003e  0000              DCW      0x0000
                  |L6.64|
                          DCD      0x40010000
                  |L6.68|
                          DCD      0x40010400
                  |L6.72|
                          DCD      ||.conststring||

                          AREA ||i.TIM_CCxCmd||, CODE, READONLY, ALIGN=2

                  TIM_CCxCmd PROC
;;;1777     */
;;;1778   void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
000000  b570              PUSH     {r4-r6,lr}
;;;1779   {
000002  4604              MOV      r4,r0
;;;1780     uint16_t tmp = 0;
;;;1781   
;;;1782     /* Check the parameters */
;;;1783     assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
000004  4824              LDR      r0,|L7.152|
000006  4616              MOV      r6,r2                 ;1779
000008  460d              MOV      r5,r1                 ;1779
00000a  4284              CMP      r4,r0
00000c  d025              BEQ      |L7.90|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d022              BEQ      |L7.90|
000014  4821              LDR      r0,|L7.156|
000016  4284              CMP      r4,r0
000018  d01f              BEQ      |L7.90|
00001a  4821              LDR      r0,|L7.160|
00001c  4284              CMP      r4,r0
00001e  d01c              BEQ      |L7.90|
000020  4820              LDR      r0,|L7.164|
000022  4284              CMP      r4,r0
000024  d019              BEQ      |L7.90|
000026  4820              LDR      r0,|L7.168|
000028  4284              CMP      r4,r0
00002a  d016              BEQ      |L7.90|
00002c  481f              LDR      r0,|L7.172|
00002e  4284              CMP      r4,r0
000030  d013              BEQ      |L7.90|
000032  481f              LDR      r0,|L7.176|
000034  4284              CMP      r4,r0
000036  d010              BEQ      |L7.90|
000038  481e              LDR      r0,|L7.180|
00003a  4284              CMP      r4,r0
00003c  d00d              BEQ      |L7.90|
00003e  481e              LDR      r0,|L7.184|
000040  4284              CMP      r4,r0
000042  d00a              BEQ      |L7.90|
000044  481d              LDR      r0,|L7.188|
000046  4284              CMP      r4,r0
000048  d007              BEQ      |L7.90|
00004a  481d              LDR      r0,|L7.192|
00004c  4284              CMP      r4,r0
00004e  d004              BEQ      |L7.90|
000050  f24061f7          MOV      r1,#0x6f7
000054  481b              LDR      r0,|L7.196|
000056  f7fffffe          BL       assert_failed
                  |L7.90|
;;;1784     assert_param(IS_TIM_CHANNEL(TIM_Channel));
00005a  b155              CBZ      r5,|L7.114|
00005c  2d04              CMP      r5,#4
00005e  d008              BEQ      |L7.114|
000060  2d08              CMP      r5,#8
000062  d006              BEQ      |L7.114|
000064  2d0c              CMP      r5,#0xc
000066  d004              BEQ      |L7.114|
000068  f44f61df          MOV      r1,#0x6f8
00006c  4815              LDR      r0,|L7.196|
00006e  f7fffffe          BL       assert_failed
                  |L7.114|
;;;1785     assert_param(IS_TIM_CCX(TIM_CCx));
000072  2e01              CMP      r6,#1
000074  d005              BEQ      |L7.130|
000076  b126              CBZ      r6,|L7.130|
000078  f24061f9          MOV      r1,#0x6f9
00007c  4811              LDR      r0,|L7.196|
00007e  f7fffffe          BL       assert_failed
                  |L7.130|
;;;1786   
;;;1787     tmp = CCER_CCE_SET << TIM_Channel;
000082  2001              MOVS     r0,#1
;;;1788   
;;;1789     /* Reset the CCxE Bit */
;;;1790     TIMx->CCER &= (uint16_t)~ tmp;
000084  8c21              LDRH     r1,[r4,#0x20]
000086  40a8              LSLS     r0,r0,r5              ;1787
000088  4381              BICS     r1,r1,r0
00008a  8421              STRH     r1,[r4,#0x20]
;;;1791   
;;;1792     /* Set or reset the CCxE Bit */ 
;;;1793     TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
00008c  8c20              LDRH     r0,[r4,#0x20]
00008e  40ae              LSLS     r6,r6,r5
000090  4330              ORRS     r0,r0,r6
000092  8420              STRH     r0,[r4,#0x20]
;;;1794   }
000094  bd70              POP      {r4-r6,pc}
;;;1795   
                          ENDP

000096  0000              DCW      0x0000
                  |L7.152|
                          DCD      0x40010000
                  |L7.156|
                          DCD      0x40000400
                  |L7.160|
                          DCD      0x40000800
                  |L7.164|
                          DCD      0x40000c00
                  |L7.168|
                          DCD      0x40010400
                  |L7.172|
                          DCD      0x40014000
                  |L7.176|
                          DCD      0x40014400
                  |L7.180|
                          DCD      0x40014800
                  |L7.184|
                          DCD      0x40001800
                  |L7.188|
                          DCD      0x40001c00
                  |L7.192|
                          DCD      0x40002000
                  |L7.196|
                          DCD      ||.conststring||

                          AREA ||i.TIM_CCxNCmd||, CODE, READONLY, ALIGN=2

                  TIM_CCxNCmd PROC
;;;1807     */
;;;1808   void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
000000  b570              PUSH     {r4-r6,lr}
;;;1809   {
000002  4604              MOV      r4,r0
;;;1810     uint16_t tmp = 0;
;;;1811   
;;;1812     /* Check the parameters */
;;;1813     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
000004  4814              LDR      r0,|L8.88|
000006  4616              MOV      r6,r2                 ;1809
000008  460d              MOV      r5,r1                 ;1809
00000a  4284              CMP      r4,r0
00000c  d007              BEQ      |L8.30|
00000e  4813              LDR      r0,|L8.92|
000010  4284              CMP      r4,r0
000012  d004              BEQ      |L8.30|
000014  f2407115          MOV      r1,#0x715
000018  4811              LDR      r0,|L8.96|
00001a  f7fffffe          BL       assert_failed
                  |L8.30|
;;;1814     assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
00001e  b145              CBZ      r5,|L8.50|
000020  2d04              CMP      r5,#4
000022  d006              BEQ      |L8.50|
000024  2d08              CMP      r5,#8
000026  d004              BEQ      |L8.50|
000028  f2407116          MOV      r1,#0x716
00002c  480c              LDR      r0,|L8.96|
00002e  f7fffffe          BL       assert_failed
                  |L8.50|
;;;1815     assert_param(IS_TIM_CCXN(TIM_CCxN));
000032  2e04              CMP      r6,#4
000034  d005              BEQ      |L8.66|
000036  b126              CBZ      r6,|L8.66|
000038  f2407117          MOV      r1,#0x717
00003c  4808              LDR      r0,|L8.96|
00003e  f7fffffe          BL       assert_failed
                  |L8.66|
;;;1816   
;;;1817     tmp = CCER_CCNE_SET << TIM_Channel;
000042  2004              MOVS     r0,#4
;;;1818   
;;;1819     /* Reset the CCxNE Bit */
;;;1820     TIMx->CCER &= (uint16_t) ~tmp;
000044  8c21              LDRH     r1,[r4,#0x20]
000046  40a8              LSLS     r0,r0,r5              ;1817
000048  4381              BICS     r1,r1,r0
00004a  8421              STRH     r1,[r4,#0x20]
;;;1821   
;;;1822     /* Set or reset the CCxNE Bit */ 
;;;1823     TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
00004c  8c20              LDRH     r0,[r4,#0x20]
00004e  40ae              LSLS     r6,r6,r5
000050  4330              ORRS     r0,r0,r6
000052  8420              STRH     r0,[r4,#0x20]
;;;1824   }
000054  bd70              POP      {r4-r6,pc}
;;;1825   /**
                          ENDP

000056  0000              DCW      0x0000
                  |L8.88|
                          DCD      0x40010000
                  |L8.92|
                          DCD      0x40010400
                  |L8.96|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ClearFlag||, CODE, READONLY, ALIGN=2

                  TIM_ClearFlag PROC
;;;2474     */
;;;2475   void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;2476   {  
000002  4604              MOV      r4,r0
;;;2477     /* Check the parameters */
;;;2478     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  4819              LDR      r0,|L9.108|
000006  460d              MOV      r5,r1                 ;2476
000008  4284              CMP      r4,r0
00000a  d02b              BEQ      |L9.100|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d028              BEQ      |L9.100|
000012  4817              LDR      r0,|L9.112|
000014  4284              CMP      r4,r0
000016  d025              BEQ      |L9.100|
000018  4816              LDR      r0,|L9.116|
00001a  4284              CMP      r4,r0
00001c  d022              BEQ      |L9.100|
00001e  4816              LDR      r0,|L9.120|
000020  4284              CMP      r4,r0
000022  d01f              BEQ      |L9.100|
000024  4815              LDR      r0,|L9.124|
000026  4284              CMP      r4,r0
000028  d01c              BEQ      |L9.100|
00002a  4815              LDR      r0,|L9.128|
00002c  4284              CMP      r4,r0
00002e  d019              BEQ      |L9.100|
000030  4814              LDR      r0,|L9.132|
000032  4284              CMP      r4,r0
000034  d016              BEQ      |L9.100|
000036  4814              LDR      r0,|L9.136|
000038  4284              CMP      r4,r0
00003a  d013              BEQ      |L9.100|
00003c  4813              LDR      r0,|L9.140|
00003e  4284              CMP      r4,r0
000040  d010              BEQ      |L9.100|
000042  4813              LDR      r0,|L9.144|
000044  4284              CMP      r4,r0
000046  d00d              BEQ      |L9.100|
000048  4812              LDR      r0,|L9.148|
00004a  4284              CMP      r4,r0
00004c  d00a              BEQ      |L9.100|
00004e  4812              LDR      r0,|L9.152|
000050  4284              CMP      r4,r0
000052  d007              BEQ      |L9.100|
000054  4811              LDR      r0,|L9.156|
000056  4284              CMP      r4,r0
000058  d004              BEQ      |L9.100|
00005a  f64011ae          MOV      r1,#0x9ae
00005e  4810              LDR      r0,|L9.160|
000060  f7fffffe          BL       assert_failed
                  |L9.100|
;;;2479      
;;;2480     /* Clear the flags */
;;;2481     TIMx->SR = (uint16_t)~TIM_FLAG;
000064  43e8              MVNS     r0,r5
000066  8220              STRH     r0,[r4,#0x10]
;;;2482   }
000068  bd70              POP      {r4-r6,pc}
;;;2483   
                          ENDP

00006a  0000              DCW      0x0000
                  |L9.108|
                          DCD      0x40010000
                  |L9.112|
                          DCD      0x40000400
                  |L9.116|
                          DCD      0x40000800
                  |L9.120|
                          DCD      0x40000c00
                  |L9.124|
                          DCD      0x40001000
                  |L9.128|
                          DCD      0x40001400
                  |L9.132|
                          DCD      0x40010400
                  |L9.136|
                          DCD      0x40014000
                  |L9.140|
                          DCD      0x40014400
                  |L9.144|
                          DCD      0x40014800
                  |L9.148|
                          DCD      0x40001800
                  |L9.152|
                          DCD      0x40001c00
                  |L9.156|
                          DCD      0x40002000
                  |L9.160|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  TIM_ClearITPendingBit PROC
;;;2543     */
;;;2544   void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;2545   {
000002  4604              MOV      r4,r0
;;;2546     /* Check the parameters */
;;;2547     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  4819              LDR      r0,|L10.108|
000006  460d              MOV      r5,r1                 ;2545
000008  4284              CMP      r4,r0
00000a  d02b              BEQ      |L10.100|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d028              BEQ      |L10.100|
000012  4817              LDR      r0,|L10.112|
000014  4284              CMP      r4,r0
000016  d025              BEQ      |L10.100|
000018  4816              LDR      r0,|L10.116|
00001a  4284              CMP      r4,r0
00001c  d022              BEQ      |L10.100|
00001e  4816              LDR      r0,|L10.120|
000020  4284              CMP      r4,r0
000022  d01f              BEQ      |L10.100|
000024  4815              LDR      r0,|L10.124|
000026  4284              CMP      r4,r0
000028  d01c              BEQ      |L10.100|
00002a  4815              LDR      r0,|L10.128|
00002c  4284              CMP      r4,r0
00002e  d019              BEQ      |L10.100|
000030  4814              LDR      r0,|L10.132|
000032  4284              CMP      r4,r0
000034  d016              BEQ      |L10.100|
000036  4814              LDR      r0,|L10.136|
000038  4284              CMP      r4,r0
00003a  d013              BEQ      |L10.100|
00003c  4813              LDR      r0,|L10.140|
00003e  4284              CMP      r4,r0
000040  d010              BEQ      |L10.100|
000042  4813              LDR      r0,|L10.144|
000044  4284              CMP      r4,r0
000046  d00d              BEQ      |L10.100|
000048  4812              LDR      r0,|L10.148|
00004a  4284              CMP      r4,r0
00004c  d00a              BEQ      |L10.100|
00004e  4812              LDR      r0,|L10.152|
000050  4284              CMP      r4,r0
000052  d007              BEQ      |L10.100|
000054  4811              LDR      r0,|L10.156|
000056  4284              CMP      r4,r0
000058  d004              BEQ      |L10.100|
00005a  f64011f3          MOV      r1,#0x9f3
00005e  4810              LDR      r0,|L10.160|
000060  f7fffffe          BL       assert_failed
                  |L10.100|
;;;2548   
;;;2549     /* Clear the IT pending Bit */
;;;2550     TIMx->SR = (uint16_t)~TIM_IT;
000064  43e8              MVNS     r0,r5
000066  8220              STRH     r0,[r4,#0x10]
;;;2551   }
000068  bd70              POP      {r4-r6,pc}
;;;2552   
                          ENDP

00006a  0000              DCW      0x0000
                  |L10.108|
                          DCD      0x40010000
                  |L10.112|
                          DCD      0x40000400
                  |L10.116|
                          DCD      0x40000800
                  |L10.120|
                          DCD      0x40000c00
                  |L10.124|
                          DCD      0x40001000
                  |L10.128|
                          DCD      0x40001400
                  |L10.132|
                          DCD      0x40010400
                  |L10.136|
                          DCD      0x40014000
                  |L10.140|
                          DCD      0x40014400
                  |L10.144|
                          DCD      0x40014800
                  |L10.148|
                          DCD      0x40001800
                  |L10.152|
                          DCD      0x40001c00
                  |L10.156|
                          DCD      0x40002000
                  |L10.160|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ClearOC1Ref||, CODE, READONLY, ALIGN=2

                  TIM_ClearOC1Ref PROC
;;;1467     */
;;;1468   void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  b570              PUSH     {r4-r6,lr}
;;;1469   {
000002  4604              MOV      r4,r0
;;;1470     uint16_t tmpccmr1 = 0;
;;;1471   
;;;1472     /* Check the parameters */
;;;1473     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000004  481b              LDR      r0,|L11.116|
000006  460d              MOV      r5,r1                 ;1469
000008  4284              CMP      r4,r0
00000a  d025              BEQ      |L11.88|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d022              BEQ      |L11.88|
000012  4819              LDR      r0,|L11.120|
000014  4284              CMP      r4,r0
000016  d01f              BEQ      |L11.88|
000018  4818              LDR      r0,|L11.124|
00001a  4284              CMP      r4,r0
00001c  d01c              BEQ      |L11.88|
00001e  4818              LDR      r0,|L11.128|
000020  4284              CMP      r4,r0
000022  d019              BEQ      |L11.88|
000024  4817              LDR      r0,|L11.132|
000026  4284              CMP      r4,r0
000028  d016              BEQ      |L11.88|
00002a  4817              LDR      r0,|L11.136|
00002c  4284              CMP      r4,r0
00002e  d013              BEQ      |L11.88|
000030  4816              LDR      r0,|L11.140|
000032  4284              CMP      r4,r0
000034  d010              BEQ      |L11.88|
000036  4816              LDR      r0,|L11.144|
000038  4284              CMP      r4,r0
00003a  d00d              BEQ      |L11.88|
00003c  4815              LDR      r0,|L11.148|
00003e  4284              CMP      r4,r0
000040  d00a              BEQ      |L11.88|
000042  4815              LDR      r0,|L11.152|
000044  4284              CMP      r4,r0
000046  d007              BEQ      |L11.88|
000048  4814              LDR      r0,|L11.156|
00004a  4284              CMP      r4,r0
00004c  d004              BEQ      |L11.88|
00004e  f24051c1          MOV      r1,#0x5c1
000052  4813              LDR      r0,|L11.160|
000054  f7fffffe          BL       assert_failed
                  |L11.88|
;;;1474     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
000058  2d80              CMP      r5,#0x80
00005a  d005              BEQ      |L11.104|
00005c  b125              CBZ      r5,|L11.104|
00005e  f24051c2          MOV      r1,#0x5c2
000062  480f              LDR      r0,|L11.160|
000064  f7fffffe          BL       assert_failed
                  |L11.104|
;;;1475   
;;;1476     tmpccmr1 = TIMx->CCMR1;
000068  8b20              LDRH     r0,[r4,#0x18]
;;;1477   
;;;1478     /* Reset the OC1CE Bit */
;;;1479     tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
00006a  f0200080          BIC      r0,r0,#0x80
;;;1480   
;;;1481     /* Enable or Disable the Output Compare Clear Bit */
;;;1482     tmpccmr1 |= TIM_OCClear;
00006e  4328              ORRS     r0,r0,r5
;;;1483   
;;;1484     /* Write to TIMx CCMR1 register */
;;;1485     TIMx->CCMR1 = tmpccmr1;
000070  8320              STRH     r0,[r4,#0x18]
;;;1486   }
000072  bd70              POP      {r4-r6,pc}
;;;1487   
                          ENDP

                  |L11.116|
                          DCD      0x40010000
                  |L11.120|
                          DCD      0x40000400
                  |L11.124|
                          DCD      0x40000800
                  |L11.128|
                          DCD      0x40000c00
                  |L11.132|
                          DCD      0x40010400
                  |L11.136|
                          DCD      0x40014000
                  |L11.140|
                          DCD      0x40014400
                  |L11.144|
                          DCD      0x40014800
                  |L11.148|
                          DCD      0x40001800
                  |L11.152|
                          DCD      0x40001c00
                  |L11.156|
                          DCD      0x40002000
                  |L11.160|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ClearOC2Ref||, CODE, READONLY, ALIGN=2

                  TIM_ClearOC2Ref PROC
;;;1497     */
;;;1498   void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  b570              PUSH     {r4-r6,lr}
;;;1499   {
000002  4604              MOV      r4,r0
;;;1500     uint16_t tmpccmr1 = 0;
;;;1501   
;;;1502     /* Check the parameters */
;;;1503     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  4817              LDR      r0,|L12.100|
000006  460d              MOV      r5,r1                 ;1499
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L12.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L12.64|
000012  4815              LDR      r0,|L12.104|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L12.64|
000018  4814              LDR      r0,|L12.108|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L12.64|
00001e  4814              LDR      r0,|L12.112|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L12.64|
000024  4813              LDR      r0,|L12.116|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L12.64|
00002a  4813              LDR      r0,|L12.120|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L12.64|
000030  4812              LDR      r0,|L12.124|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L12.64|
000036  f24051df          MOV      r1,#0x5df
00003a  4811              LDR      r0,|L12.128|
00003c  f7fffffe          BL       assert_failed
                  |L12.64|
;;;1504     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
000040  2d80              CMP      r5,#0x80
000042  d005              BEQ      |L12.80|
000044  b125              CBZ      r5,|L12.80|
000046  f44f61bc          MOV      r1,#0x5e0
00004a  480d              LDR      r0,|L12.128|
00004c  f7fffffe          BL       assert_failed
                  |L12.80|
;;;1505   
;;;1506     tmpccmr1 = TIMx->CCMR1;
000050  8b20              LDRH     r0,[r4,#0x18]
;;;1507   
;;;1508     /* Reset the OC2CE Bit */
;;;1509     tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
;;;1510   
;;;1511     /* Enable or Disable the Output Compare Clear Bit */
;;;1512     tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
000052  f64f71ff          MOV      r1,#0xffff
000056  f3c0000e          UBFX     r0,r0,#0,#15          ;1509
00005a  ea012105          AND      r1,r1,r5,LSL #8
00005e  4301              ORRS     r1,r1,r0
;;;1513   
;;;1514     /* Write to TIMx CCMR1 register */
;;;1515     TIMx->CCMR1 = tmpccmr1;
000060  8321              STRH     r1,[r4,#0x18]
;;;1516   }
000062  bd70              POP      {r4-r6,pc}
;;;1517   
                          ENDP

                  |L12.100|
                          DCD      0x40010000
                  |L12.104|
                          DCD      0x40000400
                  |L12.108|
                          DCD      0x40000800
                  |L12.112|
                          DCD      0x40000c00
                  |L12.116|
                          DCD      0x40010400
                  |L12.120|
                          DCD      0x40014000
                  |L12.124|
                          DCD      0x40001800
                  |L12.128|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ClearOC3Ref||, CODE, READONLY, ALIGN=2

                  TIM_ClearOC3Ref PROC
;;;1526     */
;;;1527   void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  b570              PUSH     {r4-r6,lr}
;;;1528   {
000002  4604              MOV      r4,r0
;;;1529     uint16_t tmpccmr2 = 0;
;;;1530   
;;;1531     /* Check the parameters */
;;;1532     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4812              LDR      r0,|L13.80|
000006  460d              MOV      r5,r1                 ;1528
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L13.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L13.52|
000012  4810              LDR      r0,|L13.84|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L13.52|
000018  480f              LDR      r0,|L13.88|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L13.52|
00001e  480f              LDR      r0,|L13.92|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L13.52|
000024  480e              LDR      r0,|L13.96|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L13.52|
00002a  f24051fc          MOV      r1,#0x5fc
00002e  480d              LDR      r0,|L13.100|
000030  f7fffffe          BL       assert_failed
                  |L13.52|
;;;1533     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
000034  2d80              CMP      r5,#0x80
000036  d005              BEQ      |L13.68|
000038  b125              CBZ      r5,|L13.68|
00003a  f24051fd          MOV      r1,#0x5fd
00003e  4809              LDR      r0,|L13.100|
000040  f7fffffe          BL       assert_failed
                  |L13.68|
;;;1534   
;;;1535     tmpccmr2 = TIMx->CCMR2;
000044  8ba0              LDRH     r0,[r4,#0x1c]
;;;1536   
;;;1537     /* Reset the OC3CE Bit */
;;;1538     tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
000046  f0200080          BIC      r0,r0,#0x80
;;;1539   
;;;1540     /* Enable or Disable the Output Compare Clear Bit */
;;;1541     tmpccmr2 |= TIM_OCClear;
00004a  4328              ORRS     r0,r0,r5
;;;1542   
;;;1543     /* Write to TIMx CCMR2 register */
;;;1544     TIMx->CCMR2 = tmpccmr2;
00004c  83a0              STRH     r0,[r4,#0x1c]
;;;1545   }
00004e  bd70              POP      {r4-r6,pc}
;;;1546   
                          ENDP

                  |L13.80|
                          DCD      0x40010000
                  |L13.84|
                          DCD      0x40000400
                  |L13.88|
                          DCD      0x40000800
                  |L13.92|
                          DCD      0x40000c00
                  |L13.96|
                          DCD      0x40010400
                  |L13.100|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ClearOC4Ref||, CODE, READONLY, ALIGN=2

                  TIM_ClearOC4Ref PROC
;;;1555     */
;;;1556   void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  b570              PUSH     {r4-r6,lr}
;;;1557   {
000002  4604              MOV      r4,r0
;;;1558     uint16_t tmpccmr2 = 0;
;;;1559   
;;;1560     /* Check the parameters */
;;;1561     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4814              LDR      r0,|L14.88|
000006  460d              MOV      r5,r1                 ;1557
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L14.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L14.52|
000012  4812              LDR      r0,|L14.92|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L14.52|
000018  4811              LDR      r0,|L14.96|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L14.52|
00001e  4811              LDR      r0,|L14.100|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L14.52|
000024  4810              LDR      r0,|L14.104|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L14.52|
00002a  f2406119          MOV      r1,#0x619
00002e  480f              LDR      r0,|L14.108|
000030  f7fffffe          BL       assert_failed
                  |L14.52|
;;;1562     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
000034  2d80              CMP      r5,#0x80
000036  d005              BEQ      |L14.68|
000038  b125              CBZ      r5,|L14.68|
00003a  f240611a          MOV      r1,#0x61a
00003e  480b              LDR      r0,|L14.108|
000040  f7fffffe          BL       assert_failed
                  |L14.68|
;;;1563   
;;;1564     tmpccmr2 = TIMx->CCMR2;
000044  8ba0              LDRH     r0,[r4,#0x1c]
;;;1565   
;;;1566     /* Reset the OC4CE Bit */
;;;1567     tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
;;;1568   
;;;1569     /* Enable or Disable the Output Compare Clear Bit */
;;;1570     tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
000046  f64f71ff          MOV      r1,#0xffff
00004a  f3c0000e          UBFX     r0,r0,#0,#15          ;1567
00004e  ea012105          AND      r1,r1,r5,LSL #8
000052  4301              ORRS     r1,r1,r0
;;;1571   
;;;1572     /* Write to TIMx CCMR2 register */
;;;1573     TIMx->CCMR2 = tmpccmr2;
000054  83a1              STRH     r1,[r4,#0x1c]
;;;1574   }
000056  bd70              POP      {r4-r6,pc}
;;;1575   
                          ENDP

                  |L14.88|
                          DCD      0x40010000
                  |L14.92|
                          DCD      0x40000400
                  |L14.96|
                          DCD      0x40000800
                  |L14.100|
                          DCD      0x40000c00
                  |L14.104|
                          DCD      0x40010400
                  |L14.108|
                          DCD      ||.conststring||

                          AREA ||i.TIM_Cmd||, CODE, READONLY, ALIGN=2

                  TIM_Cmd PROC
;;;585      */
;;;586    void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;587    {
000002  4604              MOV      r4,r0
;;;588      /* Check the parameters */
;;;589      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
000004  4820              LDR      r0,|L15.136|
000006  460d              MOV      r5,r1                 ;587
000008  4284              CMP      r4,r0
00000a  d02b              BEQ      |L15.100|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d028              BEQ      |L15.100|
000012  481e              LDR      r0,|L15.140|
000014  4284              CMP      r4,r0
000016  d025              BEQ      |L15.100|
000018  481d              LDR      r0,|L15.144|
00001a  4284              CMP      r4,r0
00001c  d022              BEQ      |L15.100|
00001e  481d              LDR      r0,|L15.148|
000020  4284              CMP      r4,r0
000022  d01f              BEQ      |L15.100|
000024  481c              LDR      r0,|L15.152|
000026  4284              CMP      r4,r0
000028  d01c              BEQ      |L15.100|
00002a  481c              LDR      r0,|L15.156|
00002c  4284              CMP      r4,r0
00002e  d019              BEQ      |L15.100|
000030  481b              LDR      r0,|L15.160|
000032  4284              CMP      r4,r0
000034  d016              BEQ      |L15.100|
000036  481b              LDR      r0,|L15.164|
000038  4284              CMP      r4,r0
00003a  d013              BEQ      |L15.100|
00003c  481a              LDR      r0,|L15.168|
00003e  4284              CMP      r4,r0
000040  d010              BEQ      |L15.100|
000042  481a              LDR      r0,|L15.172|
000044  4284              CMP      r4,r0
000046  d00d              BEQ      |L15.100|
000048  4819              LDR      r0,|L15.176|
00004a  4284              CMP      r4,r0
00004c  d00a              BEQ      |L15.100|
00004e  4819              LDR      r0,|L15.180|
000050  4284              CMP      r4,r0
000052  d007              BEQ      |L15.100|
000054  4818              LDR      r0,|L15.184|
000056  4284              CMP      r4,r0
000058  d004              BEQ      |L15.100|
00005a  f240214d          MOV      r1,#0x24d
00005e  4817              LDR      r0,|L15.188|
000060  f7fffffe          BL       assert_failed
                  |L15.100|
;;;590      assert_param(IS_FUNCTIONAL_STATE(NewState));
000064  b155              CBZ      r5,|L15.124|
000066  2d01              CMP      r5,#1
000068  d004              BEQ      |L15.116|
00006a  f240214e          MOV      r1,#0x24e
00006e  4813              LDR      r0,|L15.188|
000070  f7fffffe          BL       assert_failed
                  |L15.116|
;;;591      
;;;592      if (NewState != DISABLE)
;;;593      {
;;;594        /* Enable the TIM Counter */
;;;595        TIMx->CR1 |= TIM_CR1_CEN;
000074  8820              LDRH     r0,[r4,#0]
000076  f0400001          ORR      r0,r0,#1
00007a  e002              B        |L15.130|
                  |L15.124|
;;;596      }
;;;597      else
;;;598      {
;;;599        /* Disable the TIM Counter */
;;;600        TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
00007c  8820              LDRH     r0,[r4,#0]
00007e  f0200001          BIC      r0,r0,#1
                  |L15.130|
000082  8020              STRH     r0,[r4,#0]            ;595
;;;601      }
;;;602    }
000084  bd70              POP      {r4-r6,pc}
;;;603    /**
                          ENDP

000086  0000              DCW      0x0000
                  |L15.136|
                          DCD      0x40010000
                  |L15.140|
                          DCD      0x40000400
                  |L15.144|
                          DCD      0x40000800
                  |L15.148|
                          DCD      0x40000c00
                  |L15.152|
                          DCD      0x40001000
                  |L15.156|
                          DCD      0x40001400
                  |L15.160|
                          DCD      0x40010400
                  |L15.164|
                          DCD      0x40014000
                  |L15.168|
                          DCD      0x40014400
                  |L15.172|
                          DCD      0x40014800
                  |L15.176|
                          DCD      0x40001800
                  |L15.180|
                          DCD      0x40001c00
                  |L15.184|
                          DCD      0x40002000
                  |L15.188|
                          DCD      ||.conststring||

                          AREA ||i.TIM_CounterModeConfig||, CODE, READONLY, ALIGN=2

                  TIM_CounterModeConfig PROC
;;;376      */
;;;377    void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
000000  b570              PUSH     {r4-r6,lr}
;;;378    {
000002  4604              MOV      r4,r0
;;;379      uint16_t tmpcr1 = 0;
;;;380    
;;;381      /* Check the parameters */
;;;382      assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4815              LDR      r0,|L16.92|
000006  460d              MOV      r5,r1                 ;378
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L16.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L16.52|
000012  4813              LDR      r0,|L16.96|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L16.52|
000018  4812              LDR      r0,|L16.100|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L16.52|
00001e  4812              LDR      r0,|L16.104|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L16.52|
000024  4811              LDR      r0,|L16.108|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L16.52|
00002a  f44f71bf          MOV      r1,#0x17e
00002e  4810              LDR      r0,|L16.112|
000030  f7fffffe          BL       assert_failed
                  |L16.52|
;;;383      assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
000034  b165              CBZ      r5,|L16.80|
000036  2d10              CMP      r5,#0x10
000038  d00a              BEQ      |L16.80|
00003a  2d20              CMP      r5,#0x20
00003c  d008              BEQ      |L16.80|
00003e  2d40              CMP      r5,#0x40
000040  d006              BEQ      |L16.80|
000042  2d60              CMP      r5,#0x60
000044  d004              BEQ      |L16.80|
000046  f240117f          MOV      r1,#0x17f
00004a  4809              LDR      r0,|L16.112|
00004c  f7fffffe          BL       assert_failed
                  |L16.80|
;;;384    
;;;385      tmpcr1 = TIMx->CR1;
000050  8820              LDRH     r0,[r4,#0]
;;;386    
;;;387      /* Reset the CMS and DIR Bits */
;;;388      tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
000052  f0200070          BIC      r0,r0,#0x70
;;;389    
;;;390      /* Set the Counter Mode */
;;;391      tmpcr1 |= TIM_CounterMode;
000056  4328              ORRS     r0,r0,r5
;;;392    
;;;393      /* Write to TIMx CR1 register */
;;;394      TIMx->CR1 = tmpcr1;
000058  8020              STRH     r0,[r4,#0]
;;;395    }
00005a  bd70              POP      {r4-r6,pc}
;;;396    
                          ENDP

                  |L16.92|
                          DCD      0x40010000
                  |L16.96|
                          DCD      0x40000400
                  |L16.100|
                          DCD      0x40000800
                  |L16.104|
                          DCD      0x40000c00
                  |L16.108|
                          DCD      0x40010400
                  |L16.112|
                          DCD      ||.conststring||

                          AREA ||i.TIM_CtrlPWMOutputs||, CODE, READONLY, ALIGN=2

                  TIM_CtrlPWMOutputs PROC
;;;2254     */
;;;2255   void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;2256   {
000002  4604              MOV      r4,r0
;;;2257     /* Check the parameters */
;;;2258     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
000004  480f              LDR      r0,|L17.68|
000006  460d              MOV      r5,r1                 ;2256
000008  4284              CMP      r4,r0
00000a  d007              BEQ      |L17.28|
00000c  480e              LDR      r0,|L17.72|
00000e  4284              CMP      r4,r0
000010  d004              BEQ      |L17.28|
000012  f64001d2          MOV      r1,#0x8d2
000016  480d              LDR      r0,|L17.76|
000018  f7fffffe          BL       assert_failed
                  |L17.28|
;;;2259     assert_param(IS_FUNCTIONAL_STATE(NewState));
00001c  b15d              CBZ      r5,|L17.54|
00001e  2d01              CMP      r5,#1
000020  d004              BEQ      |L17.44|
000022  f64001d3          MOV      r1,#0x8d3
000026  4809              LDR      r0,|L17.76|
000028  f7fffffe          BL       assert_failed
                  |L17.44|
;;;2260   
;;;2261     if (NewState != DISABLE)
;;;2262     {
;;;2263       /* Enable the TIM Main Output */
;;;2264       TIMx->BDTR |= TIM_BDTR_MOE;
00002c  f8340f44          LDRH     r0,[r4,#0x44]!
000030  f4404000          ORR      r0,r0,#0x8000
000034  e003              B        |L17.62|
                  |L17.54|
;;;2265     }
;;;2266     else
;;;2267     {
;;;2268       /* Disable the TIM Main Output */
;;;2269       TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
000036  f8340f44          LDRH     r0,[r4,#0x44]!
00003a  f3c0000e          UBFX     r0,r0,#0,#15
                  |L17.62|
00003e  8020              STRH     r0,[r4,#0]            ;2264
;;;2270     }  
;;;2271   }
000040  bd70              POP      {r4-r6,pc}
;;;2272   
                          ENDP

000042  0000              DCW      0x0000
                  |L17.68|
                          DCD      0x40010000
                  |L17.72|
                          DCD      0x40010400
                  |L17.76|
                          DCD      ||.conststring||

                          AREA ||i.TIM_DMACmd||, CODE, READONLY, ALIGN=2

                  TIM_DMACmd PROC
;;;2607     */
;;;2608   void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;2609   { 
000002  4604              MOV      r4,r0
;;;2610     /* Check the parameters */
;;;2611     assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
000004  481b              LDR      r0,|L18.116|
000006  4616              MOV      r6,r2                 ;2609
000008  460d              MOV      r5,r1                 ;2609
00000a  4284              CMP      r4,r0
00000c  d019              BEQ      |L18.66|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d016              BEQ      |L18.66|
000014  4818              LDR      r0,|L18.120|
000016  4284              CMP      r4,r0
000018  d013              BEQ      |L18.66|
00001a  4818              LDR      r0,|L18.124|
00001c  4284              CMP      r4,r0
00001e  d010              BEQ      |L18.66|
000020  4817              LDR      r0,|L18.128|
000022  4284              CMP      r4,r0
000024  d00d              BEQ      |L18.66|
000026  4817              LDR      r0,|L18.132|
000028  4284              CMP      r4,r0
00002a  d00a              BEQ      |L18.66|
00002c  4816              LDR      r0,|L18.136|
00002e  4284              CMP      r4,r0
000030  d007              BEQ      |L18.66|
000032  4816              LDR      r0,|L18.140|
000034  4284              CMP      r4,r0
000036  d004              BEQ      |L18.66|
000038  f6402133          MOV      r1,#0xa33
00003c  4814              LDR      r0,|L18.144|
00003e  f7fffffe          BL       assert_failed
                  |L18.66|
;;;2612     assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
000042  f43540fe          BICS     r0,r5,#0x7f00
000046  d100              BNE      |L18.74|
000048  b925              CBNZ     r5,|L18.84|
                  |L18.74|
00004a  f6402134          MOV      r1,#0xa34
00004e  4810              LDR      r0,|L18.144|
000050  f7fffffe          BL       assert_failed
                  |L18.84|
;;;2613     assert_param(IS_FUNCTIONAL_STATE(NewState));
000054  b14e              CBZ      r6,|L18.106|
000056  2e01              CMP      r6,#1
000058  d004              BEQ      |L18.100|
00005a  f6402135          MOV      r1,#0xa35
00005e  480c              LDR      r0,|L18.144|
000060  f7fffffe          BL       assert_failed
                  |L18.100|
;;;2614     
;;;2615     if (NewState != DISABLE)
;;;2616     {
;;;2617       /* Enable the DMA sources */
;;;2618       TIMx->DIER |= TIM_DMASource; 
000064  89a0              LDRH     r0,[r4,#0xc]
000066  4328              ORRS     r0,r0,r5
000068  e001              B        |L18.110|
                  |L18.106|
;;;2619     }
;;;2620     else
;;;2621     {
;;;2622       /* Disable the DMA sources */
;;;2623       TIMx->DIER &= (uint16_t)~TIM_DMASource;
00006a  89a0              LDRH     r0,[r4,#0xc]
00006c  43a8              BICS     r0,r0,r5
                  |L18.110|
00006e  81a0              STRH     r0,[r4,#0xc]          ;2618
;;;2624     }
;;;2625   }
000070  bd70              POP      {r4-r6,pc}
;;;2626   
                          ENDP

000072  0000              DCW      0x0000
                  |L18.116|
                          DCD      0x40010000
                  |L18.120|
                          DCD      0x40000400
                  |L18.124|
                          DCD      0x40000800
                  |L18.128|
                          DCD      0x40000c00
                  |L18.132|
                          DCD      0x40001000
                  |L18.136|
                          DCD      0x40001400
                  |L18.140|
                          DCD      0x40010400
                  |L18.144|
                          DCD      ||.conststring||

                          AREA ||i.TIM_DMAConfig||, CODE, READONLY, ALIGN=2

                  TIM_DMAConfig PROC
;;;2580     */
;;;2581   void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
000000  b570              PUSH     {r4-r6,lr}
;;;2582   {
000002  4606              MOV      r6,r0
;;;2583     /* Check the parameters */
;;;2584     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4840              LDR      r0,|L19.264|
000006  4615              MOV      r5,r2                 ;2582
000008  460c              MOV      r4,r1                 ;2582
00000a  4286              CMP      r6,r0
00000c  d013              BEQ      |L19.54|
00000e  f1b64f80          CMP      r6,#0x40000000
000012  d010              BEQ      |L19.54|
000014  483d              LDR      r0,|L19.268|
000016  4286              CMP      r6,r0
000018  d00d              BEQ      |L19.54|
00001a  483d              LDR      r0,|L19.272|
00001c  4286              CMP      r6,r0
00001e  d00a              BEQ      |L19.54|
000020  483c              LDR      r0,|L19.276|
000022  4286              CMP      r6,r0
000024  d007              BEQ      |L19.54|
000026  483c              LDR      r0,|L19.280|
000028  4286              CMP      r6,r0
00002a  d004              BEQ      |L19.54|
00002c  f6402118          MOV      r1,#0xa18
000030  483a              LDR      r0,|L19.284|
000032  f7fffffe          BL       assert_failed
                  |L19.54|
;;;2585     assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
000036  b354              CBZ      r4,|L19.142|
000038  2c01              CMP      r4,#1
00003a  d028              BEQ      |L19.142|
00003c  2c02              CMP      r4,#2
00003e  d026              BEQ      |L19.142|
000040  2c03              CMP      r4,#3
000042  d024              BEQ      |L19.142|
000044  2c04              CMP      r4,#4
000046  d022              BEQ      |L19.142|
000048  2c05              CMP      r4,#5
00004a  d020              BEQ      |L19.142|
00004c  2c06              CMP      r4,#6
00004e  d01e              BEQ      |L19.142|
000050  2c07              CMP      r4,#7
000052  d01c              BEQ      |L19.142|
000054  2c08              CMP      r4,#8
000056  d01a              BEQ      |L19.142|
000058  2c09              CMP      r4,#9
00005a  d018              BEQ      |L19.142|
00005c  2c0a              CMP      r4,#0xa
00005e  d016              BEQ      |L19.142|
000060  2c0b              CMP      r4,#0xb
000062  d014              BEQ      |L19.142|
000064  2c0c              CMP      r4,#0xc
000066  d012              BEQ      |L19.142|
000068  2c0d              CMP      r4,#0xd
00006a  d010              BEQ      |L19.142|
00006c  2c0e              CMP      r4,#0xe
00006e  d00e              BEQ      |L19.142|
000070  2c0f              CMP      r4,#0xf
000072  d00c              BEQ      |L19.142|
000074  2c10              CMP      r4,#0x10
000076  d00a              BEQ      |L19.142|
000078  2c11              CMP      r4,#0x11
00007a  d008              BEQ      |L19.142|
00007c  2c12              CMP      r4,#0x12
00007e  d006              BEQ      |L19.142|
000080  2c13              CMP      r4,#0x13
000082  d004              BEQ      |L19.142|
000084  f6402119          MOV      r1,#0xa19
000088  4824              LDR      r0,|L19.284|
00008a  f7fffffe          BL       assert_failed
                  |L19.142|
;;;2586     assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
00008e  b3bd              CBZ      r5,|L19.256|
000090  f5b57f80          CMP      r5,#0x100
000094  d034              BEQ      |L19.256|
000096  f5b57f00          CMP      r5,#0x200
00009a  d031              BEQ      |L19.256|
00009c  f5b57f40          CMP      r5,#0x300
0000a0  d02e              BEQ      |L19.256|
0000a2  f5b56f80          CMP      r5,#0x400
0000a6  d02b              BEQ      |L19.256|
0000a8  f5b56fa0          CMP      r5,#0x500
0000ac  d028              BEQ      |L19.256|
0000ae  f5b56fc0          CMP      r5,#0x600
0000b2  d025              BEQ      |L19.256|
0000b4  f5b56fe0          CMP      r5,#0x700
0000b8  d022              BEQ      |L19.256|
0000ba  f5b56f00          CMP      r5,#0x800
0000be  d01f              BEQ      |L19.256|
0000c0  f5b56f10          CMP      r5,#0x900
0000c4  d01c              BEQ      |L19.256|
0000c6  f5b56f20          CMP      r5,#0xa00
0000ca  d019              BEQ      |L19.256|
0000cc  f5b56f30          CMP      r5,#0xb00
0000d0  d016              BEQ      |L19.256|
0000d2  f5b56f40          CMP      r5,#0xc00
0000d6  d013              BEQ      |L19.256|
0000d8  f5b56f50          CMP      r5,#0xd00
0000dc  d010              BEQ      |L19.256|
0000de  f5b56f60          CMP      r5,#0xe00
0000e2  d00d              BEQ      |L19.256|
0000e4  f5b56f70          CMP      r5,#0xf00
0000e8  d00a              BEQ      |L19.256|
0000ea  f5b55f80          CMP      r5,#0x1000
0000ee  d007              BEQ      |L19.256|
0000f0  f5b55f88          CMP      r5,#0x1100
0000f4  d004              BEQ      |L19.256|
0000f6  f640211a          MOV      r1,#0xa1a
0000fa  4808              LDR      r0,|L19.284|
0000fc  f7fffffe          BL       assert_failed
                  |L19.256|
;;;2587   
;;;2588     /* Set the DMA Base and the DMA Burst Length */
;;;2589     TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
000100  432c              ORRS     r4,r4,r5
000102  f8a64048          STRH     r4,[r6,#0x48]
;;;2590   }
000106  bd70              POP      {r4-r6,pc}
;;;2591   
                          ENDP

                  |L19.264|
                          DCD      0x40010000
                  |L19.268|
                          DCD      0x40000400
                  |L19.272|
                          DCD      0x40000800
                  |L19.276|
                          DCD      0x40000c00
                  |L19.280|
                          DCD      0x40010400
                  |L19.284|
                          DCD      ||.conststring||

                          AREA ||i.TIM_DeInit||, CODE, READONLY, ALIGN=2

                  TIM_DeInit PROC
;;;193      */
;;;194    void TIM_DeInit(TIM_TypeDef* TIMx)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;195    {
;;;196      /* Check the parameters */
;;;197      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
000004  4d5c              LDR      r5,|L20.376|
000006  4e5d              LDR      r6,|L20.380|
000008  4f5d              LDR      r7,|L20.384|
00000a  f8df8178          LDR      r8,|L20.388|
00000e  f8dfa178          LDR      r10,|L20.392|
000012  f8dfb178          LDR      r11,|L20.396|
000016  4604              MOV      r4,r0                 ;195
000018  ea4f49b5          ROR      r9,r5,#18
00001c  42a8              CMP      r0,r5
00001e  d024              BEQ      |L20.106|
000020  f1b44f80          CMP      r4,#0x40000000
000024  d036              BEQ      |L20.148|
000026  42b4              CMP      r4,r6
000028  d01f              BEQ      |L20.106|
00002a  42bc              CMP      r4,r7
00002c  d01d              BEQ      |L20.106|
00002e  4544              CMP      r4,r8
000030  d01b              BEQ      |L20.106|
000032  454c              CMP      r4,r9
000034  d019              BEQ      |L20.106|
000036  4554              CMP      r4,r10
000038  d017              BEQ      |L20.106|
00003a  455c              CMP      r4,r11
00003c  d015              BEQ      |L20.106|
00003e  4854              LDR      r0,|L20.400|
000040  4284              CMP      r4,r0
000042  d012              BEQ      |L20.106|
000044  4853              LDR      r0,|L20.404|
000046  4284              CMP      r4,r0
000048  d00f              BEQ      |L20.106|
00004a  4853              LDR      r0,|L20.408|
00004c  4284              CMP      r4,r0
00004e  d00c              BEQ      |L20.106|
000050  4852              LDR      r0,|L20.412|
000052  4284              CMP      r4,r0
000054  d009              BEQ      |L20.106|
000056  4852              LDR      r0,|L20.416|
000058  4284              CMP      r4,r0
00005a  d006              BEQ      |L20.106|
00005c  4851              LDR      r0,|L20.420|
00005e  4284              CMP      r4,r0
000060  d003              BEQ      |L20.106|
000062  21c5              MOVS     r1,#0xc5
000064  4850              LDR      r0,|L20.424|
000066  f7fffffe          BL       assert_failed
                  |L20.106|
;;;198     
;;;199      if (TIMx == TIM1)
00006a  42ac              CMP      r4,r5
00006c  d106              BNE      |L20.124|
;;;200      {
;;;201        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
00006e  2101              MOVS     r1,#1
000070  4608              MOV      r0,r1
000072  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;202        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
000076  2100              MOVS     r1,#0
000078  2001              MOVS     r0,#1
00007a  e055              B        |L20.296|
                  |L20.124|
;;;203      } 
;;;204      else if (TIMx == TIM2) 
00007c  f1b44f80          CMP      r4,#0x40000000
000080  d008              BEQ      |L20.148|
;;;205      {     
;;;206        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
;;;207        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
;;;208      }  
;;;209      else if (TIMx == TIM3)
000082  42b4              CMP      r4,r6
000084  d10d              BNE      |L20.162|
;;;210      { 
;;;211        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
000086  2101              MOVS     r1,#1
000088  2002              MOVS     r0,#2
00008a  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;212        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
00008e  2100              MOVS     r1,#0
000090  2002              MOVS     r0,#2
000092  e06b              B        |L20.364|
                  |L20.148|
000094  2101              MOVS     r1,#1                 ;206
000096  4608              MOV      r0,r1                 ;206
000098  f7fffffe          BL       RCC_APB1PeriphResetCmd
00009c  2100              MOVS     r1,#0                 ;207
00009e  2001              MOVS     r0,#1                 ;207
0000a0  e064              B        |L20.364|
                  |L20.162|
;;;213      }  
;;;214      else if (TIMx == TIM4)
0000a2  42bc              CMP      r4,r7
0000a4  d106              BNE      |L20.180|
;;;215      { 
;;;216        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  2004              MOVS     r0,#4
0000aa  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;217        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
0000ae  2100              MOVS     r1,#0
0000b0  2004              MOVS     r0,#4
0000b2  e05b              B        |L20.364|
                  |L20.180|
;;;218      }  
;;;219      else if (TIMx == TIM5)
0000b4  4544              CMP      r4,r8
0000b6  d106              BNE      |L20.198|
;;;220      {      
;;;221        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
0000b8  2101              MOVS     r1,#1
0000ba  2008              MOVS     r0,#8
0000bc  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;222        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
0000c0  2100              MOVS     r1,#0
0000c2  2008              MOVS     r0,#8
0000c4  e052              B        |L20.364|
                  |L20.198|
;;;223      }  
;;;224      else if (TIMx == TIM6)  
0000c6  454c              CMP      r4,r9
0000c8  d106              BNE      |L20.216|
;;;225      {    
;;;226        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
0000ca  2101              MOVS     r1,#1
0000cc  2010              MOVS     r0,#0x10
0000ce  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;227        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
0000d2  2100              MOVS     r1,#0
0000d4  2010              MOVS     r0,#0x10
0000d6  e049              B        |L20.364|
                  |L20.216|
;;;228      }  
;;;229      else if (TIMx == TIM7)
0000d8  4554              CMP      r4,r10
0000da  d106              BNE      |L20.234|
;;;230      {      
;;;231        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
0000dc  2101              MOVS     r1,#1
0000de  2020              MOVS     r0,#0x20
0000e0  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;232        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
0000e4  2100              MOVS     r1,#0
0000e6  2020              MOVS     r0,#0x20
0000e8  e040              B        |L20.364|
                  |L20.234|
;;;233      }  
;;;234      else if (TIMx == TIM8)
0000ea  455c              CMP      r4,r11
0000ec  d106              BNE      |L20.252|
;;;235      {      
;;;236        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
0000ee  2101              MOVS     r1,#1
0000f0  2002              MOVS     r0,#2
0000f2  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;237        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
0000f6  2100              MOVS     r1,#0
0000f8  2002              MOVS     r0,#2
0000fa  e015              B        |L20.296|
                  |L20.252|
;;;238      }  
;;;239      else if (TIMx == TIM9)
0000fc  4824              LDR      r0,|L20.400|
0000fe  4284              CMP      r4,r0
000100  d102              BNE      |L20.264|
;;;240      {      
;;;241        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
000102  2101              MOVS     r1,#1
000104  040c              LSLS     r4,r1,#16
;;;242        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
000106  e00a              B        |L20.286|
                  |L20.264|
;;;243       }  
;;;244      else if (TIMx == TIM10)
000108  4822              LDR      r0,|L20.404|
00010a  4284              CMP      r4,r0
00010c  d102              BNE      |L20.276|
;;;245      {      
;;;246        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
00010e  2101              MOVS     r1,#1
000110  044c              LSLS     r4,r1,#17
;;;247        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
000112  e004              B        |L20.286|
                  |L20.276|
;;;248      }  
;;;249      else if (TIMx == TIM11) 
000114  4820              LDR      r0,|L20.408|
000116  4284              CMP      r4,r0
000118  d10a              BNE      |L20.304|
;;;250      {     
;;;251        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
00011a  2101              MOVS     r1,#1
00011c  048c              LSLS     r4,r1,#18
                  |L20.286|
00011e  4620              MOV      r0,r4
000120  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;252        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
000124  2100              MOVS     r1,#0
000126  4620              MOV      r0,r4
                  |L20.296|
000128  e8bd5ff0          POP      {r4-r12,lr}
00012c  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L20.304|
;;;253      }  
;;;254      else if (TIMx == TIM12)
000130  481a              LDR      r0,|L20.412|
000132  4284              CMP      r4,r0
000134  d106              BNE      |L20.324|
;;;255      {      
;;;256        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
000136  2101              MOVS     r1,#1
000138  2040              MOVS     r0,#0x40
00013a  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;257        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
00013e  2100              MOVS     r1,#0
000140  2040              MOVS     r0,#0x40
000142  e013              B        |L20.364|
                  |L20.324|
;;;258      }  
;;;259      else if (TIMx == TIM13) 
000144  4816              LDR      r0,|L20.416|
000146  4284              CMP      r4,r0
000148  d106              BNE      |L20.344|
;;;260      {       
;;;261        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
00014a  2101              MOVS     r1,#1
00014c  2080              MOVS     r0,#0x80
00014e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;262        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
000152  2100              MOVS     r1,#0
000154  2080              MOVS     r0,#0x80
000156  e009              B        |L20.364|
                  |L20.344|
;;;263      }  
;;;264      else
;;;265      { 
;;;266        if (TIMx == TIM14) 
000158  4812              LDR      r0,|L20.420|
00015a  4284              CMP      r4,r0
00015c  d10a              BNE      |L20.372|
;;;267        {     
;;;268          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
00015e  1584              ASRS     r4,r0,#22
000160  2101              MOVS     r1,#1
000162  4620              MOV      r0,r4
000164  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;269          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
000168  2100              MOVS     r1,#0
00016a  4620              MOV      r0,r4
                  |L20.364|
00016c  e8bd5ff0          POP      {r4-r12,lr}
000170  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L20.372|
;;;270        }   
;;;271      }
;;;272    }
000174  e8bd9ff0          POP      {r4-r12,pc}
;;;273    
                          ENDP

                  |L20.376|
                          DCD      0x40010000
                  |L20.380|
                          DCD      0x40000400
                  |L20.384|
                          DCD      0x40000800
                  |L20.388|
                          DCD      0x40000c00
                  |L20.392|
                          DCD      0x40001400
                  |L20.396|
                          DCD      0x40010400
                  |L20.400|
                          DCD      0x40014000
                  |L20.404|
                          DCD      0x40014400
                  |L20.408|
                          DCD      0x40014800
                  |L20.412|
                          DCD      0x40001800
                  |L20.416|
                          DCD      0x40001c00
                  |L20.420|
                          DCD      0x40002000
                  |L20.424|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ETRClockMode1Config||, CODE, READONLY, ALIGN=2

                  TIM_ETRClockMode1Config PROC
;;;2763     */
;;;2764   void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2765                               uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
;;;2766   {
000004  4604              MOV      r4,r0
;;;2767     uint16_t tmpsmcr = 0;
;;;2768   
;;;2769     /* Check the parameters */
;;;2770     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000006  4822              LDR      r0,|L21.144|
000008  461f              MOV      r7,r3                 ;2766
00000a  4616              MOV      r6,r2                 ;2766
00000c  460d              MOV      r5,r1                 ;2766
00000e  4284              CMP      r4,r0
000010  d013              BEQ      |L21.58|
000012  f1b44f80          CMP      r4,#0x40000000
000016  d010              BEQ      |L21.58|
000018  481e              LDR      r0,|L21.148|
00001a  4284              CMP      r4,r0
00001c  d00d              BEQ      |L21.58|
00001e  481e              LDR      r0,|L21.152|
000020  4284              CMP      r4,r0
000022  d00a              BEQ      |L21.58|
000024  481d              LDR      r0,|L21.156|
000026  4284              CMP      r4,r0
000028  d007              BEQ      |L21.58|
00002a  481d              LDR      r0,|L21.160|
00002c  4284              CMP      r4,r0
00002e  d004              BEQ      |L21.58|
000030  f64021d2          MOV      r1,#0xad2
000034  481b              LDR      r0,|L21.164|
000036  f7fffffe          BL       assert_failed
                  |L21.58|
;;;2771     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
00003a  b16d              CBZ      r5,|L21.88|
00003c  f5b55f80          CMP      r5,#0x1000
000040  d00a              BEQ      |L21.88|
000042  f5b55f00          CMP      r5,#0x2000
000046  d007              BEQ      |L21.88|
000048  f5b55f40          CMP      r5,#0x3000
00004c  d004              BEQ      |L21.88|
00004e  f64021d3          MOV      r1,#0xad3
000052  4814              LDR      r0,|L21.164|
000054  f7fffffe          BL       assert_failed
                  |L21.88|
;;;2772     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
000058  f5b64f00          CMP      r6,#0x8000
00005c  d005              BEQ      |L21.106|
00005e  b126              CBZ      r6,|L21.106|
000060  f64021d4          MOV      r1,#0xad4
000064  480f              LDR      r0,|L21.164|
000066  f7fffffe          BL       assert_failed
                  |L21.106|
;;;2773     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
00006a  2f0f              CMP      r7,#0xf
00006c  d904              BLS      |L21.120|
00006e  f64021d5          MOV      r1,#0xad5
000072  480c              LDR      r0,|L21.164|
000074  f7fffffe          BL       assert_failed
                  |L21.120|
;;;2774     /* Configure the ETR Clock source */
;;;2775     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
000078  463b              MOV      r3,r7
00007a  4632              MOV      r2,r6
00007c  4629              MOV      r1,r5
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       TIM_ETRConfig
;;;2776     
;;;2777     /* Get the TIMx SMCR register value */
;;;2778     tmpsmcr = TIMx->SMCR;
000084  8920              LDRH     r0,[r4,#8]
;;;2779   
;;;2780     /* Reset the SMS Bits */
;;;2781     tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
;;;2782   
;;;2783     /* Select the External clock mode1 */
;;;2784     tmpsmcr |= TIM_SlaveMode_External1;
;;;2785   
;;;2786     /* Select the Trigger selection : ETRF */
;;;2787     tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
;;;2788     tmpsmcr |= TIM_TS_ETRF;
000086  f0400077          ORR      r0,r0,#0x77
;;;2789   
;;;2790     /* Write to TIMx SMCR */
;;;2791     TIMx->SMCR = tmpsmcr;
00008a  8120              STRH     r0,[r4,#8]
;;;2792   }
00008c  e8bd81f0          POP      {r4-r8,pc}
;;;2793   
                          ENDP

                  |L21.144|
                          DCD      0x40010000
                  |L21.148|
                          DCD      0x40000400
                  |L21.152|
                          DCD      0x40000800
                  |L21.156|
                          DCD      0x40000c00
                  |L21.160|
                          DCD      0x40010400
                  |L21.164|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ETRClockMode2Config||, CODE, READONLY, ALIGN=2

                  TIM_ETRClockMode2Config PROC
;;;2810     */
;;;2811   void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2812                                uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
;;;2813   {
000004  4604              MOV      r4,r0
;;;2814     /* Check the parameters */
;;;2815     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000006  4822              LDR      r0,|L22.144|
000008  461f              MOV      r7,r3                 ;2813
00000a  4616              MOV      r6,r2                 ;2813
00000c  460d              MOV      r5,r1                 ;2813
00000e  4284              CMP      r4,r0
000010  d013              BEQ      |L22.58|
000012  f1b44f80          CMP      r4,#0x40000000
000016  d010              BEQ      |L22.58|
000018  481e              LDR      r0,|L22.148|
00001a  4284              CMP      r4,r0
00001c  d00d              BEQ      |L22.58|
00001e  481e              LDR      r0,|L22.152|
000020  4284              CMP      r4,r0
000022  d00a              BEQ      |L22.58|
000024  481d              LDR      r0,|L22.156|
000026  4284              CMP      r4,r0
000028  d007              BEQ      |L22.58|
00002a  481d              LDR      r0,|L22.160|
00002c  4284              CMP      r4,r0
00002e  d004              BEQ      |L22.58|
000030  f64021ff          MOV      r1,#0xaff
000034  481b              LDR      r0,|L22.164|
000036  f7fffffe          BL       assert_failed
                  |L22.58|
;;;2816     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
00003a  b16d              CBZ      r5,|L22.88|
00003c  f5b55f80          CMP      r5,#0x1000
000040  d00a              BEQ      |L22.88|
000042  f5b55f00          CMP      r5,#0x2000
000046  d007              BEQ      |L22.88|
000048  f5b55f40          CMP      r5,#0x3000
00004c  d004              BEQ      |L22.88|
00004e  f44f6130          MOV      r1,#0xb00
000052  4814              LDR      r0,|L22.164|
000054  f7fffffe          BL       assert_failed
                  |L22.88|
;;;2817     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
000058  f5b64f00          CMP      r6,#0x8000
00005c  d005              BEQ      |L22.106|
00005e  b126              CBZ      r6,|L22.106|
000060  f6403101          MOV      r1,#0xb01
000064  480f              LDR      r0,|L22.164|
000066  f7fffffe          BL       assert_failed
                  |L22.106|
;;;2818     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
00006a  2f0f              CMP      r7,#0xf
00006c  d904              BLS      |L22.120|
00006e  f6403102          MOV      r1,#0xb02
000072  480c              LDR      r0,|L22.164|
000074  f7fffffe          BL       assert_failed
                  |L22.120|
;;;2819   
;;;2820     /* Configure the ETR Clock source */
;;;2821     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
000078  463b              MOV      r3,r7
00007a  4632              MOV      r2,r6
00007c  4629              MOV      r1,r5
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       TIM_ETRConfig
;;;2822   
;;;2823     /* Enable the External clock mode2 */
;;;2824     TIMx->SMCR |= TIM_SMCR_ECE;
000084  8920              LDRH     r0,[r4,#8]
000086  f4404080          ORR      r0,r0,#0x4000
00008a  8120              STRH     r0,[r4,#8]
;;;2825   }
00008c  e8bd81f0          POP      {r4-r8,pc}
;;;2826   /**
                          ENDP

                  |L22.144|
                          DCD      0x40010000
                  |L22.148|
                          DCD      0x40000400
                  |L22.152|
                          DCD      0x40000800
                  |L22.156|
                          DCD      0x40000c00
                  |L22.160|
                          DCD      0x40010400
                  |L22.164|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ETRConfig||, CODE, READONLY, ALIGN=2

                  TIM_ETRConfig PROC
;;;2998     */
;;;2999   void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3000                      uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
;;;3001   {
000004  4604              MOV      r4,r0
;;;3002     uint16_t tmpsmcr = 0;
;;;3003   
;;;3004     /* Check the parameters */
;;;3005     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000006  4822              LDR      r0,|L23.144|
000008  461f              MOV      r7,r3                 ;3001
00000a  4616              MOV      r6,r2                 ;3001
00000c  460d              MOV      r5,r1                 ;3001
00000e  4284              CMP      r4,r0
000010  d013              BEQ      |L23.58|
000012  f1b44f80          CMP      r4,#0x40000000
000016  d010              BEQ      |L23.58|
000018  481e              LDR      r0,|L23.148|
00001a  4284              CMP      r4,r0
00001c  d00d              BEQ      |L23.58|
00001e  481e              LDR      r0,|L23.152|
000020  4284              CMP      r4,r0
000022  d00a              BEQ      |L23.58|
000024  481d              LDR      r0,|L23.156|
000026  4284              CMP      r4,r0
000028  d007              BEQ      |L23.58|
00002a  481d              LDR      r0,|L23.160|
00002c  4284              CMP      r4,r0
00002e  d004              BEQ      |L23.58|
000030  f64031bd          MOV      r1,#0xbbd
000034  481b              LDR      r0,|L23.164|
000036  f7fffffe          BL       assert_failed
                  |L23.58|
;;;3006     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
00003a  b16d              CBZ      r5,|L23.88|
00003c  f5b55f80          CMP      r5,#0x1000
000040  d00a              BEQ      |L23.88|
000042  f5b55f00          CMP      r5,#0x2000
000046  d007              BEQ      |L23.88|
000048  f5b55f40          CMP      r5,#0x3000
00004c  d004              BEQ      |L23.88|
00004e  f64031be          MOV      r1,#0xbbe
000052  4814              LDR      r0,|L23.164|
000054  f7fffffe          BL       assert_failed
                  |L23.88|
;;;3007     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
000058  f5b64f00          CMP      r6,#0x8000
00005c  d005              BEQ      |L23.106|
00005e  b126              CBZ      r6,|L23.106|
000060  f64031bf          MOV      r1,#0xbbf
000064  480f              LDR      r0,|L23.164|
000066  f7fffffe          BL       assert_failed
                  |L23.106|
;;;3008     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
00006a  2f0f              CMP      r7,#0xf
00006c  d904              BLS      |L23.120|
00006e  f44f613c          MOV      r1,#0xbc0
000072  480c              LDR      r0,|L23.164|
000074  f7fffffe          BL       assert_failed
                  |L23.120|
;;;3009   
;;;3010     tmpsmcr = TIMx->SMCR;
000078  8920              LDRH     r0,[r4,#8]
;;;3011   
;;;3012     /* Reset the ETR Bits */
;;;3013     tmpsmcr &= SMCR_ETR_MASK;
;;;3014   
;;;3015     /* Set the Prescaler, the Filter value and the Polarity */
;;;3016     tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
00007a  f64f71ff          MOV      r1,#0xffff
00007e  ea012107          AND      r1,r1,r7,LSL #8
000082  4331              ORRS     r1,r1,r6
000084  b2c0              UXTB     r0,r0                 ;3013
000086  4329              ORRS     r1,r1,r5
000088  4301              ORRS     r1,r1,r0
;;;3017   
;;;3018     /* Write to TIMx SMCR */
;;;3019     TIMx->SMCR = tmpsmcr;
00008a  8121              STRH     r1,[r4,#8]
;;;3020   }
00008c  e8bd81f0          POP      {r4-r8,pc}
;;;3021   /**
                          ENDP

                  |L23.144|
                          DCD      0x40010000
                  |L23.148|
                          DCD      0x40000400
                  |L23.152|
                          DCD      0x40000800
                  |L23.156|
                          DCD      0x40000c00
                  |L23.160|
                          DCD      0x40010400
                  |L23.164|
                          DCD      ||.conststring||

                          AREA ||i.TIM_EncoderInterfaceConfig||, CODE, READONLY, ALIGN=2

                  TIM_EncoderInterfaceConfig PROC
;;;3056     */
;;;3057   void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3058                                   uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
;;;3059   {
000004  4604              MOV      r4,r0
;;;3060     uint16_t tmpsmcr = 0;
;;;3061     uint16_t tmpccmr1 = 0;
;;;3062     uint16_t tmpccer = 0;
;;;3063       
;;;3064     /* Check the parameters */
;;;3065     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000006  482c              LDR      r0,|L24.184|
000008  461d              MOV      r5,r3                 ;3059
00000a  4616              MOV      r6,r2                 ;3059
00000c  460f              MOV      r7,r1                 ;3059
00000e  4284              CMP      r4,r0
000010  d019              BEQ      |L24.70|
000012  f1b44f80          CMP      r4,#0x40000000
000016  d016              BEQ      |L24.70|
000018  4828              LDR      r0,|L24.188|
00001a  4284              CMP      r4,r0
00001c  d013              BEQ      |L24.70|
00001e  4828              LDR      r0,|L24.192|
000020  4284              CMP      r4,r0
000022  d010              BEQ      |L24.70|
000024  4827              LDR      r0,|L24.196|
000026  4284              CMP      r4,r0
000028  d00d              BEQ      |L24.70|
00002a  4827              LDR      r0,|L24.200|
00002c  4284              CMP      r4,r0
00002e  d00a              BEQ      |L24.70|
000030  4826              LDR      r0,|L24.204|
000032  4284              CMP      r4,r0
000034  d007              BEQ      |L24.70|
000036  4826              LDR      r0,|L24.208|
000038  4284              CMP      r4,r0
00003a  d004              BEQ      |L24.70|
00003c  f64031f9          MOV      r1,#0xbf9
000040  4824              LDR      r0,|L24.212|
000042  f7fffffe          BL       assert_failed
                  |L24.70|
;;;3066     assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
000046  2f01              CMP      r7,#1
000048  d008              BEQ      |L24.92|
00004a  2f02              CMP      r7,#2
00004c  d006              BEQ      |L24.92|
00004e  2f03              CMP      r7,#3
000050  d004              BEQ      |L24.92|
000052  f64031fa          MOV      r1,#0xbfa
000056  481f              LDR      r0,|L24.212|
000058  f7fffffe          BL       assert_failed
                  |L24.92|
;;;3067     assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
00005c  b146              CBZ      r6,|L24.112|
00005e  2e02              CMP      r6,#2
000060  d006              BEQ      |L24.112|
000062  2e0a              CMP      r6,#0xa
000064  d004              BEQ      |L24.112|
000066  f64031fb          MOV      r1,#0xbfb
00006a  481a              LDR      r0,|L24.212|
00006c  f7fffffe          BL       assert_failed
                  |L24.112|
;;;3068     assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
000070  b145              CBZ      r5,|L24.132|
000072  2d02              CMP      r5,#2
000074  d006              BEQ      |L24.132|
000076  2d0a              CMP      r5,#0xa
000078  d004              BEQ      |L24.132|
00007a  f64031fc          MOV      r1,#0xbfc
00007e  4815              LDR      r0,|L24.212|
000080  f7fffffe          BL       assert_failed
                  |L24.132|
;;;3069   
;;;3070     /* Get the TIMx SMCR register value */
;;;3071     tmpsmcr = TIMx->SMCR;
000084  8921              LDRH     r1,[r4,#8]
;;;3072   
;;;3073     /* Get the TIMx CCMR1 register value */
;;;3074     tmpccmr1 = TIMx->CCMR1;
000086  8b20              LDRH     r0,[r4,#0x18]
;;;3075   
;;;3076     /* Get the TIMx CCER register value */
;;;3077     tmpccer = TIMx->CCER;
000088  8c22              LDRH     r2,[r4,#0x20]
;;;3078   
;;;3079     /* Set the encoder Mode */
;;;3080     tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
;;;3081     tmpsmcr |= TIM_EncoderMode;
;;;3082   
;;;3083     /* Select the Capture Compare 1 and the Capture Compare 2 as input */
;;;3084     tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
00008a  f64f43fc          MOV      r3,#0xfcfc
00008e  4018              ANDS     r0,r0,r3
;;;3085     tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
000090  f2401301          MOV      r3,#0x101
000094  4318              ORRS     r0,r0,r3
;;;3086   
;;;3087     /* Set the TI1 and the TI2 Polarities */
;;;3088     tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
000096  f0220322          BIC      r3,r2,#0x22
00009a  f0210107          BIC      r1,r1,#7              ;3080
;;;3089     tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
00009e  f64f72ff          MOV      r2,#0xffff
0000a2  4339              ORRS     r1,r1,r7              ;3081
0000a4  ea021205          AND      r2,r2,r5,LSL #4
0000a8  4332              ORRS     r2,r2,r6
0000aa  431a              ORRS     r2,r2,r3
;;;3090   
;;;3091     /* Write to TIMx SMCR */
;;;3092     TIMx->SMCR = tmpsmcr;
0000ac  8121              STRH     r1,[r4,#8]
;;;3093   
;;;3094     /* Write to TIMx CCMR1 */
;;;3095     TIMx->CCMR1 = tmpccmr1;
0000ae  8320              STRH     r0,[r4,#0x18]
;;;3096   
;;;3097     /* Write to TIMx CCER */
;;;3098     TIMx->CCER = tmpccer;
0000b0  8422              STRH     r2,[r4,#0x20]
;;;3099   }
0000b2  e8bd81f0          POP      {r4-r8,pc}
;;;3100   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L24.184|
                          DCD      0x40010000
                  |L24.188|
                          DCD      0x40000400
                  |L24.192|
                          DCD      0x40000800
                  |L24.196|
                          DCD      0x40000c00
                  |L24.200|
                          DCD      0x40010400
                  |L24.204|
                          DCD      0x40014000
                  |L24.208|
                          DCD      0x40001800
                  |L24.212|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ForcedOC1Config||, CODE, READONLY, ALIGN=2

                  TIM_ForcedOC1Config PROC
;;;1115     */
;;;1116   void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  b570              PUSH     {r4-r6,lr}
;;;1117   {
000002  4604              MOV      r4,r0
;;;1118     uint16_t tmpccmr1 = 0;
;;;1119   
;;;1120     /* Check the parameters */
;;;1121     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000004  481c              LDR      r0,|L25.120|
000006  460d              MOV      r5,r1                 ;1117
000008  4284              CMP      r4,r0
00000a  d025              BEQ      |L25.88|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d022              BEQ      |L25.88|
000012  481a              LDR      r0,|L25.124|
000014  4284              CMP      r4,r0
000016  d01f              BEQ      |L25.88|
000018  4819              LDR      r0,|L25.128|
00001a  4284              CMP      r4,r0
00001c  d01c              BEQ      |L25.88|
00001e  4819              LDR      r0,|L25.132|
000020  4284              CMP      r4,r0
000022  d019              BEQ      |L25.88|
000024  4818              LDR      r0,|L25.136|
000026  4284              CMP      r4,r0
000028  d016              BEQ      |L25.88|
00002a  4818              LDR      r0,|L25.140|
00002c  4284              CMP      r4,r0
00002e  d013              BEQ      |L25.88|
000030  4817              LDR      r0,|L25.144|
000032  4284              CMP      r4,r0
000034  d010              BEQ      |L25.88|
000036  4817              LDR      r0,|L25.148|
000038  4284              CMP      r4,r0
00003a  d00d              BEQ      |L25.88|
00003c  4816              LDR      r0,|L25.152|
00003e  4284              CMP      r4,r0
000040  d00a              BEQ      |L25.88|
000042  4816              LDR      r0,|L25.156|
000044  4284              CMP      r4,r0
000046  d007              BEQ      |L25.88|
000048  4815              LDR      r0,|L25.160|
00004a  4284              CMP      r4,r0
00004c  d004              BEQ      |L25.88|
00004e  f2404161          MOV      r1,#0x461
000052  4814              LDR      r0,|L25.164|
000054  f7fffffe          BL       assert_failed
                  |L25.88|
;;;1122     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
000058  2d50              CMP      r5,#0x50
00005a  d006              BEQ      |L25.106|
00005c  2d40              CMP      r5,#0x40
00005e  d004              BEQ      |L25.106|
000060  f2404162          MOV      r1,#0x462
000064  480f              LDR      r0,|L25.164|
000066  f7fffffe          BL       assert_failed
                  |L25.106|
;;;1123     tmpccmr1 = TIMx->CCMR1;
00006a  8b20              LDRH     r0,[r4,#0x18]
;;;1124   
;;;1125     /* Reset the OC1M Bits */
;;;1126     tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
00006c  f0200070          BIC      r0,r0,#0x70
;;;1127   
;;;1128     /* Configure The Forced output Mode */
;;;1129     tmpccmr1 |= TIM_ForcedAction;
000070  4328              ORRS     r0,r0,r5
;;;1130   
;;;1131     /* Write to TIMx CCMR1 register */
;;;1132     TIMx->CCMR1 = tmpccmr1;
000072  8320              STRH     r0,[r4,#0x18]
;;;1133   }
000074  bd70              POP      {r4-r6,pc}
;;;1134   
                          ENDP

000076  0000              DCW      0x0000
                  |L25.120|
                          DCD      0x40010000
                  |L25.124|
                          DCD      0x40000400
                  |L25.128|
                          DCD      0x40000800
                  |L25.132|
                          DCD      0x40000c00
                  |L25.136|
                          DCD      0x40010400
                  |L25.140|
                          DCD      0x40014000
                  |L25.144|
                          DCD      0x40014400
                  |L25.148|
                          DCD      0x40014800
                  |L25.152|
                          DCD      0x40001800
                  |L25.156|
                          DCD      0x40001c00
                  |L25.160|
                          DCD      0x40002000
                  |L25.164|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ForcedOC2Config||, CODE, READONLY, ALIGN=2

                  TIM_ForcedOC2Config PROC
;;;1144     */
;;;1145   void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  b570              PUSH     {r4-r6,lr}
;;;1146   {
000002  4604              MOV      r4,r0
;;;1147     uint16_t tmpccmr1 = 0;
;;;1148   
;;;1149     /* Check the parameters */
;;;1150     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  4818              LDR      r0,|L26.104|
000006  460d              MOV      r5,r1                 ;1146
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L26.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L26.64|
000012  4816              LDR      r0,|L26.108|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L26.64|
000018  4815              LDR      r0,|L26.112|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L26.64|
00001e  4815              LDR      r0,|L26.116|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L26.64|
000024  4814              LDR      r0,|L26.120|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L26.64|
00002a  4814              LDR      r0,|L26.124|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L26.64|
000030  4813              LDR      r0,|L26.128|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L26.64|
000036  f240417e          MOV      r1,#0x47e
00003a  4812              LDR      r0,|L26.132|
00003c  f7fffffe          BL       assert_failed
                  |L26.64|
;;;1151     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
000040  2d50              CMP      r5,#0x50
000042  d006              BEQ      |L26.82|
000044  2d40              CMP      r5,#0x40
000046  d004              BEQ      |L26.82|
000048  f240417f          MOV      r1,#0x47f
00004c  480d              LDR      r0,|L26.132|
00004e  f7fffffe          BL       assert_failed
                  |L26.82|
;;;1152     tmpccmr1 = TIMx->CCMR1;
000052  8b20              LDRH     r0,[r4,#0x18]
;;;1153   
;;;1154     /* Reset the OC2M Bits */
;;;1155     tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
;;;1156   
;;;1157     /* Configure The Forced output Mode */
;;;1158     tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
000054  f64f71ff          MOV      r1,#0xffff
000058  f42040e0          BIC      r0,r0,#0x7000         ;1155
00005c  ea012105          AND      r1,r1,r5,LSL #8
000060  4301              ORRS     r1,r1,r0
;;;1159   
;;;1160     /* Write to TIMx CCMR1 register */
;;;1161     TIMx->CCMR1 = tmpccmr1;
000062  8321              STRH     r1,[r4,#0x18]
;;;1162   }
000064  bd70              POP      {r4-r6,pc}
;;;1163   
                          ENDP

000066  0000              DCW      0x0000
                  |L26.104|
                          DCD      0x40010000
                  |L26.108|
                          DCD      0x40000400
                  |L26.112|
                          DCD      0x40000800
                  |L26.116|
                          DCD      0x40000c00
                  |L26.120|
                          DCD      0x40010400
                  |L26.124|
                          DCD      0x40014000
                  |L26.128|
                          DCD      0x40001800
                  |L26.132|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ForcedOC3Config||, CODE, READONLY, ALIGN=2

                  TIM_ForcedOC3Config PROC
;;;1172     */
;;;1173   void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  b570              PUSH     {r4-r6,lr}
;;;1174   {
000002  4604              MOV      r4,r0
;;;1175     uint16_t tmpccmr2 = 0;
;;;1176   
;;;1177     /* Check the parameters */
;;;1178     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4813              LDR      r0,|L27.84|
000006  460d              MOV      r5,r1                 ;1174
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L27.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L27.52|
000012  4811              LDR      r0,|L27.88|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L27.52|
000018  4810              LDR      r0,|L27.92|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L27.52|
00001e  4810              LDR      r0,|L27.96|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L27.52|
000024  480f              LDR      r0,|L27.100|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L27.52|
00002a  f240419a          MOV      r1,#0x49a
00002e  480e              LDR      r0,|L27.104|
000030  f7fffffe          BL       assert_failed
                  |L27.52|
;;;1179     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
000034  2d50              CMP      r5,#0x50
000036  d006              BEQ      |L27.70|
000038  2d40              CMP      r5,#0x40
00003a  d004              BEQ      |L27.70|
00003c  f240419b          MOV      r1,#0x49b
000040  4809              LDR      r0,|L27.104|
000042  f7fffffe          BL       assert_failed
                  |L27.70|
;;;1180   
;;;1181     tmpccmr2 = TIMx->CCMR2;
000046  8ba0              LDRH     r0,[r4,#0x1c]
;;;1182   
;;;1183     /* Reset the OC1M Bits */
;;;1184     tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
000048  f0200070          BIC      r0,r0,#0x70
;;;1185   
;;;1186     /* Configure The Forced output Mode */
;;;1187     tmpccmr2 |= TIM_ForcedAction;
00004c  4328              ORRS     r0,r0,r5
;;;1188   
;;;1189     /* Write to TIMx CCMR2 register */
;;;1190     TIMx->CCMR2 = tmpccmr2;
00004e  83a0              STRH     r0,[r4,#0x1c]
;;;1191   }
000050  bd70              POP      {r4-r6,pc}
;;;1192   
                          ENDP

000052  0000              DCW      0x0000
                  |L27.84|
                          DCD      0x40010000
                  |L27.88|
                          DCD      0x40000400
                  |L27.92|
                          DCD      0x40000800
                  |L27.96|
                          DCD      0x40000c00
                  |L27.100|
                          DCD      0x40010400
                  |L27.104|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ForcedOC4Config||, CODE, READONLY, ALIGN=2

                  TIM_ForcedOC4Config PROC
;;;1201     */
;;;1202   void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  b570              PUSH     {r4-r6,lr}
;;;1203   {
000002  4604              MOV      r4,r0
;;;1204     uint16_t tmpccmr2 = 0;
;;;1205   
;;;1206     /* Check the parameters */
;;;1207     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4815              LDR      r0,|L28.92|
000006  460d              MOV      r5,r1                 ;1203
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L28.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L28.52|
000012  4813              LDR      r0,|L28.96|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L28.52|
000018  4812              LDR      r0,|L28.100|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L28.52|
00001e  4812              LDR      r0,|L28.104|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L28.52|
000024  4811              LDR      r0,|L28.108|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L28.52|
00002a  f24041b7          MOV      r1,#0x4b7
00002e  4810              LDR      r0,|L28.112|
000030  f7fffffe          BL       assert_failed
                  |L28.52|
;;;1208     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
000034  2d50              CMP      r5,#0x50
000036  d006              BEQ      |L28.70|
000038  2d40              CMP      r5,#0x40
00003a  d004              BEQ      |L28.70|
00003c  f44f6197          MOV      r1,#0x4b8
000040  480b              LDR      r0,|L28.112|
000042  f7fffffe          BL       assert_failed
                  |L28.70|
;;;1209     tmpccmr2 = TIMx->CCMR2;
000046  8ba0              LDRH     r0,[r4,#0x1c]
;;;1210   
;;;1211     /* Reset the OC2M Bits */
;;;1212     tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
;;;1213   
;;;1214     /* Configure The Forced output Mode */
;;;1215     tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
000048  f64f71ff          MOV      r1,#0xffff
00004c  f42040e0          BIC      r0,r0,#0x7000         ;1212
000050  ea012105          AND      r1,r1,r5,LSL #8
000054  4301              ORRS     r1,r1,r0
;;;1216   
;;;1217     /* Write to TIMx CCMR2 register */
;;;1218     TIMx->CCMR2 = tmpccmr2;
000056  83a1              STRH     r1,[r4,#0x1c]
;;;1219   }
000058  bd70              POP      {r4-r6,pc}
;;;1220   
                          ENDP

00005a  0000              DCW      0x0000
                  |L28.92|
                          DCD      0x40010000
                  |L28.96|
                          DCD      0x40000400
                  |L28.100|
                          DCD      0x40000800
                  |L28.104|
                          DCD      0x40000c00
                  |L28.108|
                          DCD      0x40010400
                  |L28.112|
                          DCD      ||.conststring||

                          AREA ||i.TIM_GenerateEvent||, CODE, READONLY, ALIGN=2

                  TIM_GenerateEvent PROC
;;;2399     */
;;;2400   void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
000000  b570              PUSH     {r4-r6,lr}
;;;2401   { 
000002  4604              MOV      r4,r0
;;;2402     /* Check the parameters */
;;;2403     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  481c              LDR      r0,|L29.120|
000006  460d              MOV      r5,r1                 ;2401
000008  4284              CMP      r4,r0
00000a  d02b              BEQ      |L29.100|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d028              BEQ      |L29.100|
000012  481a              LDR      r0,|L29.124|
000014  4284              CMP      r4,r0
000016  d025              BEQ      |L29.100|
000018  4819              LDR      r0,|L29.128|
00001a  4284              CMP      r4,r0
00001c  d022              BEQ      |L29.100|
00001e  4819              LDR      r0,|L29.132|
000020  4284              CMP      r4,r0
000022  d01f              BEQ      |L29.100|
000024  4818              LDR      r0,|L29.136|
000026  4284              CMP      r4,r0
000028  d01c              BEQ      |L29.100|
00002a  4818              LDR      r0,|L29.140|
00002c  4284              CMP      r4,r0
00002e  d019              BEQ      |L29.100|
000030  4817              LDR      r0,|L29.144|
000032  4284              CMP      r4,r0
000034  d016              BEQ      |L29.100|
000036  4817              LDR      r0,|L29.148|
000038  4284              CMP      r4,r0
00003a  d013              BEQ      |L29.100|
00003c  4816              LDR      r0,|L29.152|
00003e  4284              CMP      r4,r0
000040  d010              BEQ      |L29.100|
000042  4816              LDR      r0,|L29.156|
000044  4284              CMP      r4,r0
000046  d00d              BEQ      |L29.100|
000048  4815              LDR      r0,|L29.160|
00004a  4284              CMP      r4,r0
00004c  d00a              BEQ      |L29.100|
00004e  4815              LDR      r0,|L29.164|
000050  4284              CMP      r4,r0
000052  d007              BEQ      |L29.100|
000054  4814              LDR      r0,|L29.168|
000056  4284              CMP      r4,r0
000058  d004              BEQ      |L29.100|
00005a  f6401163          MOV      r1,#0x963
00005e  4813              LDR      r0,|L29.172|
000060  f7fffffe          BL       assert_failed
                  |L29.100|
;;;2404     assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
000064  0a28              LSRS     r0,r5,#8
000066  d100              BNE      |L29.106|
000068  b925              CBNZ     r5,|L29.116|
                  |L29.106|
00006a  f6401164          MOV      r1,#0x964
00006e  480f              LDR      r0,|L29.172|
000070  f7fffffe          BL       assert_failed
                  |L29.116|
;;;2405    
;;;2406     /* Set the event sources */
;;;2407     TIMx->EGR = TIM_EventSource;
000074  82a5              STRH     r5,[r4,#0x14]
;;;2408   }
000076  bd70              POP      {r4-r6,pc}
;;;2409   
                          ENDP

                  |L29.120|
                          DCD      0x40010000
                  |L29.124|
                          DCD      0x40000400
                  |L29.128|
                          DCD      0x40000800
                  |L29.132|
                          DCD      0x40000c00
                  |L29.136|
                          DCD      0x40001000
                  |L29.140|
                          DCD      0x40001400
                  |L29.144|
                          DCD      0x40010400
                  |L29.148|
                          DCD      0x40014000
                  |L29.152|
                          DCD      0x40014400
                  |L29.156|
                          DCD      0x40014800
                  |L29.160|
                          DCD      0x40001800
                  |L29.164|
                          DCD      0x40001c00
                  |L29.168|
                          DCD      0x40002000
                  |L29.172|
                          DCD      ||.conststring||

                          AREA ||i.TIM_GetCapture1||, CODE, READONLY, ALIGN=2

                  TIM_GetCapture1 PROC
;;;2021     */
;;;2022   uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;2023   {
000002  4604              MOV      r4,r0
;;;2024     /* Check the parameters */
;;;2025     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000004  4815              LDR      r0,|L30.92|
000006  4284              CMP      r4,r0
000008  d025              BEQ      |L30.86|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d022              BEQ      |L30.86|
000010  4813              LDR      r0,|L30.96|
000012  4284              CMP      r4,r0
000014  d01f              BEQ      |L30.86|
000016  4813              LDR      r0,|L30.100|
000018  4284              CMP      r4,r0
00001a  d01c              BEQ      |L30.86|
00001c  4812              LDR      r0,|L30.104|
00001e  4284              CMP      r4,r0
000020  d019              BEQ      |L30.86|
000022  4812              LDR      r0,|L30.108|
000024  4284              CMP      r4,r0
000026  d016              BEQ      |L30.86|
000028  4811              LDR      r0,|L30.112|
00002a  4284              CMP      r4,r0
00002c  d013              BEQ      |L30.86|
00002e  4811              LDR      r0,|L30.116|
000030  4284              CMP      r4,r0
000032  d010              BEQ      |L30.86|
000034  4810              LDR      r0,|L30.120|
000036  4284              CMP      r4,r0
000038  d00d              BEQ      |L30.86|
00003a  4810              LDR      r0,|L30.124|
00003c  4284              CMP      r4,r0
00003e  d00a              BEQ      |L30.86|
000040  480f              LDR      r0,|L30.128|
000042  4284              CMP      r4,r0
000044  d007              BEQ      |L30.86|
000046  480f              LDR      r0,|L30.132|
000048  4284              CMP      r4,r0
00004a  d004              BEQ      |L30.86|
00004c  f24071e9          MOV      r1,#0x7e9
000050  480d              LDR      r0,|L30.136|
000052  f7fffffe          BL       assert_failed
                  |L30.86|
;;;2026   
;;;2027     /* Get the Capture 1 Register value */
;;;2028     return TIMx->CCR1;
000056  6b60              LDR      r0,[r4,#0x34]
;;;2029   }
000058  bd10              POP      {r4,pc}
;;;2030   
                          ENDP

00005a  0000              DCW      0x0000
                  |L30.92|
                          DCD      0x40010000
                  |L30.96|
                          DCD      0x40000400
                  |L30.100|
                          DCD      0x40000800
                  |L30.104|
                          DCD      0x40000c00
                  |L30.108|
                          DCD      0x40010400
                  |L30.112|
                          DCD      0x40014000
                  |L30.116|
                          DCD      0x40014400
                  |L30.120|
                          DCD      0x40014800
                  |L30.124|
                          DCD      0x40001800
                  |L30.128|
                          DCD      0x40001c00
                  |L30.132|
                          DCD      0x40002000
                  |L30.136|
                          DCD      ||.conststring||

                          AREA ||i.TIM_GetCapture2||, CODE, READONLY, ALIGN=2

                  TIM_GetCapture2 PROC
;;;2036     */
;;;2037   uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;2038   {
000002  4604              MOV      r4,r0
;;;2039     /* Check the parameters */
;;;2040     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  480f              LDR      r0,|L31.68|
000006  4284              CMP      r4,r0
000008  d019              BEQ      |L31.62|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d016              BEQ      |L31.62|
000010  480d              LDR      r0,|L31.72|
000012  4284              CMP      r4,r0
000014  d013              BEQ      |L31.62|
000016  480d              LDR      r0,|L31.76|
000018  4284              CMP      r4,r0
00001a  d010              BEQ      |L31.62|
00001c  480c              LDR      r0,|L31.80|
00001e  4284              CMP      r4,r0
000020  d00d              BEQ      |L31.62|
000022  480c              LDR      r0,|L31.84|
000024  4284              CMP      r4,r0
000026  d00a              BEQ      |L31.62|
000028  480b              LDR      r0,|L31.88|
00002a  4284              CMP      r4,r0
00002c  d007              BEQ      |L31.62|
00002e  480b              LDR      r0,|L31.92|
000030  4284              CMP      r4,r0
000032  d004              BEQ      |L31.62|
000034  f44f61ff          MOV      r1,#0x7f8
000038  4809              LDR      r0,|L31.96|
00003a  f7fffffe          BL       assert_failed
                  |L31.62|
;;;2041   
;;;2042     /* Get the Capture 2 Register value */
;;;2043     return TIMx->CCR2;
00003e  6ba0              LDR      r0,[r4,#0x38]
;;;2044   }
000040  bd10              POP      {r4,pc}
;;;2045   
                          ENDP

000042  0000              DCW      0x0000
                  |L31.68|
                          DCD      0x40010000
                  |L31.72|
                          DCD      0x40000400
                  |L31.76|
                          DCD      0x40000800
                  |L31.80|
                          DCD      0x40000c00
                  |L31.84|
                          DCD      0x40010400
                  |L31.88|
                          DCD      0x40014000
                  |L31.92|
                          DCD      0x40001800
                  |L31.96|
                          DCD      ||.conststring||

                          AREA ||i.TIM_GetCapture3||, CODE, READONLY, ALIGN=2

                  TIM_GetCapture3 PROC
;;;2050     */
;;;2051   uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;2052   {
000002  4604              MOV      r4,r0
;;;2053     /* Check the parameters */
;;;2054     assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
000004  480c              LDR      r0,|L32.56|
000006  4284              CMP      r4,r0
000008  d013              BEQ      |L32.50|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d010              BEQ      |L32.50|
000010  480a              LDR      r0,|L32.60|
000012  4284              CMP      r4,r0
000014  d00d              BEQ      |L32.50|
000016  480a              LDR      r0,|L32.64|
000018  4284              CMP      r4,r0
00001a  d00a              BEQ      |L32.50|
00001c  4809              LDR      r0,|L32.68|
00001e  4284              CMP      r4,r0
000020  d007              BEQ      |L32.50|
000022  4809              LDR      r0,|L32.72|
000024  4284              CMP      r4,r0
000026  d004              BEQ      |L32.50|
000028  f6400106          MOV      r1,#0x806
00002c  4807              LDR      r0,|L32.76|
00002e  f7fffffe          BL       assert_failed
                  |L32.50|
;;;2055   
;;;2056     /* Get the Capture 3 Register value */
;;;2057     return TIMx->CCR3;
000032  6be0              LDR      r0,[r4,#0x3c]
;;;2058   }
000034  bd10              POP      {r4,pc}
;;;2059   
                          ENDP

000036  0000              DCW      0x0000
                  |L32.56|
                          DCD      0x40010000
                  |L32.60|
                          DCD      0x40000400
                  |L32.64|
                          DCD      0x40000800
                  |L32.68|
                          DCD      0x40000c00
                  |L32.72|
                          DCD      0x40010400
                  |L32.76|
                          DCD      ||.conststring||

                          AREA ||i.TIM_GetCapture4||, CODE, READONLY, ALIGN=2

                  TIM_GetCapture4 PROC
;;;2064     */
;;;2065   uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;2066   {
000002  4604              MOV      r4,r0
;;;2067     /* Check the parameters */
;;;2068     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  480c              LDR      r0,|L33.56|
000006  4284              CMP      r4,r0
000008  d013              BEQ      |L33.50|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d010              BEQ      |L33.50|
000010  480a              LDR      r0,|L33.60|
000012  4284              CMP      r4,r0
000014  d00d              BEQ      |L33.50|
000016  480a              LDR      r0,|L33.64|
000018  4284              CMP      r4,r0
00001a  d00a              BEQ      |L33.50|
00001c  4809              LDR      r0,|L33.68|
00001e  4284              CMP      r4,r0
000020  d007              BEQ      |L33.50|
000022  4809              LDR      r0,|L33.72|
000024  4284              CMP      r4,r0
000026  d004              BEQ      |L33.50|
000028  f6400114          MOV      r1,#0x814
00002c  4807              LDR      r0,|L33.76|
00002e  f7fffffe          BL       assert_failed
                  |L33.50|
;;;2069   
;;;2070     /* Get the Capture 4 Register value */
;;;2071     return TIMx->CCR4;
000032  6c20              LDR      r0,[r4,#0x40]
;;;2072   }
000034  bd10              POP      {r4,pc}
;;;2073   
                          ENDP

000036  0000              DCW      0x0000
                  |L33.56|
                          DCD      0x40010000
                  |L33.60|
                          DCD      0x40000400
                  |L33.64|
                          DCD      0x40000800
                  |L33.68|
                          DCD      0x40000c00
                  |L33.72|
                          DCD      0x40010400
                  |L33.76|
                          DCD      ||.conststring||

                          AREA ||i.TIM_GetCounter||, CODE, READONLY, ALIGN=2

                  TIM_GetCounter PROC
;;;431      */
;;;432    uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;433    {
000002  4604              MOV      r4,r0
;;;434      /* Check the parameters */
;;;435      assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  4818              LDR      r0,|L34.104|
000006  4284              CMP      r4,r0
000008  d02b              BEQ      |L34.98|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d028              BEQ      |L34.98|
000010  4816              LDR      r0,|L34.108|
000012  4284              CMP      r4,r0
000014  d025              BEQ      |L34.98|
000016  4816              LDR      r0,|L34.112|
000018  4284              CMP      r4,r0
00001a  d022              BEQ      |L34.98|
00001c  4815              LDR      r0,|L34.116|
00001e  4284              CMP      r4,r0
000020  d01f              BEQ      |L34.98|
000022  4815              LDR      r0,|L34.120|
000024  4284              CMP      r4,r0
000026  d01c              BEQ      |L34.98|
000028  4814              LDR      r0,|L34.124|
00002a  4284              CMP      r4,r0
00002c  d019              BEQ      |L34.98|
00002e  4814              LDR      r0,|L34.128|
000030  4284              CMP      r4,r0
000032  d016              BEQ      |L34.98|
000034  4813              LDR      r0,|L34.132|
000036  4284              CMP      r4,r0
000038  d013              BEQ      |L34.98|
00003a  4813              LDR      r0,|L34.136|
00003c  4284              CMP      r4,r0
00003e  d010              BEQ      |L34.98|
000040  4812              LDR      r0,|L34.140|
000042  4284              CMP      r4,r0
000044  d00d              BEQ      |L34.98|
000046  4812              LDR      r0,|L34.144|
000048  4284              CMP      r4,r0
00004a  d00a              BEQ      |L34.98|
00004c  4811              LDR      r0,|L34.148|
00004e  4284              CMP      r4,r0
000050  d007              BEQ      |L34.98|
000052  4811              LDR      r0,|L34.152|
000054  4284              CMP      r4,r0
000056  d004              BEQ      |L34.98|
000058  f24011b3          MOV      r1,#0x1b3
00005c  480f              LDR      r0,|L34.156|
00005e  f7fffffe          BL       assert_failed
                  |L34.98|
;;;436    
;;;437      /* Get the Counter Register value */
;;;438      return TIMx->CNT;
000062  6a60              LDR      r0,[r4,#0x24]
;;;439    }
000064  bd10              POP      {r4,pc}
;;;440    
                          ENDP

000066  0000              DCW      0x0000
                  |L34.104|
                          DCD      0x40010000
                  |L34.108|
                          DCD      0x40000400
                  |L34.112|
                          DCD      0x40000800
                  |L34.116|
                          DCD      0x40000c00
                  |L34.120|
                          DCD      0x40001000
                  |L34.124|
                          DCD      0x40001400
                  |L34.128|
                          DCD      0x40010400
                  |L34.132|
                          DCD      0x40014000
                  |L34.136|
                          DCD      0x40014400
                  |L34.140|
                          DCD      0x40014800
                  |L34.144|
                          DCD      0x40001800
                  |L34.148|
                          DCD      0x40001c00
                  |L34.152|
                          DCD      0x40002000
                  |L34.156|
                          DCD      ||.conststring||

                          AREA ||i.TIM_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  TIM_GetFlagStatus PROC
;;;2432     */
;;;2433   FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;2434   { 
000002  4604              MOV      r4,r0
;;;2435     ITStatus bitstatus = RESET;  
;;;2436     /* Check the parameters */
;;;2437     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  482b              LDR      r0,|L35.180|
000006  2600              MOVS     r6,#0                 ;2435
000008  460d              MOV      r5,r1                 ;2434
00000a  4284              CMP      r4,r0
00000c  d02b              BEQ      |L35.102|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d028              BEQ      |L35.102|
000014  4828              LDR      r0,|L35.184|
000016  4284              CMP      r4,r0
000018  d025              BEQ      |L35.102|
00001a  4828              LDR      r0,|L35.188|
00001c  4284              CMP      r4,r0
00001e  d022              BEQ      |L35.102|
000020  4827              LDR      r0,|L35.192|
000022  4284              CMP      r4,r0
000024  d01f              BEQ      |L35.102|
000026  4827              LDR      r0,|L35.196|
000028  4284              CMP      r4,r0
00002a  d01c              BEQ      |L35.102|
00002c  4826              LDR      r0,|L35.200|
00002e  4284              CMP      r4,r0
000030  d019              BEQ      |L35.102|
000032  4826              LDR      r0,|L35.204|
000034  4284              CMP      r4,r0
000036  d016              BEQ      |L35.102|
000038  4825              LDR      r0,|L35.208|
00003a  4284              CMP      r4,r0
00003c  d013              BEQ      |L35.102|
00003e  4825              LDR      r0,|L35.212|
000040  4284              CMP      r4,r0
000042  d010              BEQ      |L35.102|
000044  4824              LDR      r0,|L35.216|
000046  4284              CMP      r4,r0
000048  d00d              BEQ      |L35.102|
00004a  4824              LDR      r0,|L35.220|
00004c  4284              CMP      r4,r0
00004e  d00a              BEQ      |L35.102|
000050  4823              LDR      r0,|L35.224|
000052  4284              CMP      r4,r0
000054  d007              BEQ      |L35.102|
000056  4823              LDR      r0,|L35.228|
000058  4284              CMP      r4,r0
00005a  d004              BEQ      |L35.102|
00005c  f6401185          MOV      r1,#0x985
000060  4821              LDR      r0,|L35.232|
000062  f7fffffe          BL       assert_failed
                  |L35.102|
;;;2438     assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
000066  2d01              CMP      r5,#1
000068  d01e              BEQ      |L35.168|
00006a  2d02              CMP      r5,#2
00006c  d01c              BEQ      |L35.168|
00006e  2d04              CMP      r5,#4
000070  d01a              BEQ      |L35.168|
000072  2d08              CMP      r5,#8
000074  d018              BEQ      |L35.168|
000076  2d10              CMP      r5,#0x10
000078  d016              BEQ      |L35.168|
00007a  2d20              CMP      r5,#0x20
00007c  d014              BEQ      |L35.168|
00007e  2d40              CMP      r5,#0x40
000080  d012              BEQ      |L35.168|
000082  2d80              CMP      r5,#0x80
000084  d010              BEQ      |L35.168|
000086  f5b57f00          CMP      r5,#0x200
00008a  d00d              BEQ      |L35.168|
00008c  f5b56f80          CMP      r5,#0x400
000090  d00a              BEQ      |L35.168|
000092  f5b56f00          CMP      r5,#0x800
000096  d007              BEQ      |L35.168|
000098  f5b55f80          CMP      r5,#0x1000
00009c  d004              BEQ      |L35.168|
00009e  f6401186          MOV      r1,#0x986
0000a2  4811              LDR      r0,|L35.232|
0000a4  f7fffffe          BL       assert_failed
                  |L35.168|
;;;2439   
;;;2440     
;;;2441     if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
0000a8  8a20              LDRH     r0,[r4,#0x10]
0000aa  4228              TST      r0,r5
0000ac  d000              BEQ      |L35.176|
;;;2442     {
;;;2443       bitstatus = SET;
0000ae  2601              MOVS     r6,#1
                  |L35.176|
;;;2444     }
;;;2445     else
;;;2446     {
;;;2447       bitstatus = RESET;
;;;2448     }
;;;2449     return bitstatus;
0000b0  4630              MOV      r0,r6
;;;2450   }
0000b2  bd70              POP      {r4-r6,pc}
;;;2451   
                          ENDP

                  |L35.180|
                          DCD      0x40010000
                  |L35.184|
                          DCD      0x40000400
                  |L35.188|
                          DCD      0x40000800
                  |L35.192|
                          DCD      0x40000c00
                  |L35.196|
                          DCD      0x40001000
                  |L35.200|
                          DCD      0x40001400
                  |L35.204|
                          DCD      0x40010400
                  |L35.208|
                          DCD      0x40014000
                  |L35.212|
                          DCD      0x40014400
                  |L35.216|
                          DCD      0x40014800
                  |L35.220|
                          DCD      0x40001800
                  |L35.224|
                          DCD      0x40001c00
                  |L35.228|
                          DCD      0x40002000
                  |L35.232|
                          DCD      ||.conststring||

                          AREA ||i.TIM_GetITStatus||, CODE, READONLY, ALIGN=2

                  TIM_GetITStatus PROC
;;;2502     */
;;;2503   ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;2504   {
000002  4604              MOV      r4,r0
;;;2505     ITStatus bitstatus = RESET;  
;;;2506     uint16_t itstatus = 0x0, itenable = 0x0;
;;;2507     /* Check the parameters */
;;;2508     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  4827              LDR      r0,|L36.164|
000006  2600              MOVS     r6,#0                 ;2505
000008  460d              MOV      r5,r1                 ;2504
00000a  4284              CMP      r4,r0
00000c  d02b              BEQ      |L36.102|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d028              BEQ      |L36.102|
000014  4824              LDR      r0,|L36.168|
000016  4284              CMP      r4,r0
000018  d025              BEQ      |L36.102|
00001a  4824              LDR      r0,|L36.172|
00001c  4284              CMP      r4,r0
00001e  d022              BEQ      |L36.102|
000020  4823              LDR      r0,|L36.176|
000022  4284              CMP      r4,r0
000024  d01f              BEQ      |L36.102|
000026  4823              LDR      r0,|L36.180|
000028  4284              CMP      r4,r0
00002a  d01c              BEQ      |L36.102|
00002c  4822              LDR      r0,|L36.184|
00002e  4284              CMP      r4,r0
000030  d019              BEQ      |L36.102|
000032  4822              LDR      r0,|L36.188|
000034  4284              CMP      r4,r0
000036  d016              BEQ      |L36.102|
000038  4821              LDR      r0,|L36.192|
00003a  4284              CMP      r4,r0
00003c  d013              BEQ      |L36.102|
00003e  4821              LDR      r0,|L36.196|
000040  4284              CMP      r4,r0
000042  d010              BEQ      |L36.102|
000044  4820              LDR      r0,|L36.200|
000046  4284              CMP      r4,r0
000048  d00d              BEQ      |L36.102|
00004a  4820              LDR      r0,|L36.204|
00004c  4284              CMP      r4,r0
00004e  d00a              BEQ      |L36.102|
000050  481f              LDR      r0,|L36.208|
000052  4284              CMP      r4,r0
000054  d007              BEQ      |L36.102|
000056  481f              LDR      r0,|L36.212|
000058  4284              CMP      r4,r0
00005a  d004              BEQ      |L36.102|
00005c  f64011cc          MOV      r1,#0x9cc
000060  481d              LDR      r0,|L36.216|
000062  f7fffffe          BL       assert_failed
                  |L36.102|
;;;2509     assert_param(IS_TIM_GET_IT(TIM_IT));
000066  2d01              CMP      r5,#1
000068  d012              BEQ      |L36.144|
00006a  2d02              CMP      r5,#2
00006c  d010              BEQ      |L36.144|
00006e  2d04              CMP      r5,#4
000070  d00e              BEQ      |L36.144|
000072  2d08              CMP      r5,#8
000074  d00c              BEQ      |L36.144|
000076  2d10              CMP      r5,#0x10
000078  d00a              BEQ      |L36.144|
00007a  2d20              CMP      r5,#0x20
00007c  d008              BEQ      |L36.144|
00007e  2d40              CMP      r5,#0x40
000080  d006              BEQ      |L36.144|
000082  2d80              CMP      r5,#0x80
000084  d004              BEQ      |L36.144|
000086  f64011cd          MOV      r1,#0x9cd
00008a  4813              LDR      r0,|L36.216|
00008c  f7fffffe          BL       assert_failed
                  |L36.144|
;;;2510      
;;;2511     itstatus = TIMx->SR & TIM_IT;
000090  8a21              LDRH     r1,[r4,#0x10]
;;;2512     
;;;2513     itenable = TIMx->DIER & TIM_IT;
000092  89a0              LDRH     r0,[r4,#0xc]
000094  4229              TST      r1,r5                 ;2511
000096  ea000005          AND      r0,r0,r5
;;;2514     if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
00009a  d001              BEQ      |L36.160|
00009c  b100              CBZ      r0,|L36.160|
;;;2515     {
;;;2516       bitstatus = SET;
00009e  2601              MOVS     r6,#1
                  |L36.160|
;;;2517     }
;;;2518     else
;;;2519     {
;;;2520       bitstatus = RESET;
;;;2521     }
;;;2522     return bitstatus;
0000a0  4630              MOV      r0,r6
;;;2523   }
0000a2  bd70              POP      {r4-r6,pc}
;;;2524   
                          ENDP

                  |L36.164|
                          DCD      0x40010000
                  |L36.168|
                          DCD      0x40000400
                  |L36.172|
                          DCD      0x40000800
                  |L36.176|
                          DCD      0x40000c00
                  |L36.180|
                          DCD      0x40001000
                  |L36.184|
                          DCD      0x40001400
                  |L36.188|
                          DCD      0x40010400
                  |L36.192|
                          DCD      0x40014000
                  |L36.196|
                          DCD      0x40014400
                  |L36.200|
                          DCD      0x40014800
                  |L36.204|
                          DCD      0x40001800
                  |L36.208|
                          DCD      0x40001c00
                  |L36.212|
                          DCD      0x40002000
                  |L36.216|
                          DCD      ||.conststring||

                          AREA ||i.TIM_GetPrescaler||, CODE, READONLY, ALIGN=2

                  TIM_GetPrescaler PROC
;;;445      */
;;;446    uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;447    {
000002  4604              MOV      r4,r0
;;;448      /* Check the parameters */
;;;449      assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  4818              LDR      r0,|L37.104|
000006  4284              CMP      r4,r0
000008  d02b              BEQ      |L37.98|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d028              BEQ      |L37.98|
000010  4816              LDR      r0,|L37.108|
000012  4284              CMP      r4,r0
000014  d025              BEQ      |L37.98|
000016  4816              LDR      r0,|L37.112|
000018  4284              CMP      r4,r0
00001a  d022              BEQ      |L37.98|
00001c  4815              LDR      r0,|L37.116|
00001e  4284              CMP      r4,r0
000020  d01f              BEQ      |L37.98|
000022  4815              LDR      r0,|L37.120|
000024  4284              CMP      r4,r0
000026  d01c              BEQ      |L37.98|
000028  4814              LDR      r0,|L37.124|
00002a  4284              CMP      r4,r0
00002c  d019              BEQ      |L37.98|
00002e  4814              LDR      r0,|L37.128|
000030  4284              CMP      r4,r0
000032  d016              BEQ      |L37.98|
000034  4813              LDR      r0,|L37.132|
000036  4284              CMP      r4,r0
000038  d013              BEQ      |L37.98|
00003a  4813              LDR      r0,|L37.136|
00003c  4284              CMP      r4,r0
00003e  d010              BEQ      |L37.98|
000040  4812              LDR      r0,|L37.140|
000042  4284              CMP      r4,r0
000044  d00d              BEQ      |L37.98|
000046  4812              LDR      r0,|L37.144|
000048  4284              CMP      r4,r0
00004a  d00a              BEQ      |L37.98|
00004c  4811              LDR      r0,|L37.148|
00004e  4284              CMP      r4,r0
000050  d007              BEQ      |L37.98|
000052  4811              LDR      r0,|L37.152|
000054  4284              CMP      r4,r0
000056  d004              BEQ      |L37.98|
000058  f24011c1          MOV      r1,#0x1c1
00005c  480f              LDR      r0,|L37.156|
00005e  f7fffffe          BL       assert_failed
                  |L37.98|
;;;450    
;;;451      /* Get the Prescaler Register value */
;;;452      return TIMx->PSC;
000062  8d20              LDRH     r0,[r4,#0x28]
;;;453    }
000064  bd10              POP      {r4,pc}
;;;454    
                          ENDP

000066  0000              DCW      0x0000
                  |L37.104|
                          DCD      0x40010000
                  |L37.108|
                          DCD      0x40000400
                  |L37.112|
                          DCD      0x40000800
                  |L37.116|
                          DCD      0x40000c00
                  |L37.120|
                          DCD      0x40001000
                  |L37.124|
                          DCD      0x40001400
                  |L37.128|
                          DCD      0x40010400
                  |L37.132|
                          DCD      0x40014000
                  |L37.136|
                          DCD      0x40014400
                  |L37.140|
                          DCD      0x40014800
                  |L37.144|
                          DCD      0x40001800
                  |L37.148|
                          DCD      0x40001c00
                  |L37.152|
                          DCD      0x40002000
                  |L37.156|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ICInit||, CODE, READONLY, ALIGN=2

                  TIM_ICInit PROC
;;;1889     */
;;;1890   void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1891   {
;;;1892     /* Check the parameters */
;;;1893     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000004  4e79              LDR      r6,|L38.492|
000006  4f7a              LDR      r7,|L38.496|
000008  f8df81e8          LDR      r8,|L38.500|
00000c  f8df91e8          LDR      r9,|L38.504|
000010  f8dfa1e8          LDR      r10,|L38.508|
000014  460d              MOV      r5,r1                 ;1891
000016  4604              MOV      r4,r0                 ;1891
000018  f04f4b80          MOV      r11,#0x40000000
00001c  42b0              CMP      r0,r6
00001e  d020              BEQ      |L38.98|
000020  455c              CMP      r4,r11
000022  d01e              BEQ      |L38.98|
000024  42bc              CMP      r4,r7
000026  d01c              BEQ      |L38.98|
000028  4544              CMP      r4,r8
00002a  d01a              BEQ      |L38.98|
00002c  454c              CMP      r4,r9
00002e  d018              BEQ      |L38.98|
000030  4554              CMP      r4,r10
000032  d016              BEQ      |L38.98|
000034  4872              LDR      r0,|L38.512|
000036  4284              CMP      r4,r0
000038  d013              BEQ      |L38.98|
00003a  4872              LDR      r0,|L38.516|
00003c  4284              CMP      r4,r0
00003e  d010              BEQ      |L38.98|
000040  4871              LDR      r0,|L38.520|
000042  4284              CMP      r4,r0
000044  d00d              BEQ      |L38.98|
000046  4871              LDR      r0,|L38.524|
000048  4284              CMP      r4,r0
00004a  d00a              BEQ      |L38.98|
00004c  4870              LDR      r0,|L38.528|
00004e  4284              CMP      r4,r0
000050  d007              BEQ      |L38.98|
000052  4870              LDR      r0,|L38.532|
000054  4284              CMP      r4,r0
000056  d004              BEQ      |L38.98|
000058  f2407165          MOV      r1,#0x765
00005c  486e              LDR      r0,|L38.536|
00005e  f7fffffe          BL       assert_failed
                  |L38.98|
;;;1894     assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
000062  8868              LDRH     r0,[r5,#2]
000064  b140              CBZ      r0,|L38.120|
000066  2802              CMP      r0,#2
000068  d006              BEQ      |L38.120|
00006a  280a              CMP      r0,#0xa
00006c  d004              BEQ      |L38.120|
00006e  f2407166          MOV      r1,#0x766
000072  4869              LDR      r0,|L38.536|
000074  f7fffffe          BL       assert_failed
                  |L38.120|
;;;1895     assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
000078  88a8              LDRH     r0,[r5,#4]
00007a  2801              CMP      r0,#1
00007c  d008              BEQ      |L38.144|
00007e  2802              CMP      r0,#2
000080  d006              BEQ      |L38.144|
000082  2803              CMP      r0,#3
000084  d004              BEQ      |L38.144|
000086  f2407167          MOV      r1,#0x767
00008a  4863              LDR      r0,|L38.536|
00008c  f7fffffe          BL       assert_failed
                  |L38.144|
;;;1896     assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
000090  88e8              LDRH     r0,[r5,#6]
000092  b150              CBZ      r0,|L38.170|
000094  2804              CMP      r0,#4
000096  d008              BEQ      |L38.170|
000098  2808              CMP      r0,#8
00009a  d006              BEQ      |L38.170|
00009c  280c              CMP      r0,#0xc
00009e  d004              BEQ      |L38.170|
0000a0  f44f61ed          MOV      r1,#0x768
0000a4  485c              LDR      r0,|L38.536|
0000a6  f7fffffe          BL       assert_failed
                  |L38.170|
;;;1897     assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
0000aa  8928              LDRH     r0,[r5,#8]
0000ac  280f              CMP      r0,#0xf
0000ae  d904              BLS      |L38.186|
0000b0  f2407169          MOV      r1,#0x769
0000b4  4858              LDR      r0,|L38.536|
0000b6  f7fffffe          BL       assert_failed
                  |L38.186|
;;;1898     
;;;1899     if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
0000ba  8828              LDRH     r0,[r5,#0]
0000bc  b3b0              CBZ      r0,|L38.300|
;;;1900     {
;;;1901       /* TI1 Configuration */
;;;1902       TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
;;;1903                  TIM_ICInitStruct->TIM_ICSelection,
;;;1904                  TIM_ICInitStruct->TIM_ICFilter);
;;;1905       /* Set the Input Capture Prescaler value */
;;;1906       TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;1907     }
;;;1908     else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
0000be  2804              CMP      r0,#4
0000c0  d040              BEQ      |L38.324|
;;;1909     {
;;;1910       /* TI2 Configuration */
;;;1911       assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;1912       TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
;;;1913                  TIM_ICInitStruct->TIM_ICSelection,
;;;1914                  TIM_ICInitStruct->TIM_ICFilter);
;;;1915       /* Set the Input Capture Prescaler value */
;;;1916       TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;1917     }
;;;1918     else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
0000c2  2808              CMP      r0,#8
0000c4  d061              BEQ      |L38.394|
;;;1919     {
;;;1920       /* TI3 Configuration */
;;;1921       assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1922       TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
;;;1923                  TIM_ICInitStruct->TIM_ICSelection,
;;;1924                  TIM_ICInitStruct->TIM_ICFilter);
;;;1925       /* Set the Input Capture Prescaler value */
;;;1926       TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;1927     }
;;;1928     else
;;;1929     {
;;;1930       /* TI4 Configuration */
;;;1931       assert_param(IS_TIM_LIST3_PERIPH(TIMx));
0000c6  42b4              CMP      r4,r6
0000c8  d00e              BEQ      |L38.232|
0000ca  455c              CMP      r4,r11
0000cc  d00c              BEQ      |L38.232|
0000ce  42bc              CMP      r4,r7
0000d0  d00a              BEQ      |L38.232|
0000d2  4544              CMP      r4,r8
0000d4  d008              BEQ      |L38.232|
0000d6  454c              CMP      r4,r9
0000d8  d006              BEQ      |L38.232|
0000da  4554              CMP      r4,r10
0000dc  d004              BEQ      |L38.232|
0000de  f240718b          MOV      r1,#0x78b
0000e2  484d              LDR      r0,|L38.536|
0000e4  f7fffffe          BL       assert_failed
                  |L38.232|
;;;1932       TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
0000e8  78aa              LDRB     r2,[r5,#2]
0000ea  7929              LDRB     r1,[r5,#4]
0000ec  7a2e              LDRB     r6,[r5,#8]
0000ee  8c20              LDRH     r0,[r4,#0x20]
0000f0  f4205080          BIC      r0,r0,#0x1000
0000f4  8420              STRH     r0,[r4,#0x20]
0000f6  8ba7              LDRH     r7,[r4,#0x1c]
0000f8  8c23              LDRH     r3,[r4,#0x20]
0000fa  f64f70ff          MOV      r0,#0xffff
0000fe  ea002101          AND      r1,r0,r1,LSL #8
000102  ea003202          AND      r2,r0,r2,LSL #12
000106  f4274773          BIC      r7,r7,#0xf300
00010a  4339              ORRS     r1,r1,r7
00010c  ea003006          AND      r0,r0,r6,LSL #12
000110  4308              ORRS     r0,r0,r1
000112  f4234120          BIC      r1,r3,#0xa000
000116  4311              ORRS     r1,r1,r2
000118  f4415180          ORR      r1,r1,#0x1000
00011c  83a0              STRH     r0,[r4,#0x1c]
00011e  8421              STRH     r1,[r4,#0x20]
;;;1933                  TIM_ICInitStruct->TIM_ICSelection,
;;;1934                  TIM_ICInitStruct->TIM_ICFilter);
;;;1935       /* Set the Input Capture Prescaler value */
;;;1936       TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000120  88e9              LDRH     r1,[r5,#6]
000122  4620              MOV      r0,r4
000124  e8bd5ff0          POP      {r4-r12,lr}
000128  f7ffbffe          B.W      TIM_SetIC4Prescaler
                  |L38.300|
00012c  892b              LDRH     r3,[r5,#8]            ;1902
00012e  88aa              LDRH     r2,[r5,#4]            ;1902
000130  8869              LDRH     r1,[r5,#2]            ;1902
000132  4620              MOV      r0,r4                 ;1902
000134  f7fffffe          BL       TI1_Config
000138  88e9              LDRH     r1,[r5,#6]            ;1906
00013a  4620              MOV      r0,r4                 ;1906
00013c  e8bd5ff0          POP      {r4-r12,lr}           ;1906
000140  f7ffbffe          B.W      TIM_SetIC1Prescaler
                  |L38.324|
000144  42b4              CMP      r4,r6                 ;1911
000146  d014              BEQ      |L38.370|
000148  455c              CMP      r4,r11                ;1911
00014a  d012              BEQ      |L38.370|
00014c  42bc              CMP      r4,r7                 ;1911
00014e  d010              BEQ      |L38.370|
000150  4544              CMP      r4,r8                 ;1911
000152  d00e              BEQ      |L38.370|
000154  454c              CMP      r4,r9                 ;1911
000156  d00c              BEQ      |L38.370|
000158  4554              CMP      r4,r10                ;1911
00015a  d00a              BEQ      |L38.370|
00015c  4828              LDR      r0,|L38.512|
00015e  4284              CMP      r4,r0                 ;1911
000160  d007              BEQ      |L38.370|
000162  482a              LDR      r0,|L38.524|
000164  4284              CMP      r4,r0                 ;1911
000166  d004              BEQ      |L38.370|
000168  f2407177          MOV      r1,#0x777             ;1911
00016c  482a              LDR      r0,|L38.536|
00016e  f7fffffe          BL       assert_failed
                  |L38.370|
000172  892b              LDRH     r3,[r5,#8]            ;1912
000174  88aa              LDRH     r2,[r5,#4]            ;1912
000176  8869              LDRH     r1,[r5,#2]            ;1912
000178  4620              MOV      r0,r4                 ;1912
00017a  f7fffffe          BL       TI2_Config
00017e  88e9              LDRH     r1,[r5,#6]            ;1916
000180  4620              MOV      r0,r4                 ;1916
000182  e8bd5ff0          POP      {r4-r12,lr}           ;1916
000186  f7ffbffe          B.W      TIM_SetIC2Prescaler
                  |L38.394|
00018a  42b4              CMP      r4,r6                 ;1921
00018c  d00e              BEQ      |L38.428|
00018e  455c              CMP      r4,r11                ;1921
000190  d00c              BEQ      |L38.428|
000192  42bc              CMP      r4,r7                 ;1921
000194  d00a              BEQ      |L38.428|
000196  4544              CMP      r4,r8                 ;1921
000198  d008              BEQ      |L38.428|
00019a  454c              CMP      r4,r9                 ;1921
00019c  d006              BEQ      |L38.428|
00019e  4554              CMP      r4,r10                ;1921
0001a0  d004              BEQ      |L38.428|
0001a2  f2407181          MOV      r1,#0x781             ;1921
0001a6  481c              LDR      r0,|L38.536|
0001a8  f7fffffe          BL       assert_failed
                  |L38.428|
0001ac  78aa              LDRB     r2,[r5,#2]            ;1922
0001ae  88ab              LDRH     r3,[r5,#4]            ;1922
0001b0  8928              LDRH     r0,[r5,#8]            ;1922
0001b2  8c21              LDRH     r1,[r4,#0x20]         ;1922
0001b4  f4217180          BIC      r1,r1,#0x100          ;1922
0001b8  8421              STRH     r1,[r4,#0x20]         ;1922
0001ba  8ba6              LDRH     r6,[r4,#0x1c]         ;1922
0001bc  8c21              LDRH     r1,[r4,#0x20]         ;1922
0001be  f64f77ff          MOV      r7,#0xffff            ;1922
0001c2  ea071000          AND      r0,r7,r0,LSL #4       ;1922
0001c6  f02606f3          BIC      r6,r6,#0xf3           ;1922
0001ca  4318              ORRS     r0,r0,r3              ;1922
0001cc  4330              ORRS     r0,r0,r6              ;1922
0001ce  ea072202          AND      r2,r7,r2,LSL #8       ;1922
0001d2  f4216120          BIC      r1,r1,#0xa00          ;1922
0001d6  4311              ORRS     r1,r1,r2              ;1922
0001d8  f4417180          ORR      r1,r1,#0x100          ;1922
0001dc  83a0              STRH     r0,[r4,#0x1c]         ;1922
0001de  8421              STRH     r1,[r4,#0x20]         ;1922
0001e0  88e9              LDRH     r1,[r5,#6]            ;1926
0001e2  4620              MOV      r0,r4                 ;1926
0001e4  e8bd5ff0          POP      {r4-r12,lr}           ;1926
0001e8  f7ffbffe          B.W      TIM_SetIC3Prescaler
;;;1937     }
;;;1938   }
;;;1939   
                          ENDP

                  |L38.492|
                          DCD      0x40010000
                  |L38.496|
                          DCD      0x40000400
                  |L38.500|
                          DCD      0x40000800
                  |L38.504|
                          DCD      0x40000c00
                  |L38.508|
                          DCD      0x40010400
                  |L38.512|
                          DCD      0x40014000
                  |L38.516|
                          DCD      0x40014400
                  |L38.520|
                          DCD      0x40014800
                  |L38.524|
                          DCD      0x40001800
                  |L38.528|
                          DCD      0x40001c00
                  |L38.532|
                          DCD      0x40002000
                  |L38.536|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ICStructInit||, CODE, READONLY, ALIGN=1

                  TIM_ICStructInit PROC
;;;1945     */
;;;1946   void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  2100              MOVS     r1,#0
;;;1947   {
;;;1948     /* Set the default configuration */
;;;1949     TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
000002  8001              STRH     r1,[r0,#0]
;;;1950     TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
000004  8041              STRH     r1,[r0,#2]
;;;1951     TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
000006  2201              MOVS     r2,#1
000008  8082              STRH     r2,[r0,#4]
;;;1952     TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
00000a  80c1              STRH     r1,[r0,#6]
;;;1953     TIM_ICInitStruct->TIM_ICFilter = 0x00;
00000c  8101              STRH     r1,[r0,#8]
;;;1954   }
00000e  4770              BX       lr
;;;1955   
                          ENDP


                          AREA ||i.TIM_ITConfig||, CODE, READONLY, ALIGN=2

                  TIM_ITConfig PROC
;;;2361     */
;;;2362   void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;2363   {  
000002  4604              MOV      r4,r0
;;;2364     /* Check the parameters */
;;;2365     assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  4823              LDR      r0,|L40.148|
000006  4616              MOV      r6,r2                 ;2363
000008  460d              MOV      r5,r1                 ;2363
00000a  4284              CMP      r4,r0
00000c  d02b              BEQ      |L40.102|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d028              BEQ      |L40.102|
000014  4820              LDR      r0,|L40.152|
000016  4284              CMP      r4,r0
000018  d025              BEQ      |L40.102|
00001a  4820              LDR      r0,|L40.156|
00001c  4284              CMP      r4,r0
00001e  d022              BEQ      |L40.102|
000020  481f              LDR      r0,|L40.160|
000022  4284              CMP      r4,r0
000024  d01f              BEQ      |L40.102|
000026  481f              LDR      r0,|L40.164|
000028  4284              CMP      r4,r0
00002a  d01c              BEQ      |L40.102|
00002c  481e              LDR      r0,|L40.168|
00002e  4284              CMP      r4,r0
000030  d019              BEQ      |L40.102|
000032  481e              LDR      r0,|L40.172|
000034  4284              CMP      r4,r0
000036  d016              BEQ      |L40.102|
000038  481d              LDR      r0,|L40.176|
00003a  4284              CMP      r4,r0
00003c  d013              BEQ      |L40.102|
00003e  481d              LDR      r0,|L40.180|
000040  4284              CMP      r4,r0
000042  d010              BEQ      |L40.102|
000044  481c              LDR      r0,|L40.184|
000046  4284              CMP      r4,r0
000048  d00d              BEQ      |L40.102|
00004a  481c              LDR      r0,|L40.188|
00004c  4284              CMP      r4,r0
00004e  d00a              BEQ      |L40.102|
000050  481b              LDR      r0,|L40.192|
000052  4284              CMP      r4,r0
000054  d007              BEQ      |L40.102|
000056  481b              LDR      r0,|L40.196|
000058  4284              CMP      r4,r0
00005a  d004              BEQ      |L40.102|
00005c  f640113d          MOV      r1,#0x93d
000060  4819              LDR      r0,|L40.200|
000062  f7fffffe          BL       assert_failed
                  |L40.102|
;;;2366     assert_param(IS_TIM_IT(TIM_IT));
000066  0a28              LSRS     r0,r5,#8
000068  d100              BNE      |L40.108|
00006a  b925              CBNZ     r5,|L40.118|
                  |L40.108|
00006c  f640113e          MOV      r1,#0x93e
000070  4815              LDR      r0,|L40.200|
000072  f7fffffe          BL       assert_failed
                  |L40.118|
;;;2367     assert_param(IS_FUNCTIONAL_STATE(NewState));
000076  b14e              CBZ      r6,|L40.140|
000078  2e01              CMP      r6,#1
00007a  d004              BEQ      |L40.134|
00007c  f640113f          MOV      r1,#0x93f
000080  4811              LDR      r0,|L40.200|
000082  f7fffffe          BL       assert_failed
                  |L40.134|
;;;2368     
;;;2369     if (NewState != DISABLE)
;;;2370     {
;;;2371       /* Enable the Interrupt sources */
;;;2372       TIMx->DIER |= TIM_IT;
000086  89a0              LDRH     r0,[r4,#0xc]
000088  4328              ORRS     r0,r0,r5
00008a  e001              B        |L40.144|
                  |L40.140|
;;;2373     }
;;;2374     else
;;;2375     {
;;;2376       /* Disable the Interrupt sources */
;;;2377       TIMx->DIER &= (uint16_t)~TIM_IT;
00008c  89a0              LDRH     r0,[r4,#0xc]
00008e  43a8              BICS     r0,r0,r5
                  |L40.144|
000090  81a0              STRH     r0,[r4,#0xc]          ;2372
;;;2378     }
;;;2379   }
000092  bd70              POP      {r4-r6,pc}
;;;2380   
                          ENDP

                  |L40.148|
                          DCD      0x40010000
                  |L40.152|
                          DCD      0x40000400
                  |L40.156|
                          DCD      0x40000800
                  |L40.160|
                          DCD      0x40000c00
                  |L40.164|
                          DCD      0x40001000
                  |L40.168|
                          DCD      0x40001400
                  |L40.172|
                          DCD      0x40010400
                  |L40.176|
                          DCD      0x40014000
                  |L40.180|
                          DCD      0x40014400
                  |L40.184|
                          DCD      0x40014800
                  |L40.188|
                          DCD      0x40001800
                  |L40.192|
                          DCD      0x40001c00
                  |L40.196|
                          DCD      0x40002000
                  |L40.200|
                          DCD      ||.conststring||

                          AREA ||i.TIM_ITRxExternalClockConfig||, CODE, READONLY, ALIGN=2

                  TIM_ITRxExternalClockConfig PROC
;;;2693     */
;;;2694   void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
000000  b570              PUSH     {r4-r6,lr}
;;;2695   {
000002  4604              MOV      r4,r0
;;;2696     /* Check the parameters */
;;;2697     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  4819              LDR      r0,|L41.108|
000006  460d              MOV      r5,r1                 ;2695
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L41.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L41.64|
000012  4817              LDR      r0,|L41.112|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L41.64|
000018  4816              LDR      r0,|L41.116|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L41.64|
00001e  4816              LDR      r0,|L41.120|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L41.64|
000024  4815              LDR      r0,|L41.124|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L41.64|
00002a  4815              LDR      r0,|L41.128|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L41.64|
000030  4814              LDR      r0,|L41.132|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L41.64|
000036  f6402189          MOV      r1,#0xa89
00003a  4813              LDR      r0,|L41.136|
00003c  f7fffffe          BL       assert_failed
                  |L41.64|
;;;2698     assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
000040  b155              CBZ      r5,|L41.88|
000042  2d10              CMP      r5,#0x10
000044  d008              BEQ      |L41.88|
000046  2d20              CMP      r5,#0x20
000048  d006              BEQ      |L41.88|
00004a  2d30              CMP      r5,#0x30
00004c  d004              BEQ      |L41.88|
00004e  f640218a          MOV      r1,#0xa8a
000052  480d              LDR      r0,|L41.136|
000054  f7fffffe          BL       assert_failed
                  |L41.88|
;;;2699   
;;;2700     /* Select the Internal Trigger */
;;;2701     TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
000058  4629              MOV      r1,r5
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       TIM_SelectInputTrigger
;;;2702   
;;;2703     /* Select the External clock mode1 */
;;;2704     TIMx->SMCR |= TIM_SlaveMode_External1;
000060  8920              LDRH     r0,[r4,#8]
000062  f0400007          ORR      r0,r0,#7
000066  8120              STRH     r0,[r4,#8]
;;;2705   }
000068  bd70              POP      {r4-r6,pc}
;;;2706   
                          ENDP

00006a  0000              DCW      0x0000
                  |L41.108|
                          DCD      0x40010000
                  |L41.112|
                          DCD      0x40000400
                  |L41.116|
                          DCD      0x40000800
                  |L41.120|
                          DCD      0x40000c00
                  |L41.124|
                          DCD      0x40010400
                  |L41.128|
                          DCD      0x40014000
                  |L41.132|
                          DCD      0x40001800
                  |L41.136|
                          DCD      ||.conststring||

                          AREA ||i.TIM_InternalClockConfig||, CODE, READONLY, ALIGN=2

                  TIM_InternalClockConfig PROC
;;;2672     */
;;;2673   void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;2674   {
000002  4604              MOV      r4,r0
;;;2675     /* Check the parameters */
;;;2676     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  4810              LDR      r0,|L42.72|
000006  4284              CMP      r4,r0
000008  d019              BEQ      |L42.62|
00000a  f1b44f80          CMP      r4,#0x40000000
00000e  d016              BEQ      |L42.62|
000010  480e              LDR      r0,|L42.76|
000012  4284              CMP      r4,r0
000014  d013              BEQ      |L42.62|
000016  480e              LDR      r0,|L42.80|
000018  4284              CMP      r4,r0
00001a  d010              BEQ      |L42.62|
00001c  480d              LDR      r0,|L42.84|
00001e  4284              CMP      r4,r0
000020  d00d              BEQ      |L42.62|
000022  480d              LDR      r0,|L42.88|
000024  4284              CMP      r4,r0
000026  d00a              BEQ      |L42.62|
000028  480c              LDR      r0,|L42.92|
00002a  4284              CMP      r4,r0
00002c  d007              BEQ      |L42.62|
00002e  480c              LDR      r0,|L42.96|
000030  4284              CMP      r4,r0
000032  d004              BEQ      |L42.62|
000034  f6402174          MOV      r1,#0xa74
000038  480a              LDR      r0,|L42.100|
00003a  f7fffffe          BL       assert_failed
                  |L42.62|
;;;2677   
;;;2678     /* Disable slave mode to clock the prescaler directly with the internal clock */
;;;2679     TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
00003e  8920              LDRH     r0,[r4,#8]
000040  f0200007          BIC      r0,r0,#7
000044  8120              STRH     r0,[r4,#8]
;;;2680   }
000046  bd10              POP      {r4,pc}
;;;2681   
                          ENDP

                  |L42.72|
                          DCD      0x40010000
                  |L42.76|
                          DCD      0x40000400
                  |L42.80|
                          DCD      0x40000800
                  |L42.84|
                          DCD      0x40000c00
                  |L42.88|
                          DCD      0x40010400
                  |L42.92|
                          DCD      0x40014000
                  |L42.96|
                          DCD      0x40001800
                  |L42.100|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC1FastConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC1FastConfig PROC
;;;1346     */
;;;1347   void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  b570              PUSH     {r4-r6,lr}
;;;1348   {
000002  4604              MOV      r4,r0
;;;1349     uint16_t tmpccmr1 = 0;
;;;1350   
;;;1351     /* Check the parameters */
;;;1352     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000004  481b              LDR      r0,|L43.116|
000006  460d              MOV      r5,r1                 ;1348
000008  4284              CMP      r4,r0
00000a  d025              BEQ      |L43.88|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d022              BEQ      |L43.88|
000012  4819              LDR      r0,|L43.120|
000014  4284              CMP      r4,r0
000016  d01f              BEQ      |L43.88|
000018  4818              LDR      r0,|L43.124|
00001a  4284              CMP      r4,r0
00001c  d01c              BEQ      |L43.88|
00001e  4818              LDR      r0,|L43.128|
000020  4284              CMP      r4,r0
000022  d019              BEQ      |L43.88|
000024  4817              LDR      r0,|L43.132|
000026  4284              CMP      r4,r0
000028  d016              BEQ      |L43.88|
00002a  4817              LDR      r0,|L43.136|
00002c  4284              CMP      r4,r0
00002e  d013              BEQ      |L43.88|
000030  4816              LDR      r0,|L43.140|
000032  4284              CMP      r4,r0
000034  d010              BEQ      |L43.88|
000036  4816              LDR      r0,|L43.144|
000038  4284              CMP      r4,r0
00003a  d00d              BEQ      |L43.88|
00003c  4815              LDR      r0,|L43.148|
00003e  4284              CMP      r4,r0
000040  d00a              BEQ      |L43.88|
000042  4815              LDR      r0,|L43.152|
000044  4284              CMP      r4,r0
000046  d007              BEQ      |L43.88|
000048  4814              LDR      r0,|L43.156|
00004a  4284              CMP      r4,r0
00004c  d004              BEQ      |L43.88|
00004e  f44f61a9          MOV      r1,#0x548
000052  4813              LDR      r0,|L43.160|
000054  f7fffffe          BL       assert_failed
                  |L43.88|
;;;1353     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
000058  2d04              CMP      r5,#4
00005a  d005              BEQ      |L43.104|
00005c  b125              CBZ      r5,|L43.104|
00005e  f2405149          MOV      r1,#0x549
000062  480f              LDR      r0,|L43.160|
000064  f7fffffe          BL       assert_failed
                  |L43.104|
;;;1354   
;;;1355     /* Get the TIMx CCMR1 register value */
;;;1356     tmpccmr1 = TIMx->CCMR1;
000068  8b20              LDRH     r0,[r4,#0x18]
;;;1357   
;;;1358     /* Reset the OC1FE Bit */
;;;1359     tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
00006a  f0200004          BIC      r0,r0,#4
;;;1360   
;;;1361     /* Enable or Disable the Output Compare Fast Bit */
;;;1362     tmpccmr1 |= TIM_OCFast;
00006e  4328              ORRS     r0,r0,r5
;;;1363   
;;;1364     /* Write to TIMx CCMR1 */
;;;1365     TIMx->CCMR1 = tmpccmr1;
000070  8320              STRH     r0,[r4,#0x18]
;;;1366   }
000072  bd70              POP      {r4-r6,pc}
;;;1367   
                          ENDP

                  |L43.116|
                          DCD      0x40010000
                  |L43.120|
                          DCD      0x40000400
                  |L43.124|
                          DCD      0x40000800
                  |L43.128|
                          DCD      0x40000c00
                  |L43.132|
                          DCD      0x40010400
                  |L43.136|
                          DCD      0x40014000
                  |L43.140|
                          DCD      0x40014400
                  |L43.144|
                          DCD      0x40014800
                  |L43.148|
                          DCD      0x40001800
                  |L43.152|
                          DCD      0x40001c00
                  |L43.156|
                          DCD      0x40002000
                  |L43.160|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC1Init||, CODE, READONLY, ALIGN=2

                  TIM_OC1Init PROC
;;;664      */
;;;665    void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;666    {
;;;667      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;668       
;;;669      /* Check the parameters */
;;;670      assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
000004  f8df9140          LDR      r9,|L44.328|
000008  f8dfa140          LDR      r10,|L44.332|
00000c  460d              MOV      r5,r1                 ;666
00000e  4604              MOV      r4,r0                 ;666
000010  4548              CMP      r0,r9
000012  d024              BEQ      |L44.94|
000014  f1b44f80          CMP      r4,#0x40000000
000018  d021              BEQ      |L44.94|
00001a  484d              LDR      r0,|L44.336|
00001c  4284              CMP      r4,r0
00001e  d01e              BEQ      |L44.94|
000020  484c              LDR      r0,|L44.340|
000022  4284              CMP      r4,r0
000024  d01b              BEQ      |L44.94|
000026  484c              LDR      r0,|L44.344|
000028  4284              CMP      r4,r0
00002a  d018              BEQ      |L44.94|
00002c  4554              CMP      r4,r10
00002e  d016              BEQ      |L44.94|
000030  484a              LDR      r0,|L44.348|
000032  4284              CMP      r4,r0
000034  d013              BEQ      |L44.94|
000036  484a              LDR      r0,|L44.352|
000038  4284              CMP      r4,r0
00003a  d010              BEQ      |L44.94|
00003c  4849              LDR      r0,|L44.356|
00003e  4284              CMP      r4,r0
000040  d00d              BEQ      |L44.94|
000042  4849              LDR      r0,|L44.360|
000044  4284              CMP      r4,r0
000046  d00a              BEQ      |L44.94|
000048  4848              LDR      r0,|L44.364|
00004a  4284              CMP      r4,r0
00004c  d007              BEQ      |L44.94|
00004e  4848              LDR      r0,|L44.368|
000050  4284              CMP      r4,r0
000052  d004              BEQ      |L44.94|
000054  f240219e          MOV      r1,#0x29e
000058  4846              LDR      r0,|L44.372|
00005a  f7fffffe          BL       assert_failed
                  |L44.94|
;;;671      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
00005e  8828              LDRH     r0,[r5,#0]
000060  b170              CBZ      r0,|L44.128|
000062  2810              CMP      r0,#0x10
000064  d00c              BEQ      |L44.128|
000066  2820              CMP      r0,#0x20
000068  d00a              BEQ      |L44.128|
00006a  2830              CMP      r0,#0x30
00006c  d008              BEQ      |L44.128|
00006e  2860              CMP      r0,#0x60
000070  d006              BEQ      |L44.128|
000072  2870              CMP      r0,#0x70
000074  d004              BEQ      |L44.128|
000076  f240219f          MOV      r1,#0x29f
00007a  483e              LDR      r0,|L44.372|
00007c  f7fffffe          BL       assert_failed
                  |L44.128|
;;;672      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
000080  8868              LDRH     r0,[r5,#2]
000082  b130              CBZ      r0,|L44.146|
000084  2801              CMP      r0,#1
000086  d004              BEQ      |L44.146|
000088  f44f7128          MOV      r1,#0x2a0
00008c  4839              LDR      r0,|L44.372|
00008e  f7fffffe          BL       assert_failed
                  |L44.146|
;;;673      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
000092  89a8              LDRH     r0,[r5,#0xc]
000094  b130              CBZ      r0,|L44.164|
000096  2802              CMP      r0,#2
000098  d004              BEQ      |L44.164|
00009a  f24021a1          MOV      r1,#0x2a1
00009e  4835              LDR      r0,|L44.372|
0000a0  f7fffffe          BL       assert_failed
                  |L44.164|
;;;674    
;;;675      /* Disable the Channel 1: Reset the CC1E Bit */
;;;676      TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
0000a4  8c20              LDRH     r0,[r4,#0x20]
0000a6  f0200001          BIC      r0,r0,#1
0000aa  8420              STRH     r0,[r4,#0x20]
;;;677      
;;;678      /* Get the TIMx CCER register value */
;;;679      tmpccer = TIMx->CCER;
0000ac  8c21              LDRH     r1,[r4,#0x20]
;;;680      /* Get the TIMx CR2 register value */
;;;681      tmpcr2 =  TIMx->CR2;
0000ae  88a7              LDRH     r7,[r4,#4]
;;;682      
;;;683      /* Get the TIMx CCMR1 register value */
;;;684      tmpccmrx = TIMx->CCMR1;
0000b0  8b20              LDRH     r0,[r4,#0x18]
;;;685        
;;;686      /* Reset the Output Compare Mode Bits */
;;;687      tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
;;;688      tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
;;;689      /* Select the Output Compare Mode */
;;;690      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
0000b2  882a              LDRH     r2,[r5,#0]
0000b4  f0200073          BIC      r0,r0,#0x73           ;688
0000b8  ea420800          ORR      r8,r2,r0
;;;691      
;;;692      /* Reset the Output Polarity level */
;;;693      tmpccer &= (uint16_t)~TIM_CCER_CC1P;
;;;694      /* Set the Output Compare Polarity */
;;;695      tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
0000bc  89a8              LDRH     r0,[r5,#0xc]
0000be  f0210102          BIC      r1,r1,#2              ;693
;;;696      
;;;697      /* Set the Output State */
;;;698      tmpccer |= TIM_OCInitStruct->TIM_OutputState;
0000c2  886e              LDRH     r6,[r5,#2]
0000c4  4308              ORRS     r0,r0,r1              ;695
0000c6  4306              ORRS     r6,r6,r0
;;;699        
;;;700      if((TIMx == TIM1) || (TIMx == TIM8))
0000c8  454c              CMP      r4,r9
0000ca  d001              BEQ      |L44.208|
0000cc  4554              CMP      r4,r10
0000ce  d133              BNE      |L44.312|
                  |L44.208|
;;;701      {
;;;702        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
0000d0  88a8              LDRH     r0,[r5,#4]
0000d2  b130              CBZ      r0,|L44.226|
0000d4  2804              CMP      r0,#4
0000d6  d004              BEQ      |L44.226|
0000d8  f24021be          MOV      r1,#0x2be
0000dc  4825              LDR      r0,|L44.372|
0000de  f7fffffe          BL       assert_failed
                  |L44.226|
;;;703        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
0000e2  89e8              LDRH     r0,[r5,#0xe]
0000e4  b130              CBZ      r0,|L44.244|
0000e6  2808              CMP      r0,#8
0000e8  d004              BEQ      |L44.244|
0000ea  f24021bf          MOV      r1,#0x2bf
0000ee  4821              LDR      r0,|L44.372|
0000f0  f7fffffe          BL       assert_failed
                  |L44.244|
;;;704        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
0000f4  8a68              LDRH     r0,[r5,#0x12]
0000f6  f5b07f00          CMP      r0,#0x200
0000fa  d005              BEQ      |L44.264|
0000fc  b120              CBZ      r0,|L44.264|
0000fe  f44f7130          MOV      r1,#0x2c0
000102  481c              LDR      r0,|L44.372|
000104  f7fffffe          BL       assert_failed
                  |L44.264|
;;;705        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
000108  8a28              LDRH     r0,[r5,#0x10]
00010a  f5b07f80          CMP      r0,#0x100
00010e  d005              BEQ      |L44.284|
000110  b120              CBZ      r0,|L44.284|
000112  f24021c1          MOV      r1,#0x2c1
000116  4817              LDR      r0,|L44.372|
000118  f7fffffe          BL       assert_failed
                  |L44.284|
;;;706        
;;;707        /* Reset the Output N Polarity level */
;;;708        tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
00011c  f0260108          BIC      r1,r6,#8
;;;709        /* Set the Output N Polarity */
;;;710        tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
000120  89e8              LDRH     r0,[r5,#0xe]
;;;711        /* Reset the Output N State */
;;;712        tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
;;;713        
;;;714        /* Set the Output N State */
;;;715        tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
000122  88ae              LDRH     r6,[r5,#4]
000124  4308              ORRS     r0,r0,r1              ;710
000126  f0200004          BIC      r0,r0,#4              ;712
00012a  4306              ORRS     r6,r6,r0
;;;716        /* Reset the Output Compare and Output Compare N IDLE State */
;;;717        tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
;;;718        tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
00012c  f4277140          BIC      r1,r7,#0x300
;;;719        /* Set the Output Idle state */
;;;720        tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
000130  8a28              LDRH     r0,[r5,#0x10]
;;;721        /* Set the Output N Idle state */
;;;722        tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
000132  8a6f              LDRH     r7,[r5,#0x12]
000134  4308              ORRS     r0,r0,r1              ;720
000136  4307              ORRS     r7,r7,r0
                  |L44.312|
;;;723      }
;;;724      /* Write to TIMx CR2 */
;;;725      TIMx->CR2 = tmpcr2;
000138  80a7              STRH     r7,[r4,#4]
;;;726      
;;;727      /* Write to TIMx CCMR1 */
;;;728      TIMx->CCMR1 = tmpccmrx;
00013a  f8a48018          STRH     r8,[r4,#0x18]
;;;729      
;;;730      /* Set the Capture Compare Register value */
;;;731      TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
00013e  68a8              LDR      r0,[r5,#8]
000140  6360              STR      r0,[r4,#0x34]
;;;732      
;;;733      /* Write to TIMx CCER */
;;;734      TIMx->CCER = tmpccer;
000142  8426              STRH     r6,[r4,#0x20]
;;;735    }
000144  e8bd87f0          POP      {r4-r10,pc}
;;;736    
                          ENDP

                  |L44.328|
                          DCD      0x40010000
                  |L44.332|
                          DCD      0x40010400
                  |L44.336|
                          DCD      0x40000400
                  |L44.340|
                          DCD      0x40000800
                  |L44.344|
                          DCD      0x40000c00
                  |L44.348|
                          DCD      0x40014000
                  |L44.352|
                          DCD      0x40014400
                  |L44.356|
                          DCD      0x40014800
                  |L44.360|
                          DCD      0x40001800
                  |L44.364|
                          DCD      0x40001c00
                  |L44.368|
                          DCD      0x40002000
                  |L44.372|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC1NPolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC1NPolarityConfig PROC
;;;1611     */
;;;1612   void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1613   {
000002  4604              MOV      r4,r0
;;;1614     uint16_t tmpccer = 0;
;;;1615     /* Check the parameters */
;;;1616     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
000004  480c              LDR      r0,|L45.56|
000006  460d              MOV      r5,r1                 ;1613
000008  4284              CMP      r4,r0
00000a  d007              BEQ      |L45.28|
00000c  480b              LDR      r0,|L45.60|
00000e  4284              CMP      r4,r0
000010  d004              BEQ      |L45.28|
000012  f44f61ca          MOV      r1,#0x650
000016  480a              LDR      r0,|L45.64|
000018  f7fffffe          BL       assert_failed
                  |L45.28|
;;;1617     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
00001c  b135              CBZ      r5,|L45.44|
00001e  2d08              CMP      r5,#8
000020  d004              BEQ      |L45.44|
000022  f2406151          MOV      r1,#0x651
000026  4806              LDR      r0,|L45.64|
000028  f7fffffe          BL       assert_failed
                  |L45.44|
;;;1618      
;;;1619     tmpccer = TIMx->CCER;
00002c  8c20              LDRH     r0,[r4,#0x20]
;;;1620   
;;;1621     /* Set or Reset the CC1NP Bit */
;;;1622     tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
00002e  f0200008          BIC      r0,r0,#8
;;;1623     tmpccer |= TIM_OCNPolarity;
000032  4328              ORRS     r0,r0,r5
;;;1624   
;;;1625     /* Write to TIMx CCER register */
;;;1626     TIMx->CCER = tmpccer;
000034  8420              STRH     r0,[r4,#0x20]
;;;1627   }
000036  bd70              POP      {r4-r6,pc}
;;;1628   
                          ENDP

                  |L45.56|
                          DCD      0x40010000
                  |L45.60|
                          DCD      0x40010400
                  |L45.64|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC1PolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC1PolarityConfig PROC
;;;1584     */
;;;1585   void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1586   {
000002  4604              MOV      r4,r0
;;;1587     uint16_t tmpccer = 0;
;;;1588   
;;;1589     /* Check the parameters */
;;;1590     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000004  481b              LDR      r0,|L46.116|
000006  460d              MOV      r5,r1                 ;1586
000008  4284              CMP      r4,r0
00000a  d025              BEQ      |L46.88|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d022              BEQ      |L46.88|
000012  4819              LDR      r0,|L46.120|
000014  4284              CMP      r4,r0
000016  d01f              BEQ      |L46.88|
000018  4818              LDR      r0,|L46.124|
00001a  4284              CMP      r4,r0
00001c  d01c              BEQ      |L46.88|
00001e  4818              LDR      r0,|L46.128|
000020  4284              CMP      r4,r0
000022  d019              BEQ      |L46.88|
000024  4817              LDR      r0,|L46.132|
000026  4284              CMP      r4,r0
000028  d016              BEQ      |L46.88|
00002a  4817              LDR      r0,|L46.136|
00002c  4284              CMP      r4,r0
00002e  d013              BEQ      |L46.88|
000030  4816              LDR      r0,|L46.140|
000032  4284              CMP      r4,r0
000034  d010              BEQ      |L46.88|
000036  4816              LDR      r0,|L46.144|
000038  4284              CMP      r4,r0
00003a  d00d              BEQ      |L46.88|
00003c  4815              LDR      r0,|L46.148|
00003e  4284              CMP      r4,r0
000040  d00a              BEQ      |L46.88|
000042  4815              LDR      r0,|L46.152|
000044  4284              CMP      r4,r0
000046  d007              BEQ      |L46.88|
000048  4814              LDR      r0,|L46.156|
00004a  4284              CMP      r4,r0
00004c  d004              BEQ      |L46.88|
00004e  f2406136          MOV      r1,#0x636
000052  4813              LDR      r0,|L46.160|
000054  f7fffffe          BL       assert_failed
                  |L46.88|
;;;1591     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
000058  b135              CBZ      r5,|L46.104|
00005a  2d02              CMP      r5,#2
00005c  d004              BEQ      |L46.104|
00005e  f2406137          MOV      r1,#0x637
000062  480f              LDR      r0,|L46.160|
000064  f7fffffe          BL       assert_failed
                  |L46.104|
;;;1592   
;;;1593     tmpccer = TIMx->CCER;
000068  8c20              LDRH     r0,[r4,#0x20]
;;;1594   
;;;1595     /* Set or Reset the CC1P Bit */
;;;1596     tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
00006a  f0200002          BIC      r0,r0,#2
;;;1597     tmpccer |= TIM_OCPolarity;
00006e  4328              ORRS     r0,r0,r5
;;;1598   
;;;1599     /* Write to TIMx CCER register */
;;;1600     TIMx->CCER = tmpccer;
000070  8420              STRH     r0,[r4,#0x20]
;;;1601   }
000072  bd70              POP      {r4-r6,pc}
;;;1602   
                          ENDP

                  |L46.116|
                          DCD      0x40010000
                  |L46.120|
                          DCD      0x40000400
                  |L46.124|
                          DCD      0x40000800
                  |L46.128|
                          DCD      0x40000c00
                  |L46.132|
                          DCD      0x40010400
                  |L46.136|
                          DCD      0x40014000
                  |L46.140|
                          DCD      0x40014400
                  |L46.144|
                          DCD      0x40014800
                  |L46.148|
                          DCD      0x40001800
                  |L46.152|
                          DCD      0x40001c00
                  |L46.156|
                          DCD      0x40002000
                  |L46.160|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC1PreloadConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC1PreloadConfig PROC
;;;1229     */
;;;1230   void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  b570              PUSH     {r4-r6,lr}
;;;1231   {
000002  4604              MOV      r4,r0
;;;1232     uint16_t tmpccmr1 = 0;
;;;1233   
;;;1234     /* Check the parameters */
;;;1235     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000004  481b              LDR      r0,|L47.116|
000006  460d              MOV      r5,r1                 ;1231
000008  4284              CMP      r4,r0
00000a  d025              BEQ      |L47.88|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d022              BEQ      |L47.88|
000012  4819              LDR      r0,|L47.120|
000014  4284              CMP      r4,r0
000016  d01f              BEQ      |L47.88|
000018  4818              LDR      r0,|L47.124|
00001a  4284              CMP      r4,r0
00001c  d01c              BEQ      |L47.88|
00001e  4818              LDR      r0,|L47.128|
000020  4284              CMP      r4,r0
000022  d019              BEQ      |L47.88|
000024  4817              LDR      r0,|L47.132|
000026  4284              CMP      r4,r0
000028  d016              BEQ      |L47.88|
00002a  4817              LDR      r0,|L47.136|
00002c  4284              CMP      r4,r0
00002e  d013              BEQ      |L47.88|
000030  4816              LDR      r0,|L47.140|
000032  4284              CMP      r4,r0
000034  d010              BEQ      |L47.88|
000036  4816              LDR      r0,|L47.144|
000038  4284              CMP      r4,r0
00003a  d00d              BEQ      |L47.88|
00003c  4815              LDR      r0,|L47.148|
00003e  4284              CMP      r4,r0
000040  d00a              BEQ      |L47.88|
000042  4815              LDR      r0,|L47.152|
000044  4284              CMP      r4,r0
000046  d007              BEQ      |L47.88|
000048  4814              LDR      r0,|L47.156|
00004a  4284              CMP      r4,r0
00004c  d004              BEQ      |L47.88|
00004e  f24041d3          MOV      r1,#0x4d3
000052  4813              LDR      r0,|L47.160|
000054  f7fffffe          BL       assert_failed
                  |L47.88|
;;;1236     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
000058  2d08              CMP      r5,#8
00005a  d005              BEQ      |L47.104|
00005c  b125              CBZ      r5,|L47.104|
00005e  f24041d4          MOV      r1,#0x4d4
000062  480f              LDR      r0,|L47.160|
000064  f7fffffe          BL       assert_failed
                  |L47.104|
;;;1237   
;;;1238     tmpccmr1 = TIMx->CCMR1;
000068  8b20              LDRH     r0,[r4,#0x18]
;;;1239   
;;;1240     /* Reset the OC1PE Bit */
;;;1241     tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
00006a  f0200008          BIC      r0,r0,#8
;;;1242   
;;;1243     /* Enable or Disable the Output Compare Preload feature */
;;;1244     tmpccmr1 |= TIM_OCPreload;
00006e  4328              ORRS     r0,r0,r5
;;;1245   
;;;1246     /* Write to TIMx CCMR1 register */
;;;1247     TIMx->CCMR1 = tmpccmr1;
000070  8320              STRH     r0,[r4,#0x18]
;;;1248   }
000072  bd70              POP      {r4-r6,pc}
;;;1249   
                          ENDP

                  |L47.116|
                          DCD      0x40010000
                  |L47.120|
                          DCD      0x40000400
                  |L47.124|
                          DCD      0x40000800
                  |L47.128|
                          DCD      0x40000c00
                  |L47.132|
                          DCD      0x40010400
                  |L47.136|
                          DCD      0x40014000
                  |L47.140|
                          DCD      0x40014400
                  |L47.144|
                          DCD      0x40014800
                  |L47.148|
                          DCD      0x40001800
                  |L47.152|
                          DCD      0x40001c00
                  |L47.156|
                          DCD      0x40002000
                  |L47.160|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC2FastConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC2FastConfig PROC
;;;1377     */
;;;1378   void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  b570              PUSH     {r4-r6,lr}
;;;1379   {
000002  4604              MOV      r4,r0
;;;1380     uint16_t tmpccmr1 = 0;
;;;1381   
;;;1382     /* Check the parameters */
;;;1383     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  4817              LDR      r0,|L48.100|
000006  460d              MOV      r5,r1                 ;1379
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L48.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L48.64|
000012  4815              LDR      r0,|L48.104|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L48.64|
000018  4814              LDR      r0,|L48.108|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L48.64|
00001e  4814              LDR      r0,|L48.112|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L48.64|
000024  4813              LDR      r0,|L48.116|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L48.64|
00002a  4813              LDR      r0,|L48.120|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L48.64|
000030  4812              LDR      r0,|L48.124|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L48.64|
000036  f2405167          MOV      r1,#0x567
00003a  4811              LDR      r0,|L48.128|
00003c  f7fffffe          BL       assert_failed
                  |L48.64|
;;;1384     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
000040  2d04              CMP      r5,#4
000042  d005              BEQ      |L48.80|
000044  b125              CBZ      r5,|L48.80|
000046  f44f61ad          MOV      r1,#0x568
00004a  480d              LDR      r0,|L48.128|
00004c  f7fffffe          BL       assert_failed
                  |L48.80|
;;;1385   
;;;1386     /* Get the TIMx CCMR1 register value */
;;;1387     tmpccmr1 = TIMx->CCMR1;
000050  8b20              LDRH     r0,[r4,#0x18]
;;;1388   
;;;1389     /* Reset the OC2FE Bit */
;;;1390     tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
;;;1391   
;;;1392     /* Enable or Disable the Output Compare Fast Bit */
;;;1393     tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
000052  f64f71ff          MOV      r1,#0xffff
000056  f4206080          BIC      r0,r0,#0x400          ;1390
00005a  ea012105          AND      r1,r1,r5,LSL #8
00005e  4301              ORRS     r1,r1,r0
;;;1394   
;;;1395     /* Write to TIMx CCMR1 */
;;;1396     TIMx->CCMR1 = tmpccmr1;
000060  8321              STRH     r1,[r4,#0x18]
;;;1397   }
000062  bd70              POP      {r4-r6,pc}
;;;1398   
                          ENDP

                  |L48.100|
                          DCD      0x40010000
                  |L48.104|
                          DCD      0x40000400
                  |L48.108|
                          DCD      0x40000800
                  |L48.112|
                          DCD      0x40000c00
                  |L48.116|
                          DCD      0x40010400
                  |L48.120|
                          DCD      0x40014000
                  |L48.124|
                          DCD      0x40001800
                  |L48.128|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC2Init||, CODE, READONLY, ALIGN=2

                  TIM_OC2Init PROC
;;;745      */
;;;746    void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;747    {
;;;748      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;749       
;;;750      /* Check the parameters */
;;;751      assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
000004  f8dfa148          LDR      r10,|L49.336|
000008  f8dfb148          LDR      r11,|L49.340|
00000c  460d              MOV      r5,r1                 ;747
00000e  4604              MOV      r4,r0                 ;747
000010  4550              CMP      r0,r10
000012  d018              BEQ      |L49.70|
000014  f1b44f80          CMP      r4,#0x40000000
000018  d015              BEQ      |L49.70|
00001a  484f              LDR      r0,|L49.344|
00001c  4284              CMP      r4,r0
00001e  d012              BEQ      |L49.70|
000020  484e              LDR      r0,|L49.348|
000022  4284              CMP      r4,r0
000024  d00f              BEQ      |L49.70|
000026  484e              LDR      r0,|L49.352|
000028  4284              CMP      r4,r0
00002a  d00c              BEQ      |L49.70|
00002c  455c              CMP      r4,r11
00002e  d00a              BEQ      |L49.70|
000030  484c              LDR      r0,|L49.356|
000032  4284              CMP      r4,r0
000034  d007              BEQ      |L49.70|
000036  484c              LDR      r0,|L49.360|
000038  4284              CMP      r4,r0
00003a  d004              BEQ      |L49.70|
00003c  f24021ef          MOV      r1,#0x2ef
000040  484a              LDR      r0,|L49.364|
000042  f7fffffe          BL       assert_failed
                  |L49.70|
;;;752      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
000046  8828              LDRH     r0,[r5,#0]
000048  b170              CBZ      r0,|L49.104|
00004a  2810              CMP      r0,#0x10
00004c  d00c              BEQ      |L49.104|
00004e  2820              CMP      r0,#0x20
000050  d00a              BEQ      |L49.104|
000052  2830              CMP      r0,#0x30
000054  d008              BEQ      |L49.104|
000056  2860              CMP      r0,#0x60
000058  d006              BEQ      |L49.104|
00005a  2870              CMP      r0,#0x70
00005c  d004              BEQ      |L49.104|
00005e  f44f713c          MOV      r1,#0x2f0
000062  4842              LDR      r0,|L49.364|
000064  f7fffffe          BL       assert_failed
                  |L49.104|
;;;753      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
000068  8868              LDRH     r0,[r5,#2]
00006a  b130              CBZ      r0,|L49.122|
00006c  2801              CMP      r0,#1
00006e  d004              BEQ      |L49.122|
000070  f24021f1          MOV      r1,#0x2f1
000074  483d              LDR      r0,|L49.364|
000076  f7fffffe          BL       assert_failed
                  |L49.122|
;;;754      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
00007a  89a8              LDRH     r0,[r5,#0xc]
00007c  b130              CBZ      r0,|L49.140|
00007e  2802              CMP      r0,#2
000080  d004              BEQ      |L49.140|
000082  f24021f2          MOV      r1,#0x2f2
000086  4839              LDR      r0,|L49.364|
000088  f7fffffe          BL       assert_failed
                  |L49.140|
;;;755    
;;;756      /* Disable the Channel 2: Reset the CC2E Bit */
;;;757      TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
00008c  8c20              LDRH     r0,[r4,#0x20]
00008e  f0200010          BIC      r0,r0,#0x10
000092  8420              STRH     r0,[r4,#0x20]
;;;758      
;;;759      /* Get the TIMx CCER register value */  
;;;760      tmpccer = TIMx->CCER;
000094  8c22              LDRH     r2,[r4,#0x20]
;;;761      /* Get the TIMx CR2 register value */
;;;762      tmpcr2 =  TIMx->CR2;
000096  88a7              LDRH     r7,[r4,#4]
;;;763      
;;;764      /* Get the TIMx CCMR1 register value */
;;;765      tmpccmrx = TIMx->CCMR1;
000098  8b20              LDRH     r0,[r4,#0x18]
;;;766        
;;;767      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;768      tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
;;;769      tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
;;;770      
;;;771      /* Select the Output Compare Mode */
;;;772      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
00009a  882b              LDRH     r3,[r5,#0]
00009c  f64f79ff          MOV      r9,#0xffff
0000a0  f42041e6          BIC      r1,r0,#0x7300         ;769
0000a4  ea092303          AND      r3,r9,r3,LSL #8
0000a8  ea430801          ORR      r8,r3,r1
;;;773      
;;;774      /* Reset the Output Polarity level */
;;;775      tmpccer &= (uint16_t)~TIM_CCER_CC2P;
;;;776      /* Set the Output Compare Polarity */
;;;777      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
0000ac  89a9              LDRH     r1,[r5,#0xc]
0000ae  f0220220          BIC      r2,r2,#0x20           ;775
0000b2  ea091101          AND      r1,r9,r1,LSL #4
0000b6  4311              ORRS     r1,r1,r2
;;;778      
;;;779      /* Set the Output State */
;;;780      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
0000b8  886a              LDRH     r2,[r5,#2]
0000ba  ea091602          AND      r6,r9,r2,LSL #4
0000be  430e              ORRS     r6,r6,r1
;;;781        
;;;782      if((TIMx == TIM1) || (TIMx == TIM8))
0000c0  4554              CMP      r4,r10
0000c2  d001              BEQ      |L49.200|
0000c4  455c              CMP      r4,r11
0000c6  d13b              BNE      |L49.320|
                  |L49.200|
;;;783      {
;;;784        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
0000c8  88a8              LDRH     r0,[r5,#4]
0000ca  b130              CBZ      r0,|L49.218|
0000cc  2804              CMP      r0,#4
0000ce  d004              BEQ      |L49.218|
0000d0  f44f7144          MOV      r1,#0x310
0000d4  4825              LDR      r0,|L49.364|
0000d6  f7fffffe          BL       assert_failed
                  |L49.218|
;;;785        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
0000da  89e8              LDRH     r0,[r5,#0xe]
0000dc  b130              CBZ      r0,|L49.236|
0000de  2808              CMP      r0,#8
0000e0  d004              BEQ      |L49.236|
0000e2  f2403111          MOV      r1,#0x311
0000e6  4821              LDR      r0,|L49.364|
0000e8  f7fffffe          BL       assert_failed
                  |L49.236|
;;;786        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
0000ec  8a68              LDRH     r0,[r5,#0x12]
0000ee  f5b07f00          CMP      r0,#0x200
0000f2  d005              BEQ      |L49.256|
0000f4  b120              CBZ      r0,|L49.256|
0000f6  f2403112          MOV      r1,#0x312
0000fa  481c              LDR      r0,|L49.364|
0000fc  f7fffffe          BL       assert_failed
                  |L49.256|
;;;787        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
000100  8a28              LDRH     r0,[r5,#0x10]
000102  f5b07f80          CMP      r0,#0x100
000106  d005              BEQ      |L49.276|
000108  b120              CBZ      r0,|L49.276|
00010a  f2403113          MOV      r1,#0x313
00010e  4817              LDR      r0,|L49.364|
000110  f7fffffe          BL       assert_failed
                  |L49.276|
;;;788        
;;;789        /* Reset the Output N Polarity level */
;;;790        tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
;;;791        /* Set the Output N Polarity */
;;;792        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
000114  89e9              LDRH     r1,[r5,#0xe]
000116  f0260280          BIC      r2,r6,#0x80           ;790
00011a  ea091101          AND      r1,r9,r1,LSL #4
00011e  4311              ORRS     r1,r1,r2
;;;793        /* Reset the Output N State */
;;;794        tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
;;;795        
;;;796        /* Set the Output N State */
;;;797        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
000120  88aa              LDRH     r2,[r5,#4]
000122  f0210140          BIC      r1,r1,#0x40           ;794
000126  ea091602          AND      r6,r9,r2,LSL #4
00012a  430e              ORRS     r6,r6,r1
;;;798        /* Reset the Output Compare and Output Compare N IDLE State */
;;;799        tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
;;;800        tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
;;;801        /* Set the Output Idle state */
;;;802        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
00012c  8a29              LDRH     r1,[r5,#0x10]
00012e  f4276240          BIC      r2,r7,#0xc00          ;800
000132  ea090181          AND      r1,r9,r1,LSL #2
000136  4311              ORRS     r1,r1,r2
;;;803        /* Set the Output N Idle state */
;;;804        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
000138  8a6a              LDRH     r2,[r5,#0x12]
00013a  ea090782          AND      r7,r9,r2,LSL #2
00013e  430f              ORRS     r7,r7,r1
                  |L49.320|
;;;805      }
;;;806      /* Write to TIMx CR2 */
;;;807      TIMx->CR2 = tmpcr2;
000140  80a7              STRH     r7,[r4,#4]
;;;808      
;;;809      /* Write to TIMx CCMR1 */
;;;810      TIMx->CCMR1 = tmpccmrx;
000142  f8a48018          STRH     r8,[r4,#0x18]
;;;811      
;;;812      /* Set the Capture Compare Register value */
;;;813      TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
000146  68a8              LDR      r0,[r5,#8]
000148  63a0              STR      r0,[r4,#0x38]
;;;814      
;;;815      /* Write to TIMx CCER */
;;;816      TIMx->CCER = tmpccer;
00014a  8426              STRH     r6,[r4,#0x20]
;;;817    }
00014c  e8bd9ff0          POP      {r4-r12,pc}
;;;818    
                          ENDP

                  |L49.336|
                          DCD      0x40010000
                  |L49.340|
                          DCD      0x40010400
                  |L49.344|
                          DCD      0x40000400
                  |L49.348|
                          DCD      0x40000800
                  |L49.352|
                          DCD      0x40000c00
                  |L49.356|
                          DCD      0x40014000
                  |L49.360|
                          DCD      0x40001800
                  |L49.364|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC2NPolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC2NPolarityConfig PROC
;;;1665     */
;;;1666   void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1667   {
000002  4604              MOV      r4,r0
;;;1668     uint16_t tmpccer = 0;
;;;1669   
;;;1670     /* Check the parameters */
;;;1671     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
000004  480e              LDR      r0,|L50.64|
000006  460d              MOV      r5,r1                 ;1667
000008  4284              CMP      r4,r0
00000a  d007              BEQ      |L50.28|
00000c  480d              LDR      r0,|L50.68|
00000e  4284              CMP      r4,r0
000010  d004              BEQ      |L50.28|
000012  f2406187          MOV      r1,#0x687
000016  480c              LDR      r0,|L50.72|
000018  f7fffffe          BL       assert_failed
                  |L50.28|
;;;1672     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
00001c  b135              CBZ      r5,|L50.44|
00001e  2d08              CMP      r5,#8
000020  d004              BEQ      |L50.44|
000022  f44f61d1          MOV      r1,#0x688
000026  4808              LDR      r0,|L50.72|
000028  f7fffffe          BL       assert_failed
                  |L50.44|
;;;1673     
;;;1674     tmpccer = TIMx->CCER;
00002c  8c20              LDRH     r0,[r4,#0x20]
;;;1675   
;;;1676     /* Set or Reset the CC2NP Bit */
;;;1677     tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
;;;1678     tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
00002e  f64f71ff          MOV      r1,#0xffff
000032  f0200080          BIC      r0,r0,#0x80           ;1677
000036  ea011105          AND      r1,r1,r5,LSL #4
00003a  4301              ORRS     r1,r1,r0
;;;1679   
;;;1680     /* Write to TIMx CCER register */
;;;1681     TIMx->CCER = tmpccer;
00003c  8421              STRH     r1,[r4,#0x20]
;;;1682   }
00003e  bd70              POP      {r4-r6,pc}
;;;1683   
                          ENDP

                  |L50.64|
                          DCD      0x40010000
                  |L50.68|
                          DCD      0x40010400
                  |L50.72|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC2PolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC2PolarityConfig PROC
;;;1638     */
;;;1639   void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1640   {
000002  4604              MOV      r4,r0
;;;1641     uint16_t tmpccer = 0;
;;;1642   
;;;1643     /* Check the parameters */
;;;1644     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  4817              LDR      r0,|L51.100|
000006  460d              MOV      r5,r1                 ;1640
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L51.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L51.64|
000012  4815              LDR      r0,|L51.104|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L51.64|
000018  4814              LDR      r0,|L51.108|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L51.64|
00001e  4814              LDR      r0,|L51.112|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L51.64|
000024  4813              LDR      r0,|L51.116|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L51.64|
00002a  4813              LDR      r0,|L51.120|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L51.64|
000030  4812              LDR      r0,|L51.124|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L51.64|
000036  f240616c          MOV      r1,#0x66c
00003a  4811              LDR      r0,|L51.128|
00003c  f7fffffe          BL       assert_failed
                  |L51.64|
;;;1645     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
000040  b135              CBZ      r5,|L51.80|
000042  2d02              CMP      r5,#2
000044  d004              BEQ      |L51.80|
000046  f240616d          MOV      r1,#0x66d
00004a  480d              LDR      r0,|L51.128|
00004c  f7fffffe          BL       assert_failed
                  |L51.80|
;;;1646   
;;;1647     tmpccer = TIMx->CCER;
000050  8c20              LDRH     r0,[r4,#0x20]
;;;1648   
;;;1649     /* Set or Reset the CC2P Bit */
;;;1650     tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
;;;1651     tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
000052  f64f71ff          MOV      r1,#0xffff
000056  f0200020          BIC      r0,r0,#0x20           ;1650
00005a  ea011105          AND      r1,r1,r5,LSL #4
00005e  4301              ORRS     r1,r1,r0
;;;1652   
;;;1653     /* Write to TIMx CCER register */
;;;1654     TIMx->CCER = tmpccer;
000060  8421              STRH     r1,[r4,#0x20]
;;;1655   }
000062  bd70              POP      {r4-r6,pc}
;;;1656   
                          ENDP

                  |L51.100|
                          DCD      0x40010000
                  |L51.104|
                          DCD      0x40000400
                  |L51.108|
                          DCD      0x40000800
                  |L51.112|
                          DCD      0x40000c00
                  |L51.116|
                          DCD      0x40010400
                  |L51.120|
                          DCD      0x40014000
                  |L51.124|
                          DCD      0x40001800
                  |L51.128|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC2PreloadConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC2PreloadConfig PROC
;;;1259     */
;;;1260   void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  b570              PUSH     {r4-r6,lr}
;;;1261   {
000002  4604              MOV      r4,r0
;;;1262     uint16_t tmpccmr1 = 0;
;;;1263   
;;;1264     /* Check the parameters */
;;;1265     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  4817              LDR      r0,|L52.100|
000006  460d              MOV      r5,r1                 ;1261
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L52.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L52.64|
000012  4815              LDR      r0,|L52.104|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L52.64|
000018  4814              LDR      r0,|L52.108|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L52.64|
00001e  4814              LDR      r0,|L52.112|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L52.64|
000024  4813              LDR      r0,|L52.116|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L52.64|
00002a  4813              LDR      r0,|L52.120|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L52.64|
000030  4812              LDR      r0,|L52.124|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L52.64|
000036  f24041f1          MOV      r1,#0x4f1
00003a  4811              LDR      r0,|L52.128|
00003c  f7fffffe          BL       assert_failed
                  |L52.64|
;;;1266     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
000040  2d08              CMP      r5,#8
000042  d005              BEQ      |L52.80|
000044  b125              CBZ      r5,|L52.80|
000046  f24041f2          MOV      r1,#0x4f2
00004a  480d              LDR      r0,|L52.128|
00004c  f7fffffe          BL       assert_failed
                  |L52.80|
;;;1267   
;;;1268     tmpccmr1 = TIMx->CCMR1;
000050  8b20              LDRH     r0,[r4,#0x18]
;;;1269   
;;;1270     /* Reset the OC2PE Bit */
;;;1271     tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
;;;1272   
;;;1273     /* Enable or Disable the Output Compare Preload feature */
;;;1274     tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
000052  f64f71ff          MOV      r1,#0xffff
000056  f4206000          BIC      r0,r0,#0x800          ;1271
00005a  ea012105          AND      r1,r1,r5,LSL #8
00005e  4301              ORRS     r1,r1,r0
;;;1275   
;;;1276     /* Write to TIMx CCMR1 register */
;;;1277     TIMx->CCMR1 = tmpccmr1;
000060  8321              STRH     r1,[r4,#0x18]
;;;1278   }
000062  bd70              POP      {r4-r6,pc}
;;;1279   
                          ENDP

                  |L52.100|
                          DCD      0x40010000
                  |L52.104|
                          DCD      0x40000400
                  |L52.108|
                          DCD      0x40000800
                  |L52.112|
                          DCD      0x40000c00
                  |L52.116|
                          DCD      0x40010400
                  |L52.120|
                          DCD      0x40014000
                  |L52.124|
                          DCD      0x40001800
                  |L52.128|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC3FastConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC3FastConfig PROC
;;;1407     */
;;;1408   void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  b570              PUSH     {r4-r6,lr}
;;;1409   {
000002  4604              MOV      r4,r0
;;;1410     uint16_t tmpccmr2 = 0;
;;;1411     
;;;1412     /* Check the parameters */
;;;1413     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4812              LDR      r0,|L53.80|
000006  460d              MOV      r5,r1                 ;1409
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L53.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L53.52|
000012  4810              LDR      r0,|L53.84|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L53.52|
000018  480f              LDR      r0,|L53.88|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L53.52|
00001e  480f              LDR      r0,|L53.92|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L53.52|
000024  480e              LDR      r0,|L53.96|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L53.52|
00002a  f2405185          MOV      r1,#0x585
00002e  480d              LDR      r0,|L53.100|
000030  f7fffffe          BL       assert_failed
                  |L53.52|
;;;1414     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
000034  2d04              CMP      r5,#4
000036  d005              BEQ      |L53.68|
000038  b125              CBZ      r5,|L53.68|
00003a  f2405186          MOV      r1,#0x586
00003e  4809              LDR      r0,|L53.100|
000040  f7fffffe          BL       assert_failed
                  |L53.68|
;;;1415   
;;;1416     /* Get the TIMx CCMR2 register value */
;;;1417     tmpccmr2 = TIMx->CCMR2;
000044  8ba0              LDRH     r0,[r4,#0x1c]
;;;1418   
;;;1419     /* Reset the OC3FE Bit */
;;;1420     tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
000046  f0200004          BIC      r0,r0,#4
;;;1421   
;;;1422     /* Enable or Disable the Output Compare Fast Bit */
;;;1423     tmpccmr2 |= TIM_OCFast;
00004a  4328              ORRS     r0,r0,r5
;;;1424   
;;;1425     /* Write to TIMx CCMR2 */
;;;1426     TIMx->CCMR2 = tmpccmr2;
00004c  83a0              STRH     r0,[r4,#0x1c]
;;;1427   }
00004e  bd70              POP      {r4-r6,pc}
;;;1428   
                          ENDP

                  |L53.80|
                          DCD      0x40010000
                  |L53.84|
                          DCD      0x40000400
                  |L53.88|
                          DCD      0x40000800
                  |L53.92|
                          DCD      0x40000c00
                  |L53.96|
                          DCD      0x40010400
                  |L53.100|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC3Init||, CODE, READONLY, ALIGN=2

                  TIM_OC3Init PROC
;;;826      */
;;;827    void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;828    {
;;;829      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;830       
;;;831      /* Check the parameters */
;;;832      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
000004  f8dfa138          LDR      r10,|L54.320|
000008  f8dfb138          LDR      r11,|L54.324|
00000c  460d              MOV      r5,r1                 ;828
00000e  4604              MOV      r4,r0                 ;828
000010  4550              CMP      r0,r10
000012  d012              BEQ      |L54.58|
000014  f1b44f80          CMP      r4,#0x40000000
000018  d00f              BEQ      |L54.58|
00001a  484b              LDR      r0,|L54.328|
00001c  4284              CMP      r4,r0
00001e  d00c              BEQ      |L54.58|
000020  484a              LDR      r0,|L54.332|
000022  4284              CMP      r4,r0
000024  d009              BEQ      |L54.58|
000026  484a              LDR      r0,|L54.336|
000028  4284              CMP      r4,r0
00002a  d006              BEQ      |L54.58|
00002c  455c              CMP      r4,r11
00002e  d004              BEQ      |L54.58|
000030  f44f7150          MOV      r1,#0x340
000034  4847              LDR      r0,|L54.340|
000036  f7fffffe          BL       assert_failed
                  |L54.58|
;;;833      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
00003a  8828              LDRH     r0,[r5,#0]
00003c  b170              CBZ      r0,|L54.92|
00003e  2810              CMP      r0,#0x10
000040  d00c              BEQ      |L54.92|
000042  2820              CMP      r0,#0x20
000044  d00a              BEQ      |L54.92|
000046  2830              CMP      r0,#0x30
000048  d008              BEQ      |L54.92|
00004a  2860              CMP      r0,#0x60
00004c  d006              BEQ      |L54.92|
00004e  2870              CMP      r0,#0x70
000050  d004              BEQ      |L54.92|
000052  f2403141          MOV      r1,#0x341
000056  483f              LDR      r0,|L54.340|
000058  f7fffffe          BL       assert_failed
                  |L54.92|
;;;834      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
00005c  8868              LDRH     r0,[r5,#2]
00005e  b130              CBZ      r0,|L54.110|
000060  2801              CMP      r0,#1
000062  d004              BEQ      |L54.110|
000064  f2403142          MOV      r1,#0x342
000068  483a              LDR      r0,|L54.340|
00006a  f7fffffe          BL       assert_failed
                  |L54.110|
;;;835      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
00006e  89a8              LDRH     r0,[r5,#0xc]
000070  b130              CBZ      r0,|L54.128|
000072  2802              CMP      r0,#2
000074  d004              BEQ      |L54.128|
000076  f2403143          MOV      r1,#0x343
00007a  4836              LDR      r0,|L54.340|
00007c  f7fffffe          BL       assert_failed
                  |L54.128|
;;;836    
;;;837      /* Disable the Channel 3: Reset the CC2E Bit */
;;;838      TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
000080  8c20              LDRH     r0,[r4,#0x20]
000082  f4207080          BIC      r0,r0,#0x100
000086  8420              STRH     r0,[r4,#0x20]
;;;839      
;;;840      /* Get the TIMx CCER register value */
;;;841      tmpccer = TIMx->CCER;
000088  8c20              LDRH     r0,[r4,#0x20]
;;;842      /* Get the TIMx CR2 register value */
;;;843      tmpcr2 =  TIMx->CR2;
00008a  88a7              LDRH     r7,[r4,#4]
;;;844      
;;;845      /* Get the TIMx CCMR2 register value */
;;;846      tmpccmrx = TIMx->CCMR2;
00008c  8ba1              LDRH     r1,[r4,#0x1c]
;;;847        
;;;848      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;849      tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
;;;850      tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
;;;851      /* Select the Output Compare Mode */
;;;852      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
00008e  882a              LDRH     r2,[r5,#0]
000090  f0210173          BIC      r1,r1,#0x73           ;850
000094  ea420801          ORR      r8,r2,r1
;;;853      
;;;854      /* Reset the Output Polarity level */
;;;855      tmpccer &= (uint16_t)~TIM_CCER_CC3P;
000098  f4207100          BIC      r1,r0,#0x200
;;;856      /* Set the Output Compare Polarity */
;;;857      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
00009c  89a8              LDRH     r0,[r5,#0xc]
00009e  f64f79ff          MOV      r9,#0xffff
0000a2  ea092000          AND      r0,r9,r0,LSL #8
0000a6  4308              ORRS     r0,r0,r1
;;;858      
;;;859      /* Set the Output State */
;;;860      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
0000a8  8869              LDRH     r1,[r5,#2]
0000aa  ea092601          AND      r6,r9,r1,LSL #8
0000ae  4306              ORRS     r6,r6,r0
;;;861        
;;;862      if((TIMx == TIM1) || (TIMx == TIM8))
0000b0  4554              CMP      r4,r10
0000b2  d001              BEQ      |L54.184|
0000b4  455c              CMP      r4,r11
0000b6  d13b              BNE      |L54.304|
                  |L54.184|
;;;863      {
;;;864        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
0000b8  88a8              LDRH     r0,[r5,#4]
0000ba  b130              CBZ      r0,|L54.202|
0000bc  2804              CMP      r0,#4
0000be  d004              BEQ      |L54.202|
0000c0  f44f7158          MOV      r1,#0x360
0000c4  4823              LDR      r0,|L54.340|
0000c6  f7fffffe          BL       assert_failed
                  |L54.202|
;;;865        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
0000ca  89e8              LDRH     r0,[r5,#0xe]
0000cc  b130              CBZ      r0,|L54.220|
0000ce  2808              CMP      r0,#8
0000d0  d004              BEQ      |L54.220|
0000d2  f2403161          MOV      r1,#0x361
0000d6  481f              LDR      r0,|L54.340|
0000d8  f7fffffe          BL       assert_failed
                  |L54.220|
;;;866        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
0000dc  8a68              LDRH     r0,[r5,#0x12]
0000de  f5b07f00          CMP      r0,#0x200
0000e2  d005              BEQ      |L54.240|
0000e4  b120              CBZ      r0,|L54.240|
0000e6  f2403162          MOV      r1,#0x362
0000ea  481a              LDR      r0,|L54.340|
0000ec  f7fffffe          BL       assert_failed
                  |L54.240|
;;;867        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
0000f0  8a28              LDRH     r0,[r5,#0x10]
0000f2  f5b07f80          CMP      r0,#0x100
0000f6  d005              BEQ      |L54.260|
0000f8  b120              CBZ      r0,|L54.260|
0000fa  f2403163          MOV      r1,#0x363
0000fe  4815              LDR      r0,|L54.340|
000100  f7fffffe          BL       assert_failed
                  |L54.260|
;;;868        
;;;869        /* Reset the Output N Polarity level */
;;;870        tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
;;;871        /* Set the Output N Polarity */
;;;872        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
000104  89e9              LDRH     r1,[r5,#0xe]
000106  f4266200          BIC      r2,r6,#0x800          ;870
00010a  ea092101          AND      r1,r9,r1,LSL #8
00010e  4311              ORRS     r1,r1,r2
;;;873        /* Reset the Output N State */
;;;874        tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
;;;875        
;;;876        /* Set the Output N State */
;;;877        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
000110  88aa              LDRH     r2,[r5,#4]
000112  f4216180          BIC      r1,r1,#0x400          ;874
000116  ea092602          AND      r6,r9,r2,LSL #8
00011a  430e              ORRS     r6,r6,r1
;;;878        /* Reset the Output Compare and Output Compare N IDLE State */
;;;879        tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
;;;880        tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
;;;881        /* Set the Output Idle state */
;;;882        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
00011c  8a29              LDRH     r1,[r5,#0x10]
00011e  f4275240          BIC      r2,r7,#0x3000         ;880
000122  ea091101          AND      r1,r9,r1,LSL #4
000126  4311              ORRS     r1,r1,r2
;;;883        /* Set the Output N Idle state */
;;;884        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
000128  8a6a              LDRH     r2,[r5,#0x12]
00012a  ea091702          AND      r7,r9,r2,LSL #4
00012e  430f              ORRS     r7,r7,r1
                  |L54.304|
;;;885      }
;;;886      /* Write to TIMx CR2 */
;;;887      TIMx->CR2 = tmpcr2;
000130  80a7              STRH     r7,[r4,#4]
;;;888      
;;;889      /* Write to TIMx CCMR2 */
;;;890      TIMx->CCMR2 = tmpccmrx;
000132  f8a4801c          STRH     r8,[r4,#0x1c]
;;;891      
;;;892      /* Set the Capture Compare Register value */
;;;893      TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
000136  68a8              LDR      r0,[r5,#8]
000138  63e0              STR      r0,[r4,#0x3c]
;;;894      
;;;895      /* Write to TIMx CCER */
;;;896      TIMx->CCER = tmpccer;
00013a  8426              STRH     r6,[r4,#0x20]
;;;897    }
00013c  e8bd9ff0          POP      {r4-r12,pc}
;;;898    
                          ENDP

                  |L54.320|
                          DCD      0x40010000
                  |L54.324|
                          DCD      0x40010400
                  |L54.328|
                          DCD      0x40000400
                  |L54.332|
                          DCD      0x40000800
                  |L54.336|
                          DCD      0x40000c00
                  |L54.340|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC3NPolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC3NPolarityConfig PROC
;;;1719     */
;;;1720   void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1721   {
000002  4604              MOV      r4,r0
;;;1722     uint16_t tmpccer = 0;
;;;1723    
;;;1724     /* Check the parameters */
;;;1725     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
000004  480e              LDR      r0,|L55.64|
000006  460d              MOV      r5,r1                 ;1721
000008  4284              CMP      r4,r0
00000a  d007              BEQ      |L55.28|
00000c  480d              LDR      r0,|L55.68|
00000e  4284              CMP      r4,r0
000010  d004              BEQ      |L55.28|
000012  f24061bd          MOV      r1,#0x6bd
000016  480c              LDR      r0,|L55.72|
000018  f7fffffe          BL       assert_failed
                  |L55.28|
;;;1726     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
00001c  b135              CBZ      r5,|L55.44|
00001e  2d08              CMP      r5,#8
000020  d004              BEQ      |L55.44|
000022  f24061be          MOV      r1,#0x6be
000026  4808              LDR      r0,|L55.72|
000028  f7fffffe          BL       assert_failed
                  |L55.44|
;;;1727       
;;;1728     tmpccer = TIMx->CCER;
00002c  8c20              LDRH     r0,[r4,#0x20]
;;;1729   
;;;1730     /* Set or Reset the CC3NP Bit */
;;;1731     tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
;;;1732     tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
00002e  f64f71ff          MOV      r1,#0xffff
000032  f4206000          BIC      r0,r0,#0x800          ;1731
000036  ea012105          AND      r1,r1,r5,LSL #8
00003a  4301              ORRS     r1,r1,r0
;;;1733   
;;;1734     /* Write to TIMx CCER register */
;;;1735     TIMx->CCER = tmpccer;
00003c  8421              STRH     r1,[r4,#0x20]
;;;1736   }
00003e  bd70              POP      {r4-r6,pc}
;;;1737   
                          ENDP

                  |L55.64|
                          DCD      0x40010000
                  |L55.68|
                          DCD      0x40010400
                  |L55.72|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC3PolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC3PolarityConfig PROC
;;;1692     */
;;;1693   void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1694   {
000002  4604              MOV      r4,r0
;;;1695     uint16_t tmpccer = 0;
;;;1696   
;;;1697     /* Check the parameters */
;;;1698     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4814              LDR      r0,|L56.88|
000006  460d              MOV      r5,r1                 ;1694
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L56.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L56.52|
000012  4812              LDR      r0,|L56.92|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L56.52|
000018  4811              LDR      r0,|L56.96|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L56.52|
00001e  4811              LDR      r0,|L56.100|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L56.52|
000024  4810              LDR      r0,|L56.104|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L56.52|
00002a  f24061a2          MOV      r1,#0x6a2
00002e  480f              LDR      r0,|L56.108|
000030  f7fffffe          BL       assert_failed
                  |L56.52|
;;;1699     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
000034  b135              CBZ      r5,|L56.68|
000036  2d02              CMP      r5,#2
000038  d004              BEQ      |L56.68|
00003a  f24061a3          MOV      r1,#0x6a3
00003e  480b              LDR      r0,|L56.108|
000040  f7fffffe          BL       assert_failed
                  |L56.68|
;;;1700   
;;;1701     tmpccer = TIMx->CCER;
000044  8c20              LDRH     r0,[r4,#0x20]
;;;1702   
;;;1703     /* Set or Reset the CC3P Bit */
;;;1704     tmpccer &= (uint16_t)~TIM_CCER_CC3P;
;;;1705     tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
000046  f64f71ff          MOV      r1,#0xffff
00004a  f4207000          BIC      r0,r0,#0x200          ;1704
00004e  ea012105          AND      r1,r1,r5,LSL #8
000052  4301              ORRS     r1,r1,r0
;;;1706   
;;;1707     /* Write to TIMx CCER register */
;;;1708     TIMx->CCER = tmpccer;
000054  8421              STRH     r1,[r4,#0x20]
;;;1709   }
000056  bd70              POP      {r4-r6,pc}
;;;1710   
                          ENDP

                  |L56.88|
                          DCD      0x40010000
                  |L56.92|
                          DCD      0x40000400
                  |L56.96|
                          DCD      0x40000800
                  |L56.100|
                          DCD      0x40000c00
                  |L56.104|
                          DCD      0x40010400
                  |L56.108|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC3PreloadConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC3PreloadConfig PROC
;;;1288     */
;;;1289   void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  b570              PUSH     {r4-r6,lr}
;;;1290   {
000002  4604              MOV      r4,r0
;;;1291     uint16_t tmpccmr2 = 0;
;;;1292   
;;;1293     /* Check the parameters */
;;;1294     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4812              LDR      r0,|L57.80|
000006  460d              MOV      r5,r1                 ;1290
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L57.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L57.52|
000012  4810              LDR      r0,|L57.84|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L57.52|
000018  480f              LDR      r0,|L57.88|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L57.52|
00001e  480f              LDR      r0,|L57.92|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L57.52|
000024  480e              LDR      r0,|L57.96|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L57.52|
00002a  f240510e          MOV      r1,#0x50e
00002e  480d              LDR      r0,|L57.100|
000030  f7fffffe          BL       assert_failed
                  |L57.52|
;;;1295     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
000034  2d08              CMP      r5,#8
000036  d005              BEQ      |L57.68|
000038  b125              CBZ      r5,|L57.68|
00003a  f240510f          MOV      r1,#0x50f
00003e  4809              LDR      r0,|L57.100|
000040  f7fffffe          BL       assert_failed
                  |L57.68|
;;;1296   
;;;1297     tmpccmr2 = TIMx->CCMR2;
000044  8ba0              LDRH     r0,[r4,#0x1c]
;;;1298   
;;;1299     /* Reset the OC3PE Bit */
;;;1300     tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
000046  f0200008          BIC      r0,r0,#8
;;;1301   
;;;1302     /* Enable or Disable the Output Compare Preload feature */
;;;1303     tmpccmr2 |= TIM_OCPreload;
00004a  4328              ORRS     r0,r0,r5
;;;1304   
;;;1305     /* Write to TIMx CCMR2 register */
;;;1306     TIMx->CCMR2 = tmpccmr2;
00004c  83a0              STRH     r0,[r4,#0x1c]
;;;1307   }
00004e  bd70              POP      {r4-r6,pc}
;;;1308   
                          ENDP

                  |L57.80|
                          DCD      0x40010000
                  |L57.84|
                          DCD      0x40000400
                  |L57.88|
                          DCD      0x40000800
                  |L57.92|
                          DCD      0x40000c00
                  |L57.96|
                          DCD      0x40010400
                  |L57.100|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC4FastConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC4FastConfig PROC
;;;1437     */
;;;1438   void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  b570              PUSH     {r4-r6,lr}
;;;1439   {
000002  4604              MOV      r4,r0
;;;1440     uint16_t tmpccmr2 = 0;
;;;1441   
;;;1442     /* Check the parameters */
;;;1443     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4814              LDR      r0,|L58.88|
000006  460d              MOV      r5,r1                 ;1439
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L58.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L58.52|
000012  4812              LDR      r0,|L58.92|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L58.52|
000018  4811              LDR      r0,|L58.96|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L58.52|
00001e  4811              LDR      r0,|L58.100|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L58.52|
000024  4810              LDR      r0,|L58.104|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L58.52|
00002a  f24051a3          MOV      r1,#0x5a3
00002e  480f              LDR      r0,|L58.108|
000030  f7fffffe          BL       assert_failed
                  |L58.52|
;;;1444     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
000034  2d04              CMP      r5,#4
000036  d005              BEQ      |L58.68|
000038  b125              CBZ      r5,|L58.68|
00003a  f24051a4          MOV      r1,#0x5a4
00003e  480b              LDR      r0,|L58.108|
000040  f7fffffe          BL       assert_failed
                  |L58.68|
;;;1445   
;;;1446     /* Get the TIMx CCMR2 register value */
;;;1447     tmpccmr2 = TIMx->CCMR2;
000044  8ba0              LDRH     r0,[r4,#0x1c]
;;;1448   
;;;1449     /* Reset the OC4FE Bit */
;;;1450     tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
;;;1451   
;;;1452     /* Enable or Disable the Output Compare Fast Bit */
;;;1453     tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
000046  f64f71ff          MOV      r1,#0xffff
00004a  f4206080          BIC      r0,r0,#0x400          ;1450
00004e  ea012105          AND      r1,r1,r5,LSL #8
000052  4301              ORRS     r1,r1,r0
;;;1454   
;;;1455     /* Write to TIMx CCMR2 */
;;;1456     TIMx->CCMR2 = tmpccmr2;
000054  83a1              STRH     r1,[r4,#0x1c]
;;;1457   }
000056  bd70              POP      {r4-r6,pc}
;;;1458   
                          ENDP

                  |L58.88|
                          DCD      0x40010000
                  |L58.92|
                          DCD      0x40000400
                  |L58.96|
                          DCD      0x40000800
                  |L58.100|
                          DCD      0x40000c00
                  |L58.104|
                          DCD      0x40010400
                  |L58.108|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC4Init||, CODE, READONLY, ALIGN=2

                  TIM_OC4Init PROC
;;;906      */
;;;907    void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;908    {
;;;909      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;910       
;;;911      /* Check the parameters */
;;;912      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
000004  f8dfa0e4          LDR      r10,|L59.236|
000008  f8dfb0e4          LDR      r11,|L59.240|
00000c  460d              MOV      r5,r1                 ;908
00000e  4604              MOV      r4,r0                 ;908
000010  4550              CMP      r0,r10
000012  d012              BEQ      |L59.58|
000014  f1b44f80          CMP      r4,#0x40000000
000018  d00f              BEQ      |L59.58|
00001a  4836              LDR      r0,|L59.244|
00001c  4284              CMP      r4,r0
00001e  d00c              BEQ      |L59.58|
000020  4835              LDR      r0,|L59.248|
000022  4284              CMP      r4,r0
000024  d009              BEQ      |L59.58|
000026  4835              LDR      r0,|L59.252|
000028  4284              CMP      r4,r0
00002a  d006              BEQ      |L59.58|
00002c  455c              CMP      r4,r11
00002e  d004              BEQ      |L59.58|
000030  f44f7164          MOV      r1,#0x390
000034  4832              LDR      r0,|L59.256|
000036  f7fffffe          BL       assert_failed
                  |L59.58|
;;;913      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
00003a  8828              LDRH     r0,[r5,#0]
00003c  b170              CBZ      r0,|L59.92|
00003e  2810              CMP      r0,#0x10
000040  d00c              BEQ      |L59.92|
000042  2820              CMP      r0,#0x20
000044  d00a              BEQ      |L59.92|
000046  2830              CMP      r0,#0x30
000048  d008              BEQ      |L59.92|
00004a  2860              CMP      r0,#0x60
00004c  d006              BEQ      |L59.92|
00004e  2870              CMP      r0,#0x70
000050  d004              BEQ      |L59.92|
000052  f2403191          MOV      r1,#0x391
000056  482a              LDR      r0,|L59.256|
000058  f7fffffe          BL       assert_failed
                  |L59.92|
;;;914      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
00005c  8868              LDRH     r0,[r5,#2]
00005e  b130              CBZ      r0,|L59.110|
000060  2801              CMP      r0,#1
000062  d004              BEQ      |L59.110|
000064  f2403192          MOV      r1,#0x392
000068  4825              LDR      r0,|L59.256|
00006a  f7fffffe          BL       assert_failed
                  |L59.110|
;;;915      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
00006e  89a8              LDRH     r0,[r5,#0xc]
000070  b130              CBZ      r0,|L59.128|
000072  2802              CMP      r0,#2
000074  d004              BEQ      |L59.128|
000076  f2403193          MOV      r1,#0x393
00007a  4821              LDR      r0,|L59.256|
00007c  f7fffffe          BL       assert_failed
                  |L59.128|
;;;916    
;;;917      /* Disable the Channel 4: Reset the CC4E Bit */
;;;918      TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
000080  8c20              LDRH     r0,[r4,#0x20]
000082  f4205080          BIC      r0,r0,#0x1000
000086  8420              STRH     r0,[r4,#0x20]
;;;919      
;;;920      /* Get the TIMx CCER register value */
;;;921      tmpccer = TIMx->CCER;
000088  8c21              LDRH     r1,[r4,#0x20]
;;;922      /* Get the TIMx CR2 register value */
;;;923      tmpcr2 =  TIMx->CR2;
00008a  88a6              LDRH     r6,[r4,#4]
;;;924      
;;;925      /* Get the TIMx CCMR2 register value */
;;;926      tmpccmrx = TIMx->CCMR2;
00008c  8ba0              LDRH     r0,[r4,#0x1c]
;;;927        
;;;928      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;929      tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
;;;930      tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
;;;931      
;;;932      /* Select the Output Compare Mode */
;;;933      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
00008e  882b              LDRH     r3,[r5,#0]
000090  f64f79ff          MOV      r9,#0xffff
000094  f42042e6          BIC      r2,r0,#0x7300         ;930
000098  ea092703          AND      r7,r9,r3,LSL #8
00009c  4317              ORRS     r7,r7,r2
;;;934      
;;;935      /* Reset the Output Polarity level */
;;;936      tmpccer &= (uint16_t)~TIM_CCER_CC4P;
00009e  f4215200          BIC      r2,r1,#0x2000
;;;937      /* Set the Output Compare Polarity */
;;;938      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
0000a2  89a9              LDRH     r1,[r5,#0xc]
0000a4  ea093101          AND      r1,r9,r1,LSL #12
0000a8  4311              ORRS     r1,r1,r2
;;;939      
;;;940      /* Set the Output State */
;;;941      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
0000aa  886a              LDRH     r2,[r5,#2]
;;;942      
;;;943      if((TIMx == TIM1) || (TIMx == TIM8))
0000ac  4554              CMP      r4,r10
0000ae  ea093002          AND      r0,r9,r2,LSL #12      ;941
0000b2  ea400801          ORR      r8,r0,r1              ;941
0000b6  d001              BEQ      |L59.188|
0000b8  455c              CMP      r4,r11
0000ba  d10f              BNE      |L59.220|
                  |L59.188|
;;;944      {
;;;945        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
0000bc  8a28              LDRH     r0,[r5,#0x10]
0000be  f5b07f80          CMP      r0,#0x100
0000c2  d005              BEQ      |L59.208|
0000c4  b120              CBZ      r0,|L59.208|
0000c6  f24031b1          MOV      r1,#0x3b1
0000ca  480d              LDR      r0,|L59.256|
0000cc  f7fffffe          BL       assert_failed
                  |L59.208|
;;;946        /* Reset the Output Compare IDLE State */
;;;947        tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
;;;948        /* Set the Output Idle state */
;;;949        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
0000d0  8a2a              LDRH     r2,[r5,#0x10]
0000d2  f4264080          BIC      r0,r6,#0x4000         ;947
0000d6  ea091682          AND      r6,r9,r2,LSL #6
0000da  4306              ORRS     r6,r6,r0
                  |L59.220|
;;;950      }
;;;951      /* Write to TIMx CR2 */
;;;952      TIMx->CR2 = tmpcr2;
0000dc  80a6              STRH     r6,[r4,#4]
;;;953      
;;;954      /* Write to TIMx CCMR2 */  
;;;955      TIMx->CCMR2 = tmpccmrx;
0000de  83a7              STRH     r7,[r4,#0x1c]
;;;956        
;;;957      /* Set the Capture Compare Register value */
;;;958      TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
0000e0  68a8              LDR      r0,[r5,#8]
0000e2  6420              STR      r0,[r4,#0x40]
;;;959      
;;;960      /* Write to TIMx CCER */
;;;961      TIMx->CCER = tmpccer;
0000e4  f8a48020          STRH     r8,[r4,#0x20]
;;;962    }
0000e8  e8bd9ff0          POP      {r4-r12,pc}
;;;963    
                          ENDP

                  |L59.236|
                          DCD      0x40010000
                  |L59.240|
                          DCD      0x40010400
                  |L59.244|
                          DCD      0x40000400
                  |L59.248|
                          DCD      0x40000800
                  |L59.252|
                          DCD      0x40000c00
                  |L59.256|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC4PolarityConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC4PolarityConfig PROC
;;;1746     */
;;;1747   void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  b570              PUSH     {r4-r6,lr}
;;;1748   {
000002  4604              MOV      r4,r0
;;;1749     uint16_t tmpccer = 0;
;;;1750   
;;;1751     /* Check the parameters */
;;;1752     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4814              LDR      r0,|L60.88|
000006  460d              MOV      r5,r1                 ;1748
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L60.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L60.52|
000012  4812              LDR      r0,|L60.92|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L60.52|
000018  4811              LDR      r0,|L60.96|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L60.52|
00001e  4811              LDR      r0,|L60.100|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L60.52|
000024  4810              LDR      r0,|L60.104|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L60.52|
00002a  f44f61db          MOV      r1,#0x6d8
00002e  480f              LDR      r0,|L60.108|
000030  f7fffffe          BL       assert_failed
                  |L60.52|
;;;1753     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
000034  b135              CBZ      r5,|L60.68|
000036  2d02              CMP      r5,#2
000038  d004              BEQ      |L60.68|
00003a  f24061d9          MOV      r1,#0x6d9
00003e  480b              LDR      r0,|L60.108|
000040  f7fffffe          BL       assert_failed
                  |L60.68|
;;;1754   
;;;1755     tmpccer = TIMx->CCER;
000044  8c20              LDRH     r0,[r4,#0x20]
;;;1756   
;;;1757     /* Set or Reset the CC4P Bit */
;;;1758     tmpccer &= (uint16_t)~TIM_CCER_CC4P;
;;;1759     tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
000046  f64f71ff          MOV      r1,#0xffff
00004a  f4205000          BIC      r0,r0,#0x2000         ;1758
00004e  ea013105          AND      r1,r1,r5,LSL #12
000052  4301              ORRS     r1,r1,r0
;;;1760   
;;;1761     /* Write to TIMx CCER register */
;;;1762     TIMx->CCER = tmpccer;
000054  8421              STRH     r1,[r4,#0x20]
;;;1763   }
000056  bd70              POP      {r4-r6,pc}
;;;1764   
                          ENDP

                  |L60.88|
                          DCD      0x40010000
                  |L60.92|
                          DCD      0x40000400
                  |L60.96|
                          DCD      0x40000800
                  |L60.100|
                          DCD      0x40000c00
                  |L60.104|
                          DCD      0x40010400
                  |L60.108|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OC4PreloadConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC4PreloadConfig PROC
;;;1317     */
;;;1318   void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  b570              PUSH     {r4-r6,lr}
;;;1319   {
000002  4604              MOV      r4,r0
;;;1320     uint16_t tmpccmr2 = 0;
;;;1321   
;;;1322     /* Check the parameters */
;;;1323     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4814              LDR      r0,|L61.88|
000006  460d              MOV      r5,r1                 ;1319
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L61.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L61.52|
000012  4812              LDR      r0,|L61.92|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L61.52|
000018  4811              LDR      r0,|L61.96|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L61.52|
00001e  4811              LDR      r0,|L61.100|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L61.52|
000024  4810              LDR      r0,|L61.104|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L61.52|
00002a  f240512b          MOV      r1,#0x52b
00002e  480f              LDR      r0,|L61.108|
000030  f7fffffe          BL       assert_failed
                  |L61.52|
;;;1324     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
000034  2d08              CMP      r5,#8
000036  d005              BEQ      |L61.68|
000038  b125              CBZ      r5,|L61.68|
00003a  f240512c          MOV      r1,#0x52c
00003e  480b              LDR      r0,|L61.108|
000040  f7fffffe          BL       assert_failed
                  |L61.68|
;;;1325   
;;;1326     tmpccmr2 = TIMx->CCMR2;
000044  8ba0              LDRH     r0,[r4,#0x1c]
;;;1327   
;;;1328     /* Reset the OC4PE Bit */
;;;1329     tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
;;;1330   
;;;1331     /* Enable or Disable the Output Compare Preload feature */
;;;1332     tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
000046  f64f71ff          MOV      r1,#0xffff
00004a  f4206000          BIC      r0,r0,#0x800          ;1329
00004e  ea012105          AND      r1,r1,r5,LSL #8
000052  4301              ORRS     r1,r1,r0
;;;1333   
;;;1334     /* Write to TIMx CCMR2 register */
;;;1335     TIMx->CCMR2 = tmpccmr2;
000054  83a1              STRH     r1,[r4,#0x1c]
;;;1336   }
000056  bd70              POP      {r4-r6,pc}
;;;1337   
                          ENDP

                  |L61.88|
                          DCD      0x40010000
                  |L61.92|
                          DCD      0x40000400
                  |L61.96|
                          DCD      0x40000800
                  |L61.100|
                          DCD      0x40000c00
                  |L61.104|
                          DCD      0x40010400
                  |L61.108|
                          DCD      ||.conststring||

                          AREA ||i.TIM_OCStructInit||, CODE, READONLY, ALIGN=1

                  TIM_OCStructInit PROC
;;;969      */
;;;970    void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  2100              MOVS     r1,#0
;;;971    {
;;;972      /* Set the default configuration */
;;;973      TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
000002  8001              STRH     r1,[r0,#0]
;;;974      TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
000004  8041              STRH     r1,[r0,#2]
;;;975      TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
000006  8081              STRH     r1,[r0,#4]
;;;976      TIM_OCInitStruct->TIM_Pulse = 0x00000000;
;;;977      TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
000008  6081              STR      r1,[r0,#8]
00000a  8181              STRH     r1,[r0,#0xc]
;;;978      TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
00000c  81c1              STRH     r1,[r0,#0xe]
;;;979      TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
00000e  8201              STRH     r1,[r0,#0x10]
;;;980      TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
000010  8241              STRH     r1,[r0,#0x12]
;;;981    }
000012  4770              BX       lr
;;;982    
                          ENDP


                          AREA ||i.TIM_PWMIConfig||, CODE, READONLY, ALIGN=2

                  TIM_PWMIConfig PROC
;;;1964     */
;;;1965   void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1966   {
000004  4605              MOV      r5,r0
;;;1967     uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
;;;1968     uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
;;;1969   
;;;1970     /* Check the parameters */
;;;1971     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000006  4828              LDR      r0,|L63.168|
000008  2700              MOVS     r7,#0                 ;1967
00000a  2601              MOVS     r6,#1                 ;1968
00000c  460c              MOV      r4,r1                 ;1966
00000e  4285              CMP      r5,r0
000010  d019              BEQ      |L63.70|
000012  f1b54f80          CMP      r5,#0x40000000
000016  d016              BEQ      |L63.70|
000018  4824              LDR      r0,|L63.172|
00001a  4285              CMP      r5,r0
00001c  d013              BEQ      |L63.70|
00001e  4824              LDR      r0,|L63.176|
000020  4285              CMP      r5,r0
000022  d010              BEQ      |L63.70|
000024  4823              LDR      r0,|L63.180|
000026  4285              CMP      r5,r0
000028  d00d              BEQ      |L63.70|
00002a  4823              LDR      r0,|L63.184|
00002c  4285              CMP      r5,r0
00002e  d00a              BEQ      |L63.70|
000030  4822              LDR      r0,|L63.188|
000032  4285              CMP      r5,r0
000034  d007              BEQ      |L63.70|
000036  4822              LDR      r0,|L63.192|
000038  4285              CMP      r5,r0
00003a  d004              BEQ      |L63.70|
00003c  f24071b3          MOV      r1,#0x7b3
000040  4820              LDR      r0,|L63.196|
000042  f7fffffe          BL       assert_failed
                  |L63.70|
;;;1972   
;;;1973     /* Select the Opposite Input Polarity */
;;;1974     if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
000046  8861              LDRH     r1,[r4,#2]
000048  b901              CBNZ     r1,|L63.76|
;;;1975     {
;;;1976       icoppositepolarity = TIM_ICPolarity_Falling;
00004a  2702              MOVS     r7,#2
                  |L63.76|
;;;1977     }
;;;1978     else
;;;1979     {
;;;1980       icoppositepolarity = TIM_ICPolarity_Rising;
;;;1981     }
;;;1982     /* Select the Opposite Input */
;;;1983     if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
00004c  88a2              LDRH     r2,[r4,#4]
00004e  2a01              CMP      r2,#1
000050  d100              BNE      |L63.84|
;;;1984     {
;;;1985       icoppositeselection = TIM_ICSelection_IndirectTI;
000052  2602              MOVS     r6,#2
                  |L63.84|
;;;1986     }
;;;1987     else
;;;1988     {
;;;1989       icoppositeselection = TIM_ICSelection_DirectTI;
;;;1990     }
;;;1991     if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
000054  8820              LDRH     r0,[r4,#0]
;;;1992     {
;;;1993       /* TI1 Configuration */
;;;1994       TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
;;;1995                  TIM_ICInitStruct->TIM_ICFilter);
;;;1996       /* Set the Input Capture Prescaler value */
;;;1997       TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;1998       /* TI2 Configuration */
;;;1999       TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
;;;2000       /* Set the Input Capture Prescaler value */
;;;2001       TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;2002     }
;;;2003     else
;;;2004     { 
;;;2005       /* TI2 Configuration */
;;;2006       TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
000056  8923              LDRH     r3,[r4,#8]
000058  2800              CMP      r0,#0                 ;1991
00005a  4628              MOV      r0,r5
00005c  d011              BEQ      |L63.130|
00005e  f7fffffe          BL       TI2_Config
;;;2007                  TIM_ICInitStruct->TIM_ICFilter);
;;;2008       /* Set the Input Capture Prescaler value */
;;;2009       TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000062  88e1              LDRH     r1,[r4,#6]
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       TIM_SetIC2Prescaler
;;;2010       /* TI1 Configuration */
;;;2011       TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
00006a  8923              LDRH     r3,[r4,#8]
00006c  4632              MOV      r2,r6
00006e  4639              MOV      r1,r7
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       TI1_Config
;;;2012       /* Set the Input Capture Prescaler value */
;;;2013       TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000076  88e1              LDRH     r1,[r4,#6]
000078  4628              MOV      r0,r5
00007a  e8bd41f0          POP      {r4-r8,lr}
00007e  f7ffbffe          B.W      TIM_SetIC1Prescaler
                  |L63.130|
000082  f7fffffe          BL       TI1_Config
000086  88e1              LDRH     r1,[r4,#6]            ;1997
000088  4628              MOV      r0,r5                 ;1997
00008a  f7fffffe          BL       TIM_SetIC1Prescaler
00008e  8923              LDRH     r3,[r4,#8]            ;1999
000090  4632              MOV      r2,r6                 ;1999
000092  4639              MOV      r1,r7                 ;1999
000094  4628              MOV      r0,r5                 ;1999
000096  f7fffffe          BL       TI2_Config
00009a  88e1              LDRH     r1,[r4,#6]            ;2001
00009c  4628              MOV      r0,r5                 ;2001
00009e  e8bd41f0          POP      {r4-r8,lr}            ;2001
0000a2  f7ffbffe          B.W      TIM_SetIC2Prescaler
;;;2014     }
;;;2015   }
;;;2016   
                          ENDP

0000a6  0000              DCW      0x0000
                  |L63.168|
                          DCD      0x40010000
                  |L63.172|
                          DCD      0x40000400
                  |L63.176|
                          DCD      0x40000800
                  |L63.180|
                          DCD      0x40000c00
                  |L63.184|
                          DCD      0x40010400
                  |L63.188|
                          DCD      0x40014000
                  |L63.192|
                          DCD      0x40001800
                  |L63.196|
                          DCD      ||.conststring||

                          AREA ||i.TIM_PrescalerConfig||, CODE, READONLY, ALIGN=2

                  TIM_PrescalerConfig PROC
;;;353      */
;;;354    void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
000000  b570              PUSH     {r4-r6,lr}
;;;355    {
000002  4604              MOV      r4,r0
;;;356      /* Check the parameters */
;;;357      assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  481d              LDR      r0,|L64.124|
000006  4615              MOV      r5,r2                 ;355
000008  460e              MOV      r6,r1                 ;355
00000a  4284              CMP      r4,r0
00000c  d02b              BEQ      |L64.102|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d028              BEQ      |L64.102|
000014  481a              LDR      r0,|L64.128|
000016  4284              CMP      r4,r0
000018  d025              BEQ      |L64.102|
00001a  481a              LDR      r0,|L64.132|
00001c  4284              CMP      r4,r0
00001e  d022              BEQ      |L64.102|
000020  4819              LDR      r0,|L64.136|
000022  4284              CMP      r4,r0
000024  d01f              BEQ      |L64.102|
000026  4819              LDR      r0,|L64.140|
000028  4284              CMP      r4,r0
00002a  d01c              BEQ      |L64.102|
00002c  4818              LDR      r0,|L64.144|
00002e  4284              CMP      r4,r0
000030  d019              BEQ      |L64.102|
000032  4818              LDR      r0,|L64.148|
000034  4284              CMP      r4,r0
000036  d016              BEQ      |L64.102|
000038  4817              LDR      r0,|L64.152|
00003a  4284              CMP      r4,r0
00003c  d013              BEQ      |L64.102|
00003e  4817              LDR      r0,|L64.156|
000040  4284              CMP      r4,r0
000042  d010              BEQ      |L64.102|
000044  4816              LDR      r0,|L64.160|
000046  4284              CMP      r4,r0
000048  d00d              BEQ      |L64.102|
00004a  4816              LDR      r0,|L64.164|
00004c  4284              CMP      r4,r0
00004e  d00a              BEQ      |L64.102|
000050  4815              LDR      r0,|L64.168|
000052  4284              CMP      r4,r0
000054  d007              BEQ      |L64.102|
000056  4815              LDR      r0,|L64.172|
000058  4284              CMP      r4,r0
00005a  d004              BEQ      |L64.102|
00005c  f2401165          MOV      r1,#0x165
000060  4813              LDR      r0,|L64.176|
000062  f7fffffe          BL       assert_failed
                  |L64.102|
;;;358      assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
000066  b135              CBZ      r5,|L64.118|
000068  2d01              CMP      r5,#1
00006a  d004              BEQ      |L64.118|
00006c  f44f71b3          MOV      r1,#0x166
000070  480f              LDR      r0,|L64.176|
000072  f7fffffe          BL       assert_failed
                  |L64.118|
;;;359      /* Set the Prescaler value */
;;;360      TIMx->PSC = Prescaler;
000076  8526              STRH     r6,[r4,#0x28]
;;;361      /* Set or reset the UG Bit */
;;;362      TIMx->EGR = TIM_PSCReloadMode;
000078  82a5              STRH     r5,[r4,#0x14]
;;;363    }
00007a  bd70              POP      {r4-r6,pc}
;;;364    
                          ENDP

                  |L64.124|
                          DCD      0x40010000
                  |L64.128|
                          DCD      0x40000400
                  |L64.132|
                          DCD      0x40000800
                  |L64.136|
                          DCD      0x40000c00
                  |L64.140|
                          DCD      0x40001000
                  |L64.144|
                          DCD      0x40001400
                  |L64.148|
                          DCD      0x40010400
                  |L64.152|
                          DCD      0x40014000
                  |L64.156|
                          DCD      0x40014400
                  |L64.160|
                          DCD      0x40014800
                  |L64.164|
                          DCD      0x40001800
                  |L64.168|
                          DCD      0x40001c00
                  |L64.172|
                          DCD      0x40002000
                  |L64.176|
                          DCD      ||.conststring||

                          AREA ||i.TIM_RemapConfig||, CODE, READONLY, ALIGN=2

                  TIM_RemapConfig PROC
;;;3159     */
;;;3160   void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
000000  b570              PUSH     {r4-r6,lr}
;;;3161   {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;3162    /* Check the parameters */
;;;3163     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
000006  f1b04f80          CMP      r0,#0x40000000
00000a  d00a              BEQ      |L65.34|
00000c  4812              LDR      r0,|L65.88|
00000e  4285              CMP      r5,r0
000010  d007              BEQ      |L65.34|
000012  4812              LDR      r0,|L65.92|
000014  4285              CMP      r5,r0
000016  d004              BEQ      |L65.34|
000018  f640415b          MOV      r1,#0xc5b
00001c  4810              LDR      r0,|L65.96|
00001e  f7fffffe          BL       assert_failed
                  |L65.34|
;;;3164     assert_param(IS_TIM_REMAP(TIM_Remap));
000022  b1ac              CBZ      r4,|L65.80|
000024  f5b46f80          CMP      r4,#0x400
000028  d012              BEQ      |L65.80|
00002a  f5b46f00          CMP      r4,#0x800
00002e  d00f              BEQ      |L65.80|
000030  f5b46f40          CMP      r4,#0xc00
000034  d00c              BEQ      |L65.80|
000036  2c40              CMP      r4,#0x40
000038  d00a              BEQ      |L65.80|
00003a  2c80              CMP      r4,#0x80
00003c  d008              BEQ      |L65.80|
00003e  2cc0              CMP      r4,#0xc0
000040  d006              BEQ      |L65.80|
000042  2c02              CMP      r4,#2
000044  d004              BEQ      |L65.80|
000046  f640415c          MOV      r1,#0xc5c
00004a  4805              LDR      r0,|L65.96|
00004c  f7fffffe          BL       assert_failed
                  |L65.80|
;;;3165   
;;;3166     /* Set the Timer remapping configuration */
;;;3167     TIMx->OR =  TIM_Remap;
000050  f8a54050          STRH     r4,[r5,#0x50]
;;;3168   }
000054  bd70              POP      {r4-r6,pc}
;;;3169   /**
                          ENDP

000056  0000              DCW      0x0000
                  |L65.88|
                          DCD      0x40000c00
                  |L65.92|
                          DCD      0x40014800
                  |L65.96|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SelectCCDMA||, CODE, READONLY, ALIGN=2

                  TIM_SelectCCDMA PROC
;;;2633     */
;;;2634   void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;2635   {
000002  4604              MOV      r4,r0
;;;2636     /* Check the parameters */
;;;2637     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4814              LDR      r0,|L66.88|
000006  460d              MOV      r5,r1                 ;2635
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L66.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L66.52|
000012  4812              LDR      r0,|L66.92|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L66.52|
000018  4811              LDR      r0,|L66.96|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L66.52|
00001e  4811              LDR      r0,|L66.100|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L66.52|
000024  4810              LDR      r0,|L66.104|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L66.52|
00002a  f640214d          MOV      r1,#0xa4d
00002e  480f              LDR      r0,|L66.108|
000030  f7fffffe          BL       assert_failed
                  |L66.52|
;;;2638     assert_param(IS_FUNCTIONAL_STATE(NewState));
000034  b155              CBZ      r5,|L66.76|
000036  2d01              CMP      r5,#1
000038  d004              BEQ      |L66.68|
00003a  f640214e          MOV      r1,#0xa4e
00003e  480b              LDR      r0,|L66.108|
000040  f7fffffe          BL       assert_failed
                  |L66.68|
;;;2639   
;;;2640     if (NewState != DISABLE)
;;;2641     {
;;;2642       /* Set the CCDS Bit */
;;;2643       TIMx->CR2 |= TIM_CR2_CCDS;
000044  88a0              LDRH     r0,[r4,#4]
000046  f0400008          ORR      r0,r0,#8
00004a  e002              B        |L66.82|
                  |L66.76|
;;;2644     }
;;;2645     else
;;;2646     {
;;;2647       /* Reset the CCDS Bit */
;;;2648       TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
00004c  88a0              LDRH     r0,[r4,#4]
00004e  f0200008          BIC      r0,r0,#8
                  |L66.82|
000052  80a0              STRH     r0,[r4,#4]            ;2643
;;;2649     }
;;;2650   }
000054  bd70              POP      {r4-r6,pc}
;;;2651   /**
                          ENDP

000056  0000              DCW      0x0000
                  |L66.88|
                          DCD      0x40010000
                  |L66.92|
                          DCD      0x40000400
                  |L66.96|
                          DCD      0x40000800
                  |L66.100|
                          DCD      0x40000c00
                  |L66.104|
                          DCD      0x40010400
                  |L66.108|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SelectCOM||, CODE, READONLY, ALIGN=2

                  TIM_SelectCOM PROC
;;;2279     */
;;;2280   void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;2281   {
000002  4604              MOV      r4,r0
;;;2282     /* Check the parameters */
;;;2283     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
000004  480e              LDR      r0,|L67.64|
000006  460d              MOV      r5,r1                 ;2281
000008  4284              CMP      r4,r0
00000a  d007              BEQ      |L67.28|
00000c  480d              LDR      r0,|L67.68|
00000e  4284              CMP      r4,r0
000010  d004              BEQ      |L67.28|
000012  f64001eb          MOV      r1,#0x8eb
000016  480c              LDR      r0,|L67.72|
000018  f7fffffe          BL       assert_failed
                  |L67.28|
;;;2284     assert_param(IS_FUNCTIONAL_STATE(NewState));
00001c  b155              CBZ      r5,|L67.52|
00001e  2d01              CMP      r5,#1
000020  d004              BEQ      |L67.44|
000022  f64001ec          MOV      r1,#0x8ec
000026  4808              LDR      r0,|L67.72|
000028  f7fffffe          BL       assert_failed
                  |L67.44|
;;;2285   
;;;2286     if (NewState != DISABLE)
;;;2287     {
;;;2288       /* Set the COM Bit */
;;;2289       TIMx->CR2 |= TIM_CR2_CCUS;
00002c  88a0              LDRH     r0,[r4,#4]
00002e  f0400004          ORR      r0,r0,#4
000032  e002              B        |L67.58|
                  |L67.52|
;;;2290     }
;;;2291     else
;;;2292     {
;;;2293       /* Reset the COM Bit */
;;;2294       TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
000034  88a0              LDRH     r0,[r4,#4]
000036  f0200004          BIC      r0,r0,#4
                  |L67.58|
00003a  80a0              STRH     r0,[r4,#4]            ;2289
;;;2295     }
;;;2296   }
00003c  bd70              POP      {r4-r6,pc}
;;;2297   
                          ENDP

00003e  0000              DCW      0x0000
                  |L67.64|
                          DCD      0x40010000
                  |L67.68|
                          DCD      0x40010400
                  |L67.72|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SelectHallSensor||, CODE, READONLY, ALIGN=2

                  TIM_SelectHallSensor PROC
;;;3108     */
;;;3109   void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;3110   {
000002  4604              MOV      r4,r0
;;;3111     /* Check the parameters */
;;;3112     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  4817              LDR      r0,|L68.100|
000006  460d              MOV      r5,r1                 ;3110
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L68.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L68.64|
000012  4815              LDR      r0,|L68.104|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L68.64|
000018  4814              LDR      r0,|L68.108|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L68.64|
00001e  4814              LDR      r0,|L68.112|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L68.64|
000024  4813              LDR      r0,|L68.116|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L68.64|
00002a  4813              LDR      r0,|L68.120|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L68.64|
000030  4812              LDR      r0,|L68.124|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L68.64|
000036  f6404128          MOV      r1,#0xc28
00003a  4811              LDR      r0,|L68.128|
00003c  f7fffffe          BL       assert_failed
                  |L68.64|
;;;3113     assert_param(IS_FUNCTIONAL_STATE(NewState));
000040  b155              CBZ      r5,|L68.88|
000042  2d01              CMP      r5,#1
000044  d004              BEQ      |L68.80|
000046  f6404129          MOV      r1,#0xc29
00004a  480d              LDR      r0,|L68.128|
00004c  f7fffffe          BL       assert_failed
                  |L68.80|
;;;3114   
;;;3115     if (NewState != DISABLE)
;;;3116     {
;;;3117       /* Set the TI1S Bit */
;;;3118       TIMx->CR2 |= TIM_CR2_TI1S;
000050  88a0              LDRH     r0,[r4,#4]
000052  f0400080          ORR      r0,r0,#0x80
000056  e002              B        |L68.94|
                  |L68.88|
;;;3119     }
;;;3120     else
;;;3121     {
;;;3122       /* Reset the TI1S Bit */
;;;3123       TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
000058  88a0              LDRH     r0,[r4,#4]
00005a  f0200080          BIC      r0,r0,#0x80
                  |L68.94|
00005e  80a0              STRH     r0,[r4,#4]            ;3118
;;;3124     }
;;;3125   }
000060  bd70              POP      {r4-r6,pc}
;;;3126   /**
                          ENDP

000062  0000              DCW      0x0000
                  |L68.100|
                          DCD      0x40010000
                  |L68.104|
                          DCD      0x40000400
                  |L68.108|
                          DCD      0x40000800
                  |L68.112|
                          DCD      0x40000c00
                  |L68.116|
                          DCD      0x40010400
                  |L68.120|
                          DCD      0x40014000
                  |L68.124|
                          DCD      0x40001800
                  |L68.128|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SelectInputTrigger||, CODE, READONLY, ALIGN=2

                  TIM_SelectInputTrigger PROC
;;;2878     */
;;;2879   void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
000000  b570              PUSH     {r4-r6,lr}
;;;2880   {
000002  4604              MOV      r4,r0
;;;2881     uint16_t tmpsmcr = 0;
;;;2882   
;;;2883     /* Check the parameters */
;;;2884     assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
000004  4821              LDR      r0,|L69.140|
000006  460d              MOV      r5,r1                 ;2880
000008  4284              CMP      r4,r0
00000a  d025              BEQ      |L69.88|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d022              BEQ      |L69.88|
000012  481f              LDR      r0,|L69.144|
000014  4284              CMP      r4,r0
000016  d01f              BEQ      |L69.88|
000018  481e              LDR      r0,|L69.148|
00001a  4284              CMP      r4,r0
00001c  d01c              BEQ      |L69.88|
00001e  481e              LDR      r0,|L69.152|
000020  4284              CMP      r4,r0
000022  d019              BEQ      |L69.88|
000024  481d              LDR      r0,|L69.156|
000026  4284              CMP      r4,r0
000028  d016              BEQ      |L69.88|
00002a  481d              LDR      r0,|L69.160|
00002c  4284              CMP      r4,r0
00002e  d013              BEQ      |L69.88|
000030  481c              LDR      r0,|L69.164|
000032  4284              CMP      r4,r0
000034  d010              BEQ      |L69.88|
000036  481c              LDR      r0,|L69.168|
000038  4284              CMP      r4,r0
00003a  d00d              BEQ      |L69.88|
00003c  481b              LDR      r0,|L69.172|
00003e  4284              CMP      r4,r0
000040  d00a              BEQ      |L69.88|
000042  481b              LDR      r0,|L69.176|
000044  4284              CMP      r4,r0
000046  d007              BEQ      |L69.88|
000048  481a              LDR      r0,|L69.180|
00004a  4284              CMP      r4,r0
00004c  d004              BEQ      |L69.88|
00004e  f6403144          MOV      r1,#0xb44
000052  4819              LDR      r0,|L69.184|
000054  f7fffffe          BL       assert_failed
                  |L69.88|
;;;2885     assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
000058  b195              CBZ      r5,|L69.128|
00005a  2d10              CMP      r5,#0x10
00005c  d010              BEQ      |L69.128|
00005e  2d20              CMP      r5,#0x20
000060  d00e              BEQ      |L69.128|
000062  2d30              CMP      r5,#0x30
000064  d00c              BEQ      |L69.128|
000066  2d40              CMP      r5,#0x40
000068  d00a              BEQ      |L69.128|
00006a  2d50              CMP      r5,#0x50
00006c  d008              BEQ      |L69.128|
00006e  2d60              CMP      r5,#0x60
000070  d006              BEQ      |L69.128|
000072  2d70              CMP      r5,#0x70
000074  d004              BEQ      |L69.128|
000076  f6403145          MOV      r1,#0xb45
00007a  480f              LDR      r0,|L69.184|
00007c  f7fffffe          BL       assert_failed
                  |L69.128|
;;;2886   
;;;2887     /* Get the TIMx SMCR register value */
;;;2888     tmpsmcr = TIMx->SMCR;
000080  8920              LDRH     r0,[r4,#8]
;;;2889   
;;;2890     /* Reset the TS Bits */
;;;2891     tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
000082  f0200070          BIC      r0,r0,#0x70
;;;2892   
;;;2893     /* Set the Input Trigger source */
;;;2894     tmpsmcr |= TIM_InputTriggerSource;
000086  4328              ORRS     r0,r0,r5
;;;2895   
;;;2896     /* Write to TIMx SMCR */
;;;2897     TIMx->SMCR = tmpsmcr;
000088  8120              STRH     r0,[r4,#8]
;;;2898   }
00008a  bd70              POP      {r4-r6,pc}
;;;2899   
                          ENDP

                  |L69.140|
                          DCD      0x40010000
                  |L69.144|
                          DCD      0x40000400
                  |L69.148|
                          DCD      0x40000800
                  |L69.152|
                          DCD      0x40000c00
                  |L69.156|
                          DCD      0x40010400
                  |L69.160|
                          DCD      0x40014000
                  |L69.164|
                          DCD      0x40014400
                  |L69.168|
                          DCD      0x40014800
                  |L69.172|
                          DCD      0x40001800
                  |L69.176|
                          DCD      0x40001c00
                  |L69.180|
                          DCD      0x40002000
                  |L69.184|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SelectMasterSlaveMode||, CODE, READONLY, ALIGN=2

                  TIM_SelectMasterSlaveMode PROC
;;;2968     */
;;;2969   void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
000000  b570              PUSH     {r4-r6,lr}
;;;2970   {
000002  4604              MOV      r4,r0
;;;2971     /* Check the parameters */
;;;2972     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  4816              LDR      r0,|L70.96|
000006  460d              MOV      r5,r1                 ;2970
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L70.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L70.64|
000012  4814              LDR      r0,|L70.100|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L70.64|
000018  4813              LDR      r0,|L70.104|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L70.64|
00001e  4813              LDR      r0,|L70.108|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L70.64|
000024  4812              LDR      r0,|L70.112|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L70.64|
00002a  4812              LDR      r0,|L70.116|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L70.64|
000030  4811              LDR      r0,|L70.120|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L70.64|
000036  f640319c          MOV      r1,#0xb9c
00003a  4810              LDR      r0,|L70.124|
00003c  f7fffffe          BL       assert_failed
                  |L70.64|
;;;2973     assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
000040  2d80              CMP      r5,#0x80
000042  d005              BEQ      |L70.80|
000044  b125              CBZ      r5,|L70.80|
000046  f640319d          MOV      r1,#0xb9d
00004a  480c              LDR      r0,|L70.124|
00004c  f7fffffe          BL       assert_failed
                  |L70.80|
;;;2974   
;;;2975     /* Reset the MSM Bit */
;;;2976     TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
000050  8920              LDRH     r0,[r4,#8]
000052  f0200080          BIC      r0,r0,#0x80
000056  8120              STRH     r0,[r4,#8]
;;;2977     
;;;2978     /* Set or Reset the MSM Bit */
;;;2979     TIMx->SMCR |= TIM_MasterSlaveMode;
000058  8920              LDRH     r0,[r4,#8]
00005a  4328              ORRS     r0,r0,r5
00005c  8120              STRH     r0,[r4,#8]
;;;2980   }
00005e  bd70              POP      {r4-r6,pc}
;;;2981   
                          ENDP

                  |L70.96|
                          DCD      0x40010000
                  |L70.100|
                          DCD      0x40000400
                  |L70.104|
                          DCD      0x40000800
                  |L70.108|
                          DCD      0x40000c00
                  |L70.112|
                          DCD      0x40010400
                  |L70.116|
                          DCD      0x40014000
                  |L70.120|
                          DCD      0x40001800
                  |L70.124|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SelectOCxM||, CODE, READONLY, ALIGN=2

                  TIM_SelectOCxM PROC
;;;1005     */
;;;1006   void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
000000  b570              PUSH     {r4-r6,lr}
;;;1007   {
000002  4604              MOV      r4,r0
;;;1008     uint32_t tmp = 0;
;;;1009     uint16_t tmp1 = 0;
;;;1010   
;;;1011     /* Check the parameters */
;;;1012     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000004  4837              LDR      r0,|L71.228|
000006  4615              MOV      r5,r2                 ;1007
000008  460e              MOV      r6,r1                 ;1007
00000a  4284              CMP      r4,r0
00000c  d025              BEQ      |L71.90|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d022              BEQ      |L71.90|
000014  4834              LDR      r0,|L71.232|
000016  4284              CMP      r4,r0
000018  d01f              BEQ      |L71.90|
00001a  4834              LDR      r0,|L71.236|
00001c  4284              CMP      r4,r0
00001e  d01c              BEQ      |L71.90|
000020  4833              LDR      r0,|L71.240|
000022  4284              CMP      r4,r0
000024  d019              BEQ      |L71.90|
000026  4833              LDR      r0,|L71.244|
000028  4284              CMP      r4,r0
00002a  d016              BEQ      |L71.90|
00002c  4832              LDR      r0,|L71.248|
00002e  4284              CMP      r4,r0
000030  d013              BEQ      |L71.90|
000032  4832              LDR      r0,|L71.252|
000034  4284              CMP      r4,r0
000036  d010              BEQ      |L71.90|
000038  4831              LDR      r0,|L71.256|
00003a  4284              CMP      r4,r0
00003c  d00d              BEQ      |L71.90|
00003e  4831              LDR      r0,|L71.260|
000040  4284              CMP      r4,r0
000042  d00a              BEQ      |L71.90|
000044  4830              LDR      r0,|L71.264|
000046  4284              CMP      r4,r0
000048  d007              BEQ      |L71.90|
00004a  4830              LDR      r0,|L71.268|
00004c  4284              CMP      r4,r0
00004e  d004              BEQ      |L71.90|
000050  f44f717d          MOV      r1,#0x3f4
000054  482e              LDR      r0,|L71.272|
000056  f7fffffe          BL       assert_failed
                  |L71.90|
;;;1013     assert_param(IS_TIM_CHANNEL(TIM_Channel));
00005a  b156              CBZ      r6,|L71.114|
00005c  2e04              CMP      r6,#4
00005e  d008              BEQ      |L71.114|
000060  2e08              CMP      r6,#8
000062  d006              BEQ      |L71.114|
000064  2e0c              CMP      r6,#0xc
000066  d004              BEQ      |L71.114|
000068  f24031f5          MOV      r1,#0x3f5
00006c  4828              LDR      r0,|L71.272|
00006e  f7fffffe          BL       assert_failed
                  |L71.114|
;;;1014     assert_param(IS_TIM_OCM(TIM_OCMode));
000072  b195              CBZ      r5,|L71.154|
000074  2d10              CMP      r5,#0x10
000076  d010              BEQ      |L71.154|
000078  2d20              CMP      r5,#0x20
00007a  d00e              BEQ      |L71.154|
00007c  2d30              CMP      r5,#0x30
00007e  d00c              BEQ      |L71.154|
000080  2d60              CMP      r5,#0x60
000082  d00a              BEQ      |L71.154|
000084  2d70              CMP      r5,#0x70
000086  d008              BEQ      |L71.154|
000088  2d50              CMP      r5,#0x50
00008a  d006              BEQ      |L71.154|
00008c  2d40              CMP      r5,#0x40
00008e  d004              BEQ      |L71.154|
000090  f24031f6          MOV      r1,#0x3f6
000094  481e              LDR      r0,|L71.272|
000096  f7fffffe          BL       assert_failed
                  |L71.154|
;;;1015   
;;;1016     tmp = (uint32_t) TIMx;
;;;1017     tmp += CCMR_OFFSET;
;;;1018   
;;;1019     tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
00009a  2101              MOVS     r1,#1
;;;1020   
;;;1021     /* Disable the Channel: Reset the CCxE Bit */
;;;1022     TIMx->CCER &= (uint16_t) ~tmp1;
00009c  8c22              LDRH     r2,[r4,#0x20]
00009e  f1040018          ADD      r0,r4,#0x18           ;1017
0000a2  40b1              LSLS     r1,r1,r6              ;1019
0000a4  438a              BICS     r2,r2,r1
0000a6  8422              STRH     r2,[r4,#0x20]
;;;1023   
;;;1024     if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
0000a8  b196              CBZ      r6,|L71.208|
0000aa  2e08              CMP      r6,#8
0000ac  d010              BEQ      |L71.208|
0000ae  1f36              SUBS     r6,r6,#4
;;;1025     {
;;;1026       tmp += (TIM_Channel>>1);
;;;1027   
;;;1028       /* Reset the OCxM bits in the CCMRx register */
;;;1029       *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
;;;1030      
;;;1031       /* Configure the OCxM bits in the CCMRx register */
;;;1032       *(__IO uint32_t *) tmp |= TIM_OCMode;
;;;1033     }
;;;1034     else
;;;1035     {
;;;1036       tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
0000b0  f3c6014e          UBFX     r1,r6,#1,#15
0000b4  4408              ADD      r0,r0,r1
;;;1037   
;;;1038       /* Reset the OCxM bits in the CCMRx register */
;;;1039       *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
0000b6  6801              LDR      r1,[r0,#0]
0000b8  f64872ff          MOV      r2,#0x8fff
0000bc  4011              ANDS     r1,r1,r2
0000be  6001              STR      r1,[r0,#0]
;;;1040       
;;;1041       /* Configure the OCxM bits in the CCMRx register */
;;;1042       *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
0000c0  6801              LDR      r1,[r0,#0]
0000c2  f64f72ff          MOV      r2,#0xffff
0000c6  ea022205          AND      r2,r2,r5,LSL #8
0000ca  4311              ORRS     r1,r1,r2
                  |L71.204|
0000cc  6001              STR      r1,[r0,#0]            ;1032
;;;1043     }
;;;1044   }
0000ce  bd70              POP      {r4-r6,pc}
                  |L71.208|
0000d0  eb000056          ADD      r0,r0,r6,LSR #1       ;1026
0000d4  6801              LDR      r1,[r0,#0]            ;1029
0000d6  f64f728f          MOV      r2,#0xff8f            ;1029
0000da  4011              ANDS     r1,r1,r2              ;1029
0000dc  6001              STR      r1,[r0,#0]            ;1029
0000de  6801              LDR      r1,[r0,#0]            ;1032
0000e0  4329              ORRS     r1,r1,r5              ;1032
0000e2  e7f3              B        |L71.204|
;;;1045   
                          ENDP

                  |L71.228|
                          DCD      0x40010000
                  |L71.232|
                          DCD      0x40000400
                  |L71.236|
                          DCD      0x40000800
                  |L71.240|
                          DCD      0x40000c00
                  |L71.244|
                          DCD      0x40010400
                  |L71.248|
                          DCD      0x40014000
                  |L71.252|
                          DCD      0x40014400
                  |L71.256|
                          DCD      0x40014800
                  |L71.260|
                          DCD      0x40001800
                  |L71.264|
                          DCD      0x40001c00
                  |L71.268|
                          DCD      0x40002000
                  |L71.272|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SelectOnePulseMode||, CODE, READONLY, ALIGN=2

                  TIM_SelectOnePulseMode PROC
;;;542      */
;;;543    void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
000000  b570              PUSH     {r4-r6,lr}
;;;544    {
000002  4604              MOV      r4,r0
;;;545      /* Check the parameters */
;;;546      assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  481f              LDR      r0,|L72.132|
000006  460d              MOV      r5,r1                 ;544
000008  4284              CMP      r4,r0
00000a  d02b              BEQ      |L72.100|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d028              BEQ      |L72.100|
000012  481d              LDR      r0,|L72.136|
000014  4284              CMP      r4,r0
000016  d025              BEQ      |L72.100|
000018  481c              LDR      r0,|L72.140|
00001a  4284              CMP      r4,r0
00001c  d022              BEQ      |L72.100|
00001e  481c              LDR      r0,|L72.144|
000020  4284              CMP      r4,r0
000022  d01f              BEQ      |L72.100|
000024  481b              LDR      r0,|L72.148|
000026  4284              CMP      r4,r0
000028  d01c              BEQ      |L72.100|
00002a  481b              LDR      r0,|L72.152|
00002c  4284              CMP      r4,r0
00002e  d019              BEQ      |L72.100|
000030  481a              LDR      r0,|L72.156|
000032  4284              CMP      r4,r0
000034  d016              BEQ      |L72.100|
000036  481a              LDR      r0,|L72.160|
000038  4284              CMP      r4,r0
00003a  d013              BEQ      |L72.100|
00003c  4819              LDR      r0,|L72.164|
00003e  4284              CMP      r4,r0
000040  d010              BEQ      |L72.100|
000042  4819              LDR      r0,|L72.168|
000044  4284              CMP      r4,r0
000046  d00d              BEQ      |L72.100|
000048  4818              LDR      r0,|L72.172|
00004a  4284              CMP      r4,r0
00004c  d00a              BEQ      |L72.100|
00004e  4818              LDR      r0,|L72.176|
000050  4284              CMP      r4,r0
000052  d007              BEQ      |L72.100|
000054  4817              LDR      r0,|L72.180|
000056  4284              CMP      r4,r0
000058  d004              BEQ      |L72.100|
00005a  f2402122          MOV      r1,#0x222
00005e  4816              LDR      r0,|L72.184|
000060  f7fffffe          BL       assert_failed
                  |L72.100|
;;;547      assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
000064  2d08              CMP      r5,#8
000066  d005              BEQ      |L72.116|
000068  b125              CBZ      r5,|L72.116|
00006a  f2402123          MOV      r1,#0x223
00006e  4812              LDR      r0,|L72.184|
000070  f7fffffe          BL       assert_failed
                  |L72.116|
;;;548    
;;;549      /* Reset the OPM Bit */
;;;550      TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
000074  8820              LDRH     r0,[r4,#0]
000076  f0200008          BIC      r0,r0,#8
00007a  8020              STRH     r0,[r4,#0]
;;;551    
;;;552      /* Configure the OPM Mode */
;;;553      TIMx->CR1 |= TIM_OPMode;
00007c  8820              LDRH     r0,[r4,#0]
00007e  4328              ORRS     r0,r0,r5
000080  8020              STRH     r0,[r4,#0]
;;;554    }
000082  bd70              POP      {r4-r6,pc}
;;;555    
                          ENDP

                  |L72.132|
                          DCD      0x40010000
                  |L72.136|
                          DCD      0x40000400
                  |L72.140|
                          DCD      0x40000800
                  |L72.144|
                          DCD      0x40000c00
                  |L72.148|
                          DCD      0x40001000
                  |L72.152|
                          DCD      0x40001400
                  |L72.156|
                          DCD      0x40010400
                  |L72.160|
                          DCD      0x40014000
                  |L72.164|
                          DCD      0x40014400
                  |L72.168|
                          DCD      0x40014800
                  |L72.172|
                          DCD      0x40001800
                  |L72.176|
                          DCD      0x40001c00
                  |L72.180|
                          DCD      0x40002000
                  |L72.184|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SelectOutputTrigger||, CODE, READONLY, ALIGN=2

                  TIM_SelectOutputTrigger PROC
;;;2921     */
;;;2922   void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
000000  b570              PUSH     {r4-r6,lr}
;;;2923   {
000002  4604              MOV      r4,r0
;;;2924     /* Check the parameters */
;;;2925     assert_param(IS_TIM_LIST5_PERIPH(TIMx));
000004  481c              LDR      r0,|L73.120|
000006  460d              MOV      r5,r1                 ;2923
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L73.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L73.64|
000012  481a              LDR      r0,|L73.124|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L73.64|
000018  4819              LDR      r0,|L73.128|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L73.64|
00001e  4819              LDR      r0,|L73.132|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L73.64|
000024  4818              LDR      r0,|L73.136|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L73.64|
00002a  4818              LDR      r0,|L73.140|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L73.64|
000030  4817              LDR      r0,|L73.144|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L73.64|
000036  f640316d          MOV      r1,#0xb6d
00003a  4816              LDR      r0,|L73.148|
00003c  f7fffffe          BL       assert_failed
                  |L73.64|
;;;2926     assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
000040  b195              CBZ      r5,|L73.104|
000042  2d10              CMP      r5,#0x10
000044  d010              BEQ      |L73.104|
000046  2d20              CMP      r5,#0x20
000048  d00e              BEQ      |L73.104|
00004a  2d30              CMP      r5,#0x30
00004c  d00c              BEQ      |L73.104|
00004e  2d40              CMP      r5,#0x40
000050  d00a              BEQ      |L73.104|
000052  2d50              CMP      r5,#0x50
000054  d008              BEQ      |L73.104|
000056  2d60              CMP      r5,#0x60
000058  d006              BEQ      |L73.104|
00005a  2d70              CMP      r5,#0x70
00005c  d004              BEQ      |L73.104|
00005e  f640316e          MOV      r1,#0xb6e
000062  480c              LDR      r0,|L73.148|
000064  f7fffffe          BL       assert_failed
                  |L73.104|
;;;2927   
;;;2928     /* Reset the MMS Bits */
;;;2929     TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
000068  88a0              LDRH     r0,[r4,#4]
00006a  f0200070          BIC      r0,r0,#0x70
00006e  80a0              STRH     r0,[r4,#4]
;;;2930     /* Select the TRGO source */
;;;2931     TIMx->CR2 |=  TIM_TRGOSource;
000070  88a0              LDRH     r0,[r4,#4]
000072  4328              ORRS     r0,r0,r5
000074  80a0              STRH     r0,[r4,#4]
;;;2932   }
000076  bd70              POP      {r4-r6,pc}
;;;2933   
                          ENDP

                  |L73.120|
                          DCD      0x40010000
                  |L73.124|
                          DCD      0x40000400
                  |L73.128|
                          DCD      0x40000800
                  |L73.132|
                          DCD      0x40000c00
                  |L73.136|
                          DCD      0x40001000
                  |L73.140|
                          DCD      0x40001400
                  |L73.144|
                          DCD      0x40010400
                  |L73.148|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SelectSlaveMode||, CODE, READONLY, ALIGN=2

                  TIM_SelectSlaveMode PROC
;;;2945     */
;;;2946   void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
000000  b570              PUSH     {r4-r6,lr}
;;;2947   {
000002  4604              MOV      r4,r0
;;;2948     /* Check the parameters */
;;;2949     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  4819              LDR      r0,|L74.108|
000006  460d              MOV      r5,r1                 ;2947
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L74.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L74.64|
000012  4817              LDR      r0,|L74.112|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L74.64|
000018  4816              LDR      r0,|L74.116|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L74.64|
00001e  4816              LDR      r0,|L74.120|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L74.64|
000024  4815              LDR      r0,|L74.124|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L74.64|
00002a  4815              LDR      r0,|L74.128|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L74.64|
000030  4814              LDR      r0,|L74.132|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L74.64|
000036  f6403185          MOV      r1,#0xb85
00003a  4813              LDR      r0,|L74.136|
00003c  f7fffffe          BL       assert_failed
                  |L74.64|
;;;2950     assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
000040  2d04              CMP      r5,#4
000042  d00a              BEQ      |L74.90|
000044  2d05              CMP      r5,#5
000046  d008              BEQ      |L74.90|
000048  2d06              CMP      r5,#6
00004a  d006              BEQ      |L74.90|
00004c  2d07              CMP      r5,#7
00004e  d004              BEQ      |L74.90|
000050  f6403186          MOV      r1,#0xb86
000054  480c              LDR      r0,|L74.136|
000056  f7fffffe          BL       assert_failed
                  |L74.90|
;;;2951   
;;;2952     /* Reset the SMS Bits */
;;;2953     TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
00005a  8920              LDRH     r0,[r4,#8]
00005c  f0200007          BIC      r0,r0,#7
000060  8120              STRH     r0,[r4,#8]
;;;2954   
;;;2955     /* Select the Slave Mode */
;;;2956     TIMx->SMCR |= TIM_SlaveMode;
000062  8920              LDRH     r0,[r4,#8]
000064  4328              ORRS     r0,r0,r5
000066  8120              STRH     r0,[r4,#8]
;;;2957   }
000068  bd70              POP      {r4-r6,pc}
;;;2958   
                          ENDP

00006a  0000              DCW      0x0000
                  |L74.108|
                          DCD      0x40010000
                  |L74.112|
                          DCD      0x40000400
                  |L74.116|
                          DCD      0x40000800
                  |L74.120|
                          DCD      0x40000c00
                  |L74.124|
                          DCD      0x40010400
                  |L74.128|
                          DCD      0x40014000
                  |L74.132|
                          DCD      0x40001800
                  |L74.136|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SetAutoreload||, CODE, READONLY, ALIGN=2

                  TIM_SetAutoreload PROC
;;;417      */
;;;418    void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
000000  b570              PUSH     {r4-r6,lr}
;;;419    {
000002  4604              MOV      r4,r0
;;;420      /* Check the parameters */
;;;421      assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  4818              LDR      r0,|L75.104|
000006  460d              MOV      r5,r1                 ;419
000008  4284              CMP      r4,r0
00000a  d02b              BEQ      |L75.100|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d028              BEQ      |L75.100|
000012  4816              LDR      r0,|L75.108|
000014  4284              CMP      r4,r0
000016  d025              BEQ      |L75.100|
000018  4815              LDR      r0,|L75.112|
00001a  4284              CMP      r4,r0
00001c  d022              BEQ      |L75.100|
00001e  4815              LDR      r0,|L75.116|
000020  4284              CMP      r4,r0
000022  d01f              BEQ      |L75.100|
000024  4814              LDR      r0,|L75.120|
000026  4284              CMP      r4,r0
000028  d01c              BEQ      |L75.100|
00002a  4814              LDR      r0,|L75.124|
00002c  4284              CMP      r4,r0
00002e  d019              BEQ      |L75.100|
000030  4813              LDR      r0,|L75.128|
000032  4284              CMP      r4,r0
000034  d016              BEQ      |L75.100|
000036  4813              LDR      r0,|L75.132|
000038  4284              CMP      r4,r0
00003a  d013              BEQ      |L75.100|
00003c  4812              LDR      r0,|L75.136|
00003e  4284              CMP      r4,r0
000040  d010              BEQ      |L75.100|
000042  4812              LDR      r0,|L75.140|
000044  4284              CMP      r4,r0
000046  d00d              BEQ      |L75.100|
000048  4811              LDR      r0,|L75.144|
00004a  4284              CMP      r4,r0
00004c  d00a              BEQ      |L75.100|
00004e  4811              LDR      r0,|L75.148|
000050  4284              CMP      r4,r0
000052  d007              BEQ      |L75.100|
000054  4810              LDR      r0,|L75.152|
000056  4284              CMP      r4,r0
000058  d004              BEQ      |L75.100|
00005a  f24011a5          MOV      r1,#0x1a5
00005e  480f              LDR      r0,|L75.156|
000060  f7fffffe          BL       assert_failed
                  |L75.100|
;;;422      
;;;423      /* Set the Autoreload Register value */
;;;424      TIMx->ARR = Autoreload;
000064  62e5              STR      r5,[r4,#0x2c]
;;;425    }
000066  bd70              POP      {r4-r6,pc}
;;;426    
                          ENDP

                  |L75.104|
                          DCD      0x40010000
                  |L75.108|
                          DCD      0x40000400
                  |L75.112|
                          DCD      0x40000800
                  |L75.116|
                          DCD      0x40000c00
                  |L75.120|
                          DCD      0x40001000
                  |L75.124|
                          DCD      0x40001400
                  |L75.128|
                          DCD      0x40010400
                  |L75.132|
                          DCD      0x40014000
                  |L75.136|
                          DCD      0x40014400
                  |L75.140|
                          DCD      0x40014800
                  |L75.144|
                          DCD      0x40001800
                  |L75.148|
                          DCD      0x40001c00
                  |L75.152|
                          DCD      0x40002000
                  |L75.156|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SetClockDivision||, CODE, READONLY, ALIGN=2

                  TIM_SetClockDivision PROC
;;;565      */
;;;566    void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
000000  b570              PUSH     {r4-r6,lr}
;;;567    {
000002  4604              MOV      r4,r0
;;;568      /* Check the parameters */
;;;569      assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000004  481e              LDR      r0,|L76.128|
000006  460d              MOV      r5,r1                 ;567
000008  4284              CMP      r4,r0
00000a  d025              BEQ      |L76.88|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d022              BEQ      |L76.88|
000012  481c              LDR      r0,|L76.132|
000014  4284              CMP      r4,r0
000016  d01f              BEQ      |L76.88|
000018  481b              LDR      r0,|L76.136|
00001a  4284              CMP      r4,r0
00001c  d01c              BEQ      |L76.88|
00001e  481b              LDR      r0,|L76.140|
000020  4284              CMP      r4,r0
000022  d019              BEQ      |L76.88|
000024  481a              LDR      r0,|L76.144|
000026  4284              CMP      r4,r0
000028  d016              BEQ      |L76.88|
00002a  481a              LDR      r0,|L76.148|
00002c  4284              CMP      r4,r0
00002e  d013              BEQ      |L76.88|
000030  4819              LDR      r0,|L76.152|
000032  4284              CMP      r4,r0
000034  d010              BEQ      |L76.88|
000036  4819              LDR      r0,|L76.156|
000038  4284              CMP      r4,r0
00003a  d00d              BEQ      |L76.88|
00003c  4818              LDR      r0,|L76.160|
00003e  4284              CMP      r4,r0
000040  d00a              BEQ      |L76.88|
000042  4818              LDR      r0,|L76.164|
000044  4284              CMP      r4,r0
000046  d007              BEQ      |L76.88|
000048  4817              LDR      r0,|L76.168|
00004a  4284              CMP      r4,r0
00004c  d004              BEQ      |L76.88|
00004e  f2402139          MOV      r1,#0x239
000052  4816              LDR      r0,|L76.172|
000054  f7fffffe          BL       assert_failed
                  |L76.88|
;;;570      assert_param(IS_TIM_CKD_DIV(TIM_CKD));
000058  b155              CBZ      r5,|L76.112|
00005a  f5b57f80          CMP      r5,#0x100
00005e  d007              BEQ      |L76.112|
000060  f5b57f00          CMP      r5,#0x200
000064  d004              BEQ      |L76.112|
000066  f240213a          MOV      r1,#0x23a
00006a  4810              LDR      r0,|L76.172|
00006c  f7fffffe          BL       assert_failed
                  |L76.112|
;;;571    
;;;572      /* Reset the CKD Bits */
;;;573      TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
000070  8820              LDRH     r0,[r4,#0]
000072  f4207040          BIC      r0,r0,#0x300
000076  8020              STRH     r0,[r4,#0]
;;;574    
;;;575      /* Set the CKD value */
;;;576      TIMx->CR1 |= TIM_CKD;
000078  8820              LDRH     r0,[r4,#0]
00007a  4328              ORRS     r0,r0,r5
00007c  8020              STRH     r0,[r4,#0]
;;;577    }
00007e  bd70              POP      {r4-r6,pc}
;;;578    
                          ENDP

                  |L76.128|
                          DCD      0x40010000
                  |L76.132|
                          DCD      0x40000400
                  |L76.136|
                          DCD      0x40000800
                  |L76.140|
                          DCD      0x40000c00
                  |L76.144|
                          DCD      0x40010400
                  |L76.148|
                          DCD      0x40014000
                  |L76.152|
                          DCD      0x40014400
                  |L76.156|
                          DCD      0x40014800
                  |L76.160|
                          DCD      0x40001800
                  |L76.164|
                          DCD      0x40001c00
                  |L76.168|
                          DCD      0x40002000
                  |L76.172|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SetCompare1||, CODE, READONLY, ALIGN=2

                  TIM_SetCompare1 PROC
;;;1051     */
;;;1052   void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
000000  b570              PUSH     {r4-r6,lr}
;;;1053   {
000002  4604              MOV      r4,r0
;;;1054     /* Check the parameters */
;;;1055     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000004  4815              LDR      r0,|L77.92|
000006  460d              MOV      r5,r1                 ;1053
000008  4284              CMP      r4,r0
00000a  d025              BEQ      |L77.88|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d022              BEQ      |L77.88|
000012  4813              LDR      r0,|L77.96|
000014  4284              CMP      r4,r0
000016  d01f              BEQ      |L77.88|
000018  4812              LDR      r0,|L77.100|
00001a  4284              CMP      r4,r0
00001c  d01c              BEQ      |L77.88|
00001e  4812              LDR      r0,|L77.104|
000020  4284              CMP      r4,r0
000022  d019              BEQ      |L77.88|
000024  4811              LDR      r0,|L77.108|
000026  4284              CMP      r4,r0
000028  d016              BEQ      |L77.88|
00002a  4811              LDR      r0,|L77.112|
00002c  4284              CMP      r4,r0
00002e  d013              BEQ      |L77.88|
000030  4810              LDR      r0,|L77.116|
000032  4284              CMP      r4,r0
000034  d010              BEQ      |L77.88|
000036  4810              LDR      r0,|L77.120|
000038  4284              CMP      r4,r0
00003a  d00d              BEQ      |L77.88|
00003c  480f              LDR      r0,|L77.124|
00003e  4284              CMP      r4,r0
000040  d00a              BEQ      |L77.88|
000042  480f              LDR      r0,|L77.128|
000044  4284              CMP      r4,r0
000046  d007              BEQ      |L77.88|
000048  480e              LDR      r0,|L77.132|
00004a  4284              CMP      r4,r0
00004c  d004              BEQ      |L77.88|
00004e  f240411f          MOV      r1,#0x41f
000052  480d              LDR      r0,|L77.136|
000054  f7fffffe          BL       assert_failed
                  |L77.88|
;;;1056   
;;;1057     /* Set the Capture Compare1 Register value */
;;;1058     TIMx->CCR1 = Compare1;
000058  6365              STR      r5,[r4,#0x34]
;;;1059   }
00005a  bd70              POP      {r4-r6,pc}
;;;1060   
                          ENDP

                  |L77.92|
                          DCD      0x40010000
                  |L77.96|
                          DCD      0x40000400
                  |L77.100|
                          DCD      0x40000800
                  |L77.104|
                          DCD      0x40000c00
                  |L77.108|
                          DCD      0x40010400
                  |L77.112|
                          DCD      0x40014000
                  |L77.116|
                          DCD      0x40014400
                  |L77.120|
                          DCD      0x40014800
                  |L77.124|
                          DCD      0x40001800
                  |L77.128|
                          DCD      0x40001c00
                  |L77.132|
                          DCD      0x40002000
                  |L77.136|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SetCompare2||, CODE, READONLY, ALIGN=2

                  TIM_SetCompare2 PROC
;;;1067     */
;;;1068   void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
000000  b570              PUSH     {r4-r6,lr}
;;;1069   {
000002  4604              MOV      r4,r0
;;;1070     /* Check the parameters */
;;;1071     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  480f              LDR      r0,|L78.68|
000006  460d              MOV      r5,r1                 ;1069
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L78.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L78.64|
000012  480d              LDR      r0,|L78.72|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L78.64|
000018  480c              LDR      r0,|L78.76|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L78.64|
00001e  480c              LDR      r0,|L78.80|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L78.64|
000024  480b              LDR      r0,|L78.84|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L78.64|
00002a  480b              LDR      r0,|L78.88|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L78.64|
000030  480a              LDR      r0,|L78.92|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L78.64|
000036  f240412f          MOV      r1,#0x42f
00003a  4809              LDR      r0,|L78.96|
00003c  f7fffffe          BL       assert_failed
                  |L78.64|
;;;1072   
;;;1073     /* Set the Capture Compare2 Register value */
;;;1074     TIMx->CCR2 = Compare2;
000040  63a5              STR      r5,[r4,#0x38]
;;;1075   }
000042  bd70              POP      {r4-r6,pc}
;;;1076   
                          ENDP

                  |L78.68|
                          DCD      0x40010000
                  |L78.72|
                          DCD      0x40000400
                  |L78.76|
                          DCD      0x40000800
                  |L78.80|
                          DCD      0x40000c00
                  |L78.84|
                          DCD      0x40010400
                  |L78.88|
                          DCD      0x40014000
                  |L78.92|
                          DCD      0x40001800
                  |L78.96|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SetCompare3||, CODE, READONLY, ALIGN=2

                  TIM_SetCompare3 PROC
;;;1082     */
;;;1083   void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
000000  b570              PUSH     {r4-r6,lr}
;;;1084   {
000002  4604              MOV      r4,r0
;;;1085     /* Check the parameters */
;;;1086     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  480c              LDR      r0,|L79.56|
000006  460d              MOV      r5,r1                 ;1084
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L79.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L79.52|
000012  480a              LDR      r0,|L79.60|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L79.52|
000018  4809              LDR      r0,|L79.64|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L79.52|
00001e  4809              LDR      r0,|L79.68|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L79.52|
000024  4808              LDR      r0,|L79.72|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L79.52|
00002a  f240413e          MOV      r1,#0x43e
00002e  4807              LDR      r0,|L79.76|
000030  f7fffffe          BL       assert_failed
                  |L79.52|
;;;1087   
;;;1088     /* Set the Capture Compare3 Register value */
;;;1089     TIMx->CCR3 = Compare3;
000034  63e5              STR      r5,[r4,#0x3c]
;;;1090   }
000036  bd70              POP      {r4-r6,pc}
;;;1091   
                          ENDP

                  |L79.56|
                          DCD      0x40010000
                  |L79.60|
                          DCD      0x40000400
                  |L79.64|
                          DCD      0x40000800
                  |L79.68|
                          DCD      0x40000c00
                  |L79.72|
                          DCD      0x40010400
                  |L79.76|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SetCompare4||, CODE, READONLY, ALIGN=2

                  TIM_SetCompare4 PROC
;;;1097     */
;;;1098   void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
000000  b570              PUSH     {r4-r6,lr}
;;;1099   {
000002  4604              MOV      r4,r0
;;;1100     /* Check the parameters */
;;;1101     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  480c              LDR      r0,|L80.56|
000006  460d              MOV      r5,r1                 ;1099
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L80.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L80.52|
000012  480a              LDR      r0,|L80.60|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L80.52|
000018  4809              LDR      r0,|L80.64|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L80.52|
00001e  4809              LDR      r0,|L80.68|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L80.52|
000024  4808              LDR      r0,|L80.72|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L80.52|
00002a  f240414d          MOV      r1,#0x44d
00002e  4807              LDR      r0,|L80.76|
000030  f7fffffe          BL       assert_failed
                  |L80.52|
;;;1102   
;;;1103     /* Set the Capture Compare4 Register value */
;;;1104     TIMx->CCR4 = Compare4;
000034  6425              STR      r5,[r4,#0x40]
;;;1105   }
000036  bd70              POP      {r4-r6,pc}
;;;1106   
                          ENDP

                  |L80.56|
                          DCD      0x40010000
                  |L80.60|
                          DCD      0x40000400
                  |L80.64|
                          DCD      0x40000800
                  |L80.68|
                          DCD      0x40000c00
                  |L80.72|
                          DCD      0x40010400
                  |L80.76|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SetCounter||, CODE, READONLY, ALIGN=2

                  TIM_SetCounter PROC
;;;402      */
;;;403    void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
000000  b570              PUSH     {r4-r6,lr}
;;;404    {
000002  4604              MOV      r4,r0
;;;405      /* Check the parameters */
;;;406       assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  4818              LDR      r0,|L81.104|
000006  460d              MOV      r5,r1                 ;404
000008  4284              CMP      r4,r0
00000a  d02b              BEQ      |L81.100|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d028              BEQ      |L81.100|
000012  4816              LDR      r0,|L81.108|
000014  4284              CMP      r4,r0
000016  d025              BEQ      |L81.100|
000018  4815              LDR      r0,|L81.112|
00001a  4284              CMP      r4,r0
00001c  d022              BEQ      |L81.100|
00001e  4815              LDR      r0,|L81.116|
000020  4284              CMP      r4,r0
000022  d01f              BEQ      |L81.100|
000024  4814              LDR      r0,|L81.120|
000026  4284              CMP      r4,r0
000028  d01c              BEQ      |L81.100|
00002a  4814              LDR      r0,|L81.124|
00002c  4284              CMP      r4,r0
00002e  d019              BEQ      |L81.100|
000030  4813              LDR      r0,|L81.128|
000032  4284              CMP      r4,r0
000034  d016              BEQ      |L81.100|
000036  4813              LDR      r0,|L81.132|
000038  4284              CMP      r4,r0
00003a  d013              BEQ      |L81.100|
00003c  4812              LDR      r0,|L81.136|
00003e  4284              CMP      r4,r0
000040  d010              BEQ      |L81.100|
000042  4812              LDR      r0,|L81.140|
000044  4284              CMP      r4,r0
000046  d00d              BEQ      |L81.100|
000048  4811              LDR      r0,|L81.144|
00004a  4284              CMP      r4,r0
00004c  d00a              BEQ      |L81.100|
00004e  4811              LDR      r0,|L81.148|
000050  4284              CMP      r4,r0
000052  d007              BEQ      |L81.100|
000054  4810              LDR      r0,|L81.152|
000056  4284              CMP      r4,r0
000058  d004              BEQ      |L81.100|
00005a  f44f71cb          MOV      r1,#0x196
00005e  480f              LDR      r0,|L81.156|
000060  f7fffffe          BL       assert_failed
                  |L81.100|
;;;407    
;;;408      /* Set the Counter Register value */
;;;409      TIMx->CNT = Counter;
000064  6265              STR      r5,[r4,#0x24]
;;;410    }
000066  bd70              POP      {r4-r6,pc}
;;;411    
                          ENDP

                  |L81.104|
                          DCD      0x40010000
                  |L81.108|
                          DCD      0x40000400
                  |L81.112|
                          DCD      0x40000800
                  |L81.116|
                          DCD      0x40000c00
                  |L81.120|
                          DCD      0x40001000
                  |L81.124|
                          DCD      0x40001400
                  |L81.128|
                          DCD      0x40010400
                  |L81.132|
                          DCD      0x40014000
                  |L81.136|
                          DCD      0x40014400
                  |L81.140|
                          DCD      0x40014800
                  |L81.144|
                          DCD      0x40001800
                  |L81.148|
                          DCD      0x40001c00
                  |L81.152|
                          DCD      0x40002000
                  |L81.156|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SetIC1Prescaler||, CODE, READONLY, ALIGN=2

                  TIM_SetIC1Prescaler PROC
;;;2084     */
;;;2085   void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  b570              PUSH     {r4-r6,lr}
;;;2086   {
000002  4604              MOV      r4,r0
;;;2087     /* Check the parameters */
;;;2088     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000004  481e              LDR      r0,|L82.128|
000006  460d              MOV      r5,r1                 ;2086
000008  4284              CMP      r4,r0
00000a  d025              BEQ      |L82.88|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d022              BEQ      |L82.88|
000012  481c              LDR      r0,|L82.132|
000014  4284              CMP      r4,r0
000016  d01f              BEQ      |L82.88|
000018  481b              LDR      r0,|L82.136|
00001a  4284              CMP      r4,r0
00001c  d01c              BEQ      |L82.88|
00001e  481b              LDR      r0,|L82.140|
000020  4284              CMP      r4,r0
000022  d019              BEQ      |L82.88|
000024  481a              LDR      r0,|L82.144|
000026  4284              CMP      r4,r0
000028  d016              BEQ      |L82.88|
00002a  481a              LDR      r0,|L82.148|
00002c  4284              CMP      r4,r0
00002e  d013              BEQ      |L82.88|
000030  4819              LDR      r0,|L82.152|
000032  4284              CMP      r4,r0
000034  d010              BEQ      |L82.88|
000036  4819              LDR      r0,|L82.156|
000038  4284              CMP      r4,r0
00003a  d00d              BEQ      |L82.88|
00003c  4818              LDR      r0,|L82.160|
00003e  4284              CMP      r4,r0
000040  d00a              BEQ      |L82.88|
000042  4818              LDR      r0,|L82.164|
000044  4284              CMP      r4,r0
000046  d007              BEQ      |L82.88|
000048  4817              LDR      r0,|L82.168|
00004a  4284              CMP      r4,r0
00004c  d004              BEQ      |L82.88|
00004e  f6400128          MOV      r1,#0x828
000052  4816              LDR      r0,|L82.172|
000054  f7fffffe          BL       assert_failed
                  |L82.88|
;;;2089     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
000058  b155              CBZ      r5,|L82.112|
00005a  2d04              CMP      r5,#4
00005c  d008              BEQ      |L82.112|
00005e  2d08              CMP      r5,#8
000060  d006              BEQ      |L82.112|
000062  2d0c              CMP      r5,#0xc
000064  d004              BEQ      |L82.112|
000066  f6400129          MOV      r1,#0x829
00006a  4810              LDR      r0,|L82.172|
00006c  f7fffffe          BL       assert_failed
                  |L82.112|
;;;2090   
;;;2091     /* Reset the IC1PSC Bits */
;;;2092     TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
000070  8b20              LDRH     r0,[r4,#0x18]
000072  f020000c          BIC      r0,r0,#0xc
000076  8320              STRH     r0,[r4,#0x18]
;;;2093   
;;;2094     /* Set the IC1PSC value */
;;;2095     TIMx->CCMR1 |= TIM_ICPSC;
000078  8b20              LDRH     r0,[r4,#0x18]
00007a  4328              ORRS     r0,r0,r5
00007c  8320              STRH     r0,[r4,#0x18]
;;;2096   }
00007e  bd70              POP      {r4-r6,pc}
;;;2097   
                          ENDP

                  |L82.128|
                          DCD      0x40010000
                  |L82.132|
                          DCD      0x40000400
                  |L82.136|
                          DCD      0x40000800
                  |L82.140|
                          DCD      0x40000c00
                  |L82.144|
                          DCD      0x40010400
                  |L82.148|
                          DCD      0x40014000
                  |L82.152|
                          DCD      0x40014400
                  |L82.156|
                          DCD      0x40014800
                  |L82.160|
                          DCD      0x40001800
                  |L82.164|
                          DCD      0x40001c00
                  |L82.168|
                          DCD      0x40002000
                  |L82.172|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SetIC2Prescaler||, CODE, READONLY, ALIGN=2

                  TIM_SetIC2Prescaler PROC
;;;2109     */
;;;2110   void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  b570              PUSH     {r4-r6,lr}
;;;2111   {
000002  4604              MOV      r4,r0
;;;2112     /* Check the parameters */
;;;2113     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
000004  481a              LDR      r0,|L83.112|
000006  460d              MOV      r5,r1                 ;2111
000008  4284              CMP      r4,r0
00000a  d019              BEQ      |L83.64|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d016              BEQ      |L83.64|
000012  4818              LDR      r0,|L83.116|
000014  4284              CMP      r4,r0
000016  d013              BEQ      |L83.64|
000018  4817              LDR      r0,|L83.120|
00001a  4284              CMP      r4,r0
00001c  d010              BEQ      |L83.64|
00001e  4817              LDR      r0,|L83.124|
000020  4284              CMP      r4,r0
000022  d00d              BEQ      |L83.64|
000024  4816              LDR      r0,|L83.128|
000026  4284              CMP      r4,r0
000028  d00a              BEQ      |L83.64|
00002a  4816              LDR      r0,|L83.132|
00002c  4284              CMP      r4,r0
00002e  d007              BEQ      |L83.64|
000030  4815              LDR      r0,|L83.136|
000032  4284              CMP      r4,r0
000034  d004              BEQ      |L83.64|
000036  f6400141          MOV      r1,#0x841
00003a  4814              LDR      r0,|L83.140|
00003c  f7fffffe          BL       assert_failed
                  |L83.64|
;;;2114     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
000040  b155              CBZ      r5,|L83.88|
000042  2d04              CMP      r5,#4
000044  d008              BEQ      |L83.88|
000046  2d08              CMP      r5,#8
000048  d006              BEQ      |L83.88|
00004a  2d0c              CMP      r5,#0xc
00004c  d004              BEQ      |L83.88|
00004e  f6400142          MOV      r1,#0x842
000052  480e              LDR      r0,|L83.140|
000054  f7fffffe          BL       assert_failed
                  |L83.88|
;;;2115   
;;;2116     /* Reset the IC2PSC Bits */
;;;2117     TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
000058  8b20              LDRH     r0,[r4,#0x18]
00005a  f4206040          BIC      r0,r0,#0xc00
00005e  8320              STRH     r0,[r4,#0x18]
;;;2118   
;;;2119     /* Set the IC2PSC value */
;;;2120     TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
000060  8b20              LDRH     r0,[r4,#0x18]
000062  f64f71ff          MOV      r1,#0xffff
000066  ea012105          AND      r1,r1,r5,LSL #8
00006a  4308              ORRS     r0,r0,r1
00006c  8320              STRH     r0,[r4,#0x18]
;;;2121   }
00006e  bd70              POP      {r4-r6,pc}
;;;2122   
                          ENDP

                  |L83.112|
                          DCD      0x40010000
                  |L83.116|
                          DCD      0x40000400
                  |L83.120|
                          DCD      0x40000800
                  |L83.124|
                          DCD      0x40000c00
                  |L83.128|
                          DCD      0x40010400
                  |L83.132|
                          DCD      0x40014000
                  |L83.136|
                          DCD      0x40001800
                  |L83.140|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SetIC3Prescaler||, CODE, READONLY, ALIGN=2

                  TIM_SetIC3Prescaler PROC
;;;2133     */
;;;2134   void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  b570              PUSH     {r4-r6,lr}
;;;2135   {
000002  4604              MOV      r4,r0
;;;2136     /* Check the parameters */
;;;2137     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4815              LDR      r0,|L84.92|
000006  460d              MOV      r5,r1                 ;2135
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L84.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L84.52|
000012  4813              LDR      r0,|L84.96|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L84.52|
000018  4812              LDR      r0,|L84.100|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L84.52|
00001e  4812              LDR      r0,|L84.104|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L84.52|
000024  4811              LDR      r0,|L84.108|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L84.52|
00002a  f6400159          MOV      r1,#0x859
00002e  4810              LDR      r0,|L84.112|
000030  f7fffffe          BL       assert_failed
                  |L84.52|
;;;2138     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
000034  b155              CBZ      r5,|L84.76|
000036  2d04              CMP      r5,#4
000038  d008              BEQ      |L84.76|
00003a  2d08              CMP      r5,#8
00003c  d006              BEQ      |L84.76|
00003e  2d0c              CMP      r5,#0xc
000040  d004              BEQ      |L84.76|
000042  f640015a          MOV      r1,#0x85a
000046  480a              LDR      r0,|L84.112|
000048  f7fffffe          BL       assert_failed
                  |L84.76|
;;;2139   
;;;2140     /* Reset the IC3PSC Bits */
;;;2141     TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
00004c  8ba0              LDRH     r0,[r4,#0x1c]
00004e  f020000c          BIC      r0,r0,#0xc
000052  83a0              STRH     r0,[r4,#0x1c]
;;;2142   
;;;2143     /* Set the IC3PSC value */
;;;2144     TIMx->CCMR2 |= TIM_ICPSC;
000054  8ba0              LDRH     r0,[r4,#0x1c]
000056  4328              ORRS     r0,r0,r5
000058  83a0              STRH     r0,[r4,#0x1c]
;;;2145   }
00005a  bd70              POP      {r4-r6,pc}
;;;2146   
                          ENDP

                  |L84.92|
                          DCD      0x40010000
                  |L84.96|
                          DCD      0x40000400
                  |L84.100|
                          DCD      0x40000800
                  |L84.104|
                          DCD      0x40000c00
                  |L84.108|
                          DCD      0x40010400
                  |L84.112|
                          DCD      ||.conststring||

                          AREA ||i.TIM_SetIC4Prescaler||, CODE, READONLY, ALIGN=2

                  TIM_SetIC4Prescaler PROC
;;;2157     */
;;;2158   void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  b570              PUSH     {r4-r6,lr}
;;;2159   {  
000002  4604              MOV      r4,r0
;;;2160     /* Check the parameters */
;;;2161     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
000004  4817              LDR      r0,|L85.100|
000006  460d              MOV      r5,r1                 ;2159
000008  4284              CMP      r4,r0
00000a  d013              BEQ      |L85.52|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d010              BEQ      |L85.52|
000012  4815              LDR      r0,|L85.104|
000014  4284              CMP      r4,r0
000016  d00d              BEQ      |L85.52|
000018  4814              LDR      r0,|L85.108|
00001a  4284              CMP      r4,r0
00001c  d00a              BEQ      |L85.52|
00001e  4814              LDR      r0,|L85.112|
000020  4284              CMP      r4,r0
000022  d007              BEQ      |L85.52|
000024  4813              LDR      r0,|L85.116|
000026  4284              CMP      r4,r0
000028  d004              BEQ      |L85.52|
00002a  f6400171          MOV      r1,#0x871
00002e  4812              LDR      r0,|L85.120|
000030  f7fffffe          BL       assert_failed
                  |L85.52|
;;;2162     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
000034  b155              CBZ      r5,|L85.76|
000036  2d04              CMP      r5,#4
000038  d008              BEQ      |L85.76|
00003a  2d08              CMP      r5,#8
00003c  d006              BEQ      |L85.76|
00003e  2d0c              CMP      r5,#0xc
000040  d004              BEQ      |L85.76|
000042  f6400172          MOV      r1,#0x872
000046  480c              LDR      r0,|L85.120|
000048  f7fffffe          BL       assert_failed
                  |L85.76|
;;;2163   
;;;2164     /* Reset the IC4PSC Bits */
;;;2165     TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
00004c  8ba0              LDRH     r0,[r4,#0x1c]
00004e  f4206040          BIC      r0,r0,#0xc00
000052  83a0              STRH     r0,[r4,#0x1c]
;;;2166   
;;;2167     /* Set the IC4PSC value */
;;;2168     TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
000054  8ba0              LDRH     r0,[r4,#0x1c]
000056  f64f71ff          MOV      r1,#0xffff
00005a  ea012105          AND      r1,r1,r5,LSL #8
00005e  4308              ORRS     r0,r0,r1
000060  83a0              STRH     r0,[r4,#0x1c]
;;;2169   }
000062  bd70              POP      {r4-r6,pc}
;;;2170   /**
                          ENDP

                  |L85.100|
                          DCD      0x40010000
                  |L85.104|
                          DCD      0x40000400
                  |L85.108|
                          DCD      0x40000800
                  |L85.112|
                          DCD      0x40000c00
                  |L85.116|
                          DCD      0x40010400
                  |L85.120|
                          DCD      ||.conststring||

                          AREA ||i.TIM_TIxExternalClockConfig||, CODE, READONLY, ALIGN=2

                  TIM_TIxExternalClockConfig PROC
;;;2723     */
;;;2724   void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2725                                   uint16_t TIM_ICPolarity, uint16_t ICFilter)
;;;2726   {
000004  4604              MOV      r4,r0
;;;2727     /* Check the parameters */
;;;2728     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
000006  4829              LDR      r0,|L86.172|
000008  461e              MOV      r6,r3                 ;2726
00000a  4615              MOV      r5,r2                 ;2726
00000c  460f              MOV      r7,r1                 ;2726
00000e  4284              CMP      r4,r0
000010  d025              BEQ      |L86.94|
000012  f1b44f80          CMP      r4,#0x40000000
000016  d022              BEQ      |L86.94|
000018  4825              LDR      r0,|L86.176|
00001a  4284              CMP      r4,r0
00001c  d01f              BEQ      |L86.94|
00001e  4825              LDR      r0,|L86.180|
000020  4284              CMP      r4,r0
000022  d01c              BEQ      |L86.94|
000024  4824              LDR      r0,|L86.184|
000026  4284              CMP      r4,r0
000028  d019              BEQ      |L86.94|
00002a  4824              LDR      r0,|L86.188|
00002c  4284              CMP      r4,r0
00002e  d016              BEQ      |L86.94|
000030  4823              LDR      r0,|L86.192|
000032  4284              CMP      r4,r0
000034  d013              BEQ      |L86.94|
000036  4823              LDR      r0,|L86.196|
000038  4284              CMP      r4,r0
00003a  d010              BEQ      |L86.94|
00003c  4822              LDR      r0,|L86.200|
00003e  4284              CMP      r4,r0
000040  d00d              BEQ      |L86.94|
000042  4822              LDR      r0,|L86.204|
000044  4284              CMP      r4,r0
000046  d00a              BEQ      |L86.94|
000048  4821              LDR      r0,|L86.208|
00004a  4284              CMP      r4,r0
00004c  d007              BEQ      |L86.94|
00004e  4821              LDR      r0,|L86.212|
000050  4284              CMP      r4,r0
000052  d004              BEQ      |L86.94|
000054  f64021a8          MOV      r1,#0xaa8
000058  481f              LDR      r0,|L86.216|
00005a  f7fffffe          BL       assert_failed
                  |L86.94|
;;;2729     assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
00005e  b145              CBZ      r5,|L86.114|
000060  2d02              CMP      r5,#2
000062  d006              BEQ      |L86.114|
000064  2d0a              CMP      r5,#0xa
000066  d004              BEQ      |L86.114|
000068  f64021a9          MOV      r1,#0xaa9
00006c  481a              LDR      r0,|L86.216|
00006e  f7fffffe          BL       assert_failed
                  |L86.114|
;;;2730     assert_param(IS_TIM_IC_FILTER(ICFilter));
000072  2e0f              CMP      r6,#0xf
000074  d904              BLS      |L86.128|
000076  f64021aa          MOV      r1,#0xaaa
00007a  4817              LDR      r0,|L86.216|
00007c  f7fffffe          BL       assert_failed
                  |L86.128|
;;;2731   
;;;2732     /* Configure the Timer Input Clock Source */
;;;2733     if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
000080  2f60              CMP      r7,#0x60
;;;2734     {
;;;2735       TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
;;;2736     }
;;;2737     else
;;;2738     {
;;;2739       TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
000082  4633              MOV      r3,r6
000084  f04f0201          MOV      r2,#1
000088  4629              MOV      r1,r5
00008a  4620              MOV      r0,r4
00008c  d00b              BEQ      |L86.166|
00008e  f7fffffe          BL       TI1_Config
                  |L86.146|
;;;2740     }
;;;2741     /* Select the Trigger source */
;;;2742     TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
000092  4639              MOV      r1,r7
000094  4620              MOV      r0,r4
000096  f7fffffe          BL       TIM_SelectInputTrigger
;;;2743     /* Select the External clock mode1 */
;;;2744     TIMx->SMCR |= TIM_SlaveMode_External1;
00009a  8920              LDRH     r0,[r4,#8]
00009c  f0400007          ORR      r0,r0,#7
0000a0  8120              STRH     r0,[r4,#8]
;;;2745   }
0000a2  e8bd81f0          POP      {r4-r8,pc}
                  |L86.166|
0000a6  f7fffffe          BL       TI2_Config
0000aa  e7f2              B        |L86.146|
;;;2746   
                          ENDP

                  |L86.172|
                          DCD      0x40010000
                  |L86.176|
                          DCD      0x40000400
                  |L86.180|
                          DCD      0x40000800
                  |L86.184|
                          DCD      0x40000c00
                  |L86.188|
                          DCD      0x40010400
                  |L86.192|
                          DCD      0x40014000
                  |L86.196|
                          DCD      0x40014400
                  |L86.200|
                          DCD      0x40014800
                  |L86.204|
                          DCD      0x40001800
                  |L86.208|
                          DCD      0x40001c00
                  |L86.212|
                          DCD      0x40002000
                  |L86.216|
                          DCD      ||.conststring||

                          AREA ||i.TIM_TimeBaseInit||, CODE, READONLY, ALIGN=2

                  TIM_TimeBaseInit PROC
;;;281      */
;;;282    void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;283    {
;;;284      uint16_t tmpcr1 = 0;
;;;285    
;;;286      /* Check the parameters */
;;;287      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
000004  4f3d              LDR      r7,|L87.252|
000006  f8df80f8          LDR      r8,|L87.256|
00000a  f8df90f8          LDR      r9,|L87.260|
00000e  f8dfa0f8          LDR      r10,|L87.264|
000012  4e3e              LDR      r6,|L87.268|
000014  460d              MOV      r5,r1                 ;283
000016  4604              MOV      r4,r0                 ;283
000018  ea4f4bb7          ROR      r11,r7,#18
00001c  42b8              CMP      r0,r7
00001e  d026              BEQ      |L87.110|
000020  f1b44f80          CMP      r4,#0x40000000
000024  d023              BEQ      |L87.110|
000026  4544              CMP      r4,r8
000028  d021              BEQ      |L87.110|
00002a  454c              CMP      r4,r9
00002c  d01f              BEQ      |L87.110|
00002e  4554              CMP      r4,r10
000030  d01d              BEQ      |L87.110|
000032  455c              CMP      r4,r11
000034  d01b              BEQ      |L87.110|
000036  4836              LDR      r0,|L87.272|
000038  4284              CMP      r4,r0
00003a  d018              BEQ      |L87.110|
00003c  42b4              CMP      r4,r6
00003e  d016              BEQ      |L87.110|
000040  4834              LDR      r0,|L87.276|
000042  4284              CMP      r4,r0
000044  d013              BEQ      |L87.110|
000046  4834              LDR      r0,|L87.280|
000048  4284              CMP      r4,r0
00004a  d010              BEQ      |L87.110|
00004c  4833              LDR      r0,|L87.284|
00004e  4284              CMP      r4,r0
000050  d00d              BEQ      |L87.110|
000052  4833              LDR      r0,|L87.288|
000054  4284              CMP      r4,r0
000056  d00a              BEQ      |L87.110|
000058  4832              LDR      r0,|L87.292|
00005a  4284              CMP      r4,r0
00005c  d007              BEQ      |L87.110|
00005e  4832              LDR      r0,|L87.296|
000060  4284              CMP      r4,r0
000062  d004              BEQ      |L87.110|
000064  f240111f          MOV      r1,#0x11f
000068  4830              LDR      r0,|L87.300|
00006a  f7fffffe          BL       assert_failed
                  |L87.110|
;;;288      assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
00006e  8868              LDRH     r0,[r5,#2]
000070  b160              CBZ      r0,|L87.140|
000072  2810              CMP      r0,#0x10
000074  d00a              BEQ      |L87.140|
000076  2820              CMP      r0,#0x20
000078  d008              BEQ      |L87.140|
00007a  2840              CMP      r0,#0x40
00007c  d006              BEQ      |L87.140|
00007e  2860              CMP      r0,#0x60
000080  d004              BEQ      |L87.140|
000082  f44f7190          MOV      r1,#0x120
000086  4829              LDR      r0,|L87.300|
000088  f7fffffe          BL       assert_failed
                  |L87.140|
;;;289      assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
00008c  8928              LDRH     r0,[r5,#8]
00008e  b150              CBZ      r0,|L87.166|
000090  f5b07f80          CMP      r0,#0x100
000094  d007              BEQ      |L87.166|
000096  f5b07f00          CMP      r0,#0x200
00009a  d004              BEQ      |L87.166|
00009c  f2401121          MOV      r1,#0x121
0000a0  4822              LDR      r0,|L87.300|
0000a2  f7fffffe          BL       assert_failed
                  |L87.166|
;;;290    
;;;291      tmpcr1 = TIMx->CR1;  
0000a6  8820              LDRH     r0,[r4,#0]
;;;292    
;;;293      if((TIMx == TIM1) || (TIMx == TIM8)||
0000a8  42bc              CMP      r4,r7
0000aa  d00a              BEQ      |L87.194|
0000ac  42b4              CMP      r4,r6
0000ae  d008              BEQ      |L87.194|
;;;294         (TIMx == TIM2) || (TIMx == TIM3)||
0000b0  f1b44f80          CMP      r4,#0x40000000
0000b4  d005              BEQ      |L87.194|
0000b6  4544              CMP      r4,r8
0000b8  d003              BEQ      |L87.194|
;;;295         (TIMx == TIM4) || (TIMx == TIM5)) 
0000ba  454c              CMP      r4,r9
0000bc  d001              BEQ      |L87.194|
0000be  4554              CMP      r4,r10
0000c0  d103              BNE      |L87.202|
                  |L87.194|
;;;296      {
;;;297        /* Select the Counter Mode */
;;;298        tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
0000c2  f0200170          BIC      r1,r0,#0x70
;;;299        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
0000c6  8868              LDRH     r0,[r5,#2]
0000c8  4308              ORRS     r0,r0,r1
                  |L87.202|
;;;300      }
;;;301     
;;;302      if((TIMx != TIM6) && (TIMx != TIM7))
0000ca  455c              CMP      r4,r11
0000cc  d006              BEQ      |L87.220|
0000ce  4910              LDR      r1,|L87.272|
0000d0  428c              CMP      r4,r1
0000d2  d003              BEQ      |L87.220|
;;;303      {
;;;304        /* Set the clock division */
;;;305        tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
0000d4  f4207140          BIC      r1,r0,#0x300
;;;306        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
0000d8  8928              LDRH     r0,[r5,#8]
0000da  4308              ORRS     r0,r0,r1
                  |L87.220|
;;;307      }
;;;308    
;;;309      TIMx->CR1 = tmpcr1;
0000dc  8020              STRH     r0,[r4,#0]
;;;310    
;;;311      /* Set the Autoreload value */
;;;312      TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
0000de  6868              LDR      r0,[r5,#4]
0000e0  62e0              STR      r0,[r4,#0x2c]
;;;313     
;;;314      /* Set the Prescaler value */
;;;315      TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
0000e2  8828              LDRH     r0,[r5,#0]
0000e4  8520              STRH     r0,[r4,#0x28]
;;;316        
;;;317      if ((TIMx == TIM1) || (TIMx == TIM8))  
0000e6  42bc              CMP      r4,r7
0000e8  d001              BEQ      |L87.238|
0000ea  42b4              CMP      r4,r6
0000ec  d101              BNE      |L87.242|
                  |L87.238|
;;;318      {
;;;319        /* Set the Repetition Counter value */
;;;320        TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
0000ee  7aa8              LDRB     r0,[r5,#0xa]
0000f0  8620              STRH     r0,[r4,#0x30]
                  |L87.242|
;;;321      }
;;;322    
;;;323      /* Generate an update event to reload the Prescaler 
;;;324         and the repetition counter(only for TIM1 and TIM8) value immediatly */
;;;325      TIMx->EGR = TIM_PSCReloadMode_Immediate;          
0000f2  2001              MOVS     r0,#1
0000f4  82a0              STRH     r0,[r4,#0x14]
;;;326    }
0000f6  e8bd9ff0          POP      {r4-r12,pc}
;;;327    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L87.252|
                          DCD      0x40010000
                  |L87.256|
                          DCD      0x40000400
                  |L87.260|
                          DCD      0x40000800
                  |L87.264|
                          DCD      0x40000c00
                  |L87.268|
                          DCD      0x40010400
                  |L87.272|
                          DCD      0x40001400
                  |L87.276|
                          DCD      0x40014000
                  |L87.280|
                          DCD      0x40014400
                  |L87.284|
                          DCD      0x40014800
                  |L87.288|
                          DCD      0x40001800
                  |L87.292|
                          DCD      0x40001c00
                  |L87.296|
                          DCD      0x40002000
                  |L87.300|
                          DCD      ||.conststring||

                          AREA ||i.TIM_TimeBaseStructInit||, CODE, READONLY, ALIGN=1

                  TIM_TimeBaseStructInit PROC
;;;333      */
;;;334    void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;335    {
;;;336      /* Set the default configuration */
;;;337      TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
;;;338      TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
000004  6041              STR      r1,[r0,#4]
000006  2100              MOVS     r1,#0
000008  8001              STRH     r1,[r0,#0]
;;;339      TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
00000a  8101              STRH     r1,[r0,#8]
;;;340      TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
00000c  8041              STRH     r1,[r0,#2]
;;;341      TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
00000e  7281              STRB     r1,[r0,#0xa]
;;;342    }
000010  4770              BX       lr
;;;343    
                          ENDP


                          AREA ||i.TIM_UpdateDisableConfig||, CODE, READONLY, ALIGN=2

                  TIM_UpdateDisableConfig PROC
;;;461      */
;;;462    void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;463    {
000002  4604              MOV      r4,r0
;;;464      /* Check the parameters */
;;;465      assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  4820              LDR      r0,|L89.136|
000006  460d              MOV      r5,r1                 ;463
000008  4284              CMP      r4,r0
00000a  d02b              BEQ      |L89.100|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d028              BEQ      |L89.100|
000012  481e              LDR      r0,|L89.140|
000014  4284              CMP      r4,r0
000016  d025              BEQ      |L89.100|
000018  481d              LDR      r0,|L89.144|
00001a  4284              CMP      r4,r0
00001c  d022              BEQ      |L89.100|
00001e  481d              LDR      r0,|L89.148|
000020  4284              CMP      r4,r0
000022  d01f              BEQ      |L89.100|
000024  481c              LDR      r0,|L89.152|
000026  4284              CMP      r4,r0
000028  d01c              BEQ      |L89.100|
00002a  481c              LDR      r0,|L89.156|
00002c  4284              CMP      r4,r0
00002e  d019              BEQ      |L89.100|
000030  481b              LDR      r0,|L89.160|
000032  4284              CMP      r4,r0
000034  d016              BEQ      |L89.100|
000036  481b              LDR      r0,|L89.164|
000038  4284              CMP      r4,r0
00003a  d013              BEQ      |L89.100|
00003c  481a              LDR      r0,|L89.168|
00003e  4284              CMP      r4,r0
000040  d010              BEQ      |L89.100|
000042  481a              LDR      r0,|L89.172|
000044  4284              CMP      r4,r0
000046  d00d              BEQ      |L89.100|
000048  4819              LDR      r0,|L89.176|
00004a  4284              CMP      r4,r0
00004c  d00a              BEQ      |L89.100|
00004e  4819              LDR      r0,|L89.180|
000050  4284              CMP      r4,r0
000052  d007              BEQ      |L89.100|
000054  4818              LDR      r0,|L89.184|
000056  4284              CMP      r4,r0
000058  d004              BEQ      |L89.100|
00005a  f24011d1          MOV      r1,#0x1d1
00005e  4817              LDR      r0,|L89.188|
000060  f7fffffe          BL       assert_failed
                  |L89.100|
;;;466      assert_param(IS_FUNCTIONAL_STATE(NewState));
000064  b155              CBZ      r5,|L89.124|
000066  2d01              CMP      r5,#1
000068  d004              BEQ      |L89.116|
00006a  f44f71e9          MOV      r1,#0x1d2
00006e  4813              LDR      r0,|L89.188|
000070  f7fffffe          BL       assert_failed
                  |L89.116|
;;;467    
;;;468      if (NewState != DISABLE)
;;;469      {
;;;470        /* Set the Update Disable Bit */
;;;471        TIMx->CR1 |= TIM_CR1_UDIS;
000074  8820              LDRH     r0,[r4,#0]
000076  f0400002          ORR      r0,r0,#2
00007a  e002              B        |L89.130|
                  |L89.124|
;;;472      }
;;;473      else
;;;474      {
;;;475        /* Reset the Update Disable Bit */
;;;476        TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
00007c  8820              LDRH     r0,[r4,#0]
00007e  f0200002          BIC      r0,r0,#2
                  |L89.130|
000082  8020              STRH     r0,[r4,#0]            ;471
;;;477      }
;;;478    }
000084  bd70              POP      {r4-r6,pc}
;;;479    
                          ENDP

000086  0000              DCW      0x0000
                  |L89.136|
                          DCD      0x40010000
                  |L89.140|
                          DCD      0x40000400
                  |L89.144|
                          DCD      0x40000800
                  |L89.148|
                          DCD      0x40000c00
                  |L89.152|
                          DCD      0x40001000
                  |L89.156|
                          DCD      0x40001400
                  |L89.160|
                          DCD      0x40010400
                  |L89.164|
                          DCD      0x40014000
                  |L89.168|
                          DCD      0x40014400
                  |L89.172|
                          DCD      0x40014800
                  |L89.176|
                          DCD      0x40001800
                  |L89.180|
                          DCD      0x40001c00
                  |L89.184|
                          DCD      0x40002000
                  |L89.188|
                          DCD      ||.conststring||

                          AREA ||i.TIM_UpdateRequestConfig||, CODE, READONLY, ALIGN=2

                  TIM_UpdateRequestConfig PROC
;;;490      */
;;;491    void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
000000  b570              PUSH     {r4-r6,lr}
;;;492    {
000002  4604              MOV      r4,r0
;;;493      /* Check the parameters */
;;;494      assert_param(IS_TIM_ALL_PERIPH(TIMx));
000004  4820              LDR      r0,|L90.136|
000006  460d              MOV      r5,r1                 ;492
000008  4284              CMP      r4,r0
00000a  d02b              BEQ      |L90.100|
00000c  f1b44f80          CMP      r4,#0x40000000
000010  d028              BEQ      |L90.100|
000012  481e              LDR      r0,|L90.140|
000014  4284              CMP      r4,r0
000016  d025              BEQ      |L90.100|
000018  481d              LDR      r0,|L90.144|
00001a  4284              CMP      r4,r0
00001c  d022              BEQ      |L90.100|
00001e  481d              LDR      r0,|L90.148|
000020  4284              CMP      r4,r0
000022  d01f              BEQ      |L90.100|
000024  481c              LDR      r0,|L90.152|
000026  4284              CMP      r4,r0
000028  d01c              BEQ      |L90.100|
00002a  481c              LDR      r0,|L90.156|
00002c  4284              CMP      r4,r0
00002e  d019              BEQ      |L90.100|
000030  481b              LDR      r0,|L90.160|
000032  4284              CMP      r4,r0
000034  d016              BEQ      |L90.100|
000036  481b              LDR      r0,|L90.164|
000038  4284              CMP      r4,r0
00003a  d013              BEQ      |L90.100|
00003c  481a              LDR      r0,|L90.168|
00003e  4284              CMP      r4,r0
000040  d010              BEQ      |L90.100|
000042  481a              LDR      r0,|L90.172|
000044  4284              CMP      r4,r0
000046  d00d              BEQ      |L90.100|
000048  4819              LDR      r0,|L90.176|
00004a  4284              CMP      r4,r0
00004c  d00a              BEQ      |L90.100|
00004e  4819              LDR      r0,|L90.180|
000050  4284              CMP      r4,r0
000052  d007              BEQ      |L90.100|
000054  4818              LDR      r0,|L90.184|
000056  4284              CMP      r4,r0
000058  d004              BEQ      |L90.100|
00005a  f44f71f7          MOV      r1,#0x1ee
00005e  4817              LDR      r0,|L90.188|
000060  f7fffffe          BL       assert_failed
                  |L90.100|
;;;495      assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
000064  b155              CBZ      r5,|L90.124|
000066  2d01              CMP      r5,#1
000068  d004              BEQ      |L90.116|
00006a  f24011ef          MOV      r1,#0x1ef
00006e  4813              LDR      r0,|L90.188|
000070  f7fffffe          BL       assert_failed
                  |L90.116|
;;;496    
;;;497      if (TIM_UpdateSource != TIM_UpdateSource_Global)
;;;498      {
;;;499        /* Set the URS Bit */
;;;500        TIMx->CR1 |= TIM_CR1_URS;
000074  8820              LDRH     r0,[r4,#0]
000076  f0400004          ORR      r0,r0,#4
00007a  e002              B        |L90.130|
                  |L90.124|
;;;501      }
;;;502      else
;;;503      {
;;;504        /* Reset the URS Bit */
;;;505        TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
00007c  8820              LDRH     r0,[r4,#0]
00007e  f0200004          BIC      r0,r0,#4
                  |L90.130|
000082  8020              STRH     r0,[r4,#0]            ;500
;;;506      }
;;;507    }
000084  bd70              POP      {r4-r6,pc}
;;;508    
                          ENDP

000086  0000              DCW      0x0000
                  |L90.136|
                          DCD      0x40010000
                  |L90.140|
                          DCD      0x40000400
                  |L90.144|
                          DCD      0x40000800
                  |L90.148|
                          DCD      0x40000c00
                  |L90.152|
                          DCD      0x40001000
                  |L90.156|
                          DCD      0x40001400
                  |L90.160|
                          DCD      0x40010400
                  |L90.164|
                          DCD      0x40014000
                  |L90.168|
                          DCD      0x40014400
                  |L90.172|
                          DCD      0x40014800
                  |L90.176|
                          DCD      0x40001800
                  |L90.180|
                          DCD      0x40001c00
                  |L90.184|
                          DCD      0x40002000
                  |L90.188|
                          DCD      ||.conststring||

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2e2e5c4f          DCB      "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_"
000004  535c6273
000008  705c7374
00000c  6d333266
000010  3430785c
000014  4c696272
000018  61726965
00001c  735c5354
000020  4d333246
000024  3478785f
000028  53746450
00002c  65726970
000030  685f    
000032  44726976          DCB      "Driver\\src\\stm32f4xx_tim.c",0
000036  65725c73
00003a  72635c73
00003e  746d3332
000042  66347878
000046  5f74696d
00004a  2e6300  

;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_tim.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_tim_c_c458916b____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f4xx_tim_c_c458916b____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_tim_c_c458916b____REVSH|
#line 128
|__asm___15_stm32f4xx_tim_c_c458916b____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
