; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\finsh_node.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\finsh_node.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\finsh_node.crf ..\OS\components\finsh\finsh_node.c]
                          THUMB

                          AREA ||i.finsh_node_allocate||, CODE, READONLY, ALIGN=2

                  finsh_node_allocate PROC
;;;44     
;;;45     struct finsh_node* finsh_node_allocate(u_char type)
000000  4a0a              LDR      r2,|L1.44|
;;;46     {
;;;47     	int i;
;;;48     
;;;49     	/* find an empty entry */
;;;50     	for (i = 0; i < FINSH_NODE_MAX; i ++)
000002  2100              MOVS     r1,#0
                  |L1.4|
;;;51     	{
;;;52     		if (global_node_table[i].node_type == FINSH_NODE_UNKNOWN) break;
000004  eb010381          ADD      r3,r1,r1,LSL #2
000008  f8123023          LDRB     r3,[r2,r3,LSL #2]
00000c  b113              CBZ      r3,|L1.20|
00000e  1c49              ADDS     r1,r1,#1
000010  2910              CMP      r1,#0x10              ;50
000012  dbf7              BLT      |L1.4|
                  |L1.20|
;;;53     	}
;;;54     
;;;55     	if (i == FINSH_NODE_MAX) return NULL;
000014  2910              CMP      r1,#0x10
000016  d006              BEQ      |L1.38|
;;;56     
;;;57     	/* fill type field */
;;;58     	global_node_table[i].node_type = type;
000018  eb010181          ADD      r1,r1,r1,LSL #2
00001c  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;59     
;;;60     	/* return this allocated node */
;;;61     	return &global_node_table[i];
000020  eb020081          ADD      r0,r2,r1,LSL #2
;;;62     }
000024  4770              BX       lr
                  |L1.38|
000026  2000              MOVS     r0,#0                 ;55
000028  4770              BX       lr
;;;63     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      ||.bss||

                          AREA ||i.finsh_node_init||, CODE, READONLY, ALIGN=2

                  finsh_node_init PROC
;;;37     
;;;38     int finsh_node_init()
000000  b510              PUSH     {r4,lr}
;;;39     {
;;;40     	memset(global_node_table, 0, sizeof(global_node_table));
000002  f44f71a0          MOV      r1,#0x140
000006  4802              LDR      r0,|L2.16|
000008  f7fffffe          BL       __aeabi_memclr4
;;;41     
;;;42     	return 0;
00000c  2000              MOVS     r0,#0
;;;43     }
00000e  bd10              POP      {r4,pc}
;;;44     
                          ENDP

                  |L2.16|
                          DCD      ||.bss||

                          AREA ||i.finsh_node_new_char||, CODE, READONLY, ALIGN=1

                  finsh_node_new_char PROC
;;;124    
;;;125    struct finsh_node* finsh_node_new_char(char c)
000000  b510              PUSH     {r4,lr}
;;;126    {
000002  4604              MOV      r4,r0
;;;127    	struct finsh_node* node;
;;;128    
;;;129    	node = finsh_node_allocate(FINSH_NODE_VALUE_CHAR);
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       finsh_node_allocate
;;;130    	if (node == NULL)
00000a  b108              CBZ      r0,|L3.16|
;;;131    	{
;;;132    		finsh_error_set(FINSH_ERROR_MEMORY_FULL);
;;;133    		return NULL;
;;;134    	}
;;;135    
;;;136    	node->value.char_value = c;
00000c  7104              STRB     r4,[r0,#4]
;;;137    	return node;
;;;138    }
00000e  bd10              POP      {r4,pc}
                  |L3.16|
000010  2006              MOVS     r0,#6                 ;132
000012  f7fffffe          BL       finsh_error_set
000016  2000              MOVS     r0,#0                 ;133
000018  bd10              POP      {r4,pc}
;;;139    
                          ENDP


                          AREA ||i.finsh_node_new_id||, CODE, READONLY, ALIGN=1

                  finsh_node_new_id PROC
;;;63     
;;;64     struct finsh_node* finsh_node_new_id(char* id)
000000  b570              PUSH     {r4-r6,lr}
;;;65     {
000002  4606              MOV      r6,r0
;;;66     	struct finsh_node* node;
;;;67     	void*  symbol;
;;;68     	unsigned char type;
;;;69     
;;;70     	symbol	= NULL;
;;;71     	type	= 0;
;;;72     	node	= NULL;
000004  2500              MOVS     r5,#0
;;;73     
;;;74     	/* lookup variable firstly */
;;;75     	symbol = (void*)finsh_var_lookup(id);
000006  f7fffffe          BL       finsh_var_lookup
00000a  0004              MOVS     r4,r0
;;;76     	if (symbol == NULL)
00000c  d00c              BEQ      |L4.40|
;;;77     	{
;;;78     		/* then lookup system variable */
;;;79     		symbol = (void*)finsh_sysvar_lookup(id);
;;;80     		if (symbol == NULL)
;;;81     		{
;;;82     			/* then lookup system call */
;;;83     			symbol = (void*)finsh_syscall_lookup(id);
;;;84     			if (symbol != NULL) type = FINSH_IDTYPE_SYSCALL;
;;;85     		}
;;;86     		else type = FINSH_IDTYPE_SYSVAR;
;;;87     	}
;;;88     	else type = FINSH_IDTYPE_VAR;
00000e  2601              MOVS     r6,#1
                  |L4.16|
;;;89     
;;;90     	if (symbol != NULL)
;;;91     	{
;;;92     		/* allocate a new node */
;;;93     		node = finsh_node_allocate(FINSH_NODE_ID);
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       finsh_node_allocate
000016  0005              MOVS     r5,r0
;;;94     
;;;95     		/* allocate node error */
;;;96     		if (node == NULL)
000018  d014              BEQ      |L4.68|
;;;97     		{
;;;98     			finsh_error_set(FINSH_ERROR_MEMORY_FULL);
;;;99     			return NULL;
;;;100    		}
;;;101    
;;;102    		/* fill node value according type */
;;;103    		switch (type)
00001a  2e01              CMP      r6,#1
00001c  d017              BEQ      |L4.78|
00001e  2e02              CMP      r6,#2
000020  d015              BEQ      |L4.78|
000022  2e04              CMP      r6,#4
000024  d114              BNE      |L4.80|
000026  e012              B        |L4.78|
                  |L4.40|
000028  4630              MOV      r0,r6                 ;79
00002a  f7fffffe          BL       finsh_sysvar_lookup
00002e  0004              MOVS     r4,r0                 ;79
000030  d001              BEQ      |L4.54|
000032  2602              MOVS     r6,#2                 ;86
000034  e7ec              B        |L4.16|
                  |L4.54|
000036  4630              MOV      r0,r6                 ;83
000038  f7fffffe          BL       finsh_syscall_lookup
00003c  0004              MOVS     r4,r0                 ;83
00003e  d009              BEQ      |L4.84|
000040  2604              MOVS     r6,#4                 ;84
000042  e7e5              B        |L4.16|
                  |L4.68|
000044  2006              MOVS     r0,#6                 ;98
000046  f7fffffe          BL       finsh_error_set
00004a  2000              MOVS     r0,#0                 ;99
;;;104    		{
;;;105    		case FINSH_IDTYPE_VAR:
;;;106    			node->id.var = (struct finsh_var*)symbol;
;;;107    			break;
;;;108    
;;;109    		case FINSH_IDTYPE_SYSVAR:
;;;110    			node->id.sysvar = (struct finsh_sysvar*)symbol;
;;;111    			break;
;;;112    
;;;113    		case FINSH_IDTYPE_SYSCALL:
;;;114    			node->id.syscall = (struct finsh_syscall*)symbol;
;;;115    			break;
;;;116    		}
;;;117    		/* fill identifier type */
;;;118    		node->idtype = type;
;;;119    	}
;;;120    	else finsh_error_set(FINSH_ERROR_UNKNOWN_SYMBOL);
;;;121    
;;;122    	return node;
;;;123    }
00004c  bd70              POP      {r4-r6,pc}
                  |L4.78|
00004e  60ac              STR      r4,[r5,#8]            ;106
                  |L4.80|
000050  70ae              STRB     r6,[r5,#2]            ;118
000052  e002              B        |L4.90|
                  |L4.84|
000054  200d              MOVS     r0,#0xd               ;120
000056  f7fffffe          BL       finsh_error_set
                  |L4.90|
00005a  4628              MOV      r0,r5                 ;122
00005c  bd70              POP      {r4-r6,pc}
;;;124    
                          ENDP


                          AREA ||i.finsh_node_new_int||, CODE, READONLY, ALIGN=1

                  finsh_node_new_int PROC
;;;139    
;;;140    struct finsh_node* finsh_node_new_int(int i)
000000  b510              PUSH     {r4,lr}
;;;141    {
000002  4604              MOV      r4,r0
;;;142    	struct finsh_node* node;
;;;143    
;;;144    	node = finsh_node_allocate(FINSH_NODE_VALUE_INT);
000004  2003              MOVS     r0,#3
000006  f7fffffe          BL       finsh_node_allocate
;;;145    	if (node == NULL)
00000a  b108              CBZ      r0,|L5.16|
;;;146    	{
;;;147    		finsh_error_set(FINSH_ERROR_MEMORY_FULL);
;;;148    		return NULL;
;;;149    	}
;;;150    
;;;151    	node->value.int_value = i;
;;;152    	return node;
00000c  6044              STR      r4,[r0,#4]
;;;153    }
00000e  bd10              POP      {r4,pc}
                  |L5.16|
000010  2006              MOVS     r0,#6                 ;147
000012  f7fffffe          BL       finsh_error_set
000016  2000              MOVS     r0,#0                 ;148
000018  bd10              POP      {r4,pc}
;;;154    
                          ENDP


                          AREA ||i.finsh_node_new_long||, CODE, READONLY, ALIGN=1

                  finsh_node_new_long PROC
;;;154    
;;;155    struct finsh_node* finsh_node_new_long(long l)
000000  b510              PUSH     {r4,lr}
;;;156    {
000002  4604              MOV      r4,r0
;;;157    	struct finsh_node* node;
;;;158    
;;;159    	node = finsh_node_allocate(FINSH_NODE_VALUE_LONG);
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       finsh_node_allocate
;;;160    	if (node == NULL)
00000a  b108              CBZ      r0,|L6.16|
;;;161    	{
;;;162    		finsh_error_set(FINSH_ERROR_MEMORY_FULL);
;;;163    		return NULL;
;;;164    	}
;;;165    
;;;166    	node->value.long_value = l;
;;;167    	return node;
00000c  6044              STR      r4,[r0,#4]
;;;168    }
00000e  bd10              POP      {r4,pc}
                  |L6.16|
000010  2006              MOVS     r0,#6                 ;162
000012  f7fffffe          BL       finsh_error_set
000016  2000              MOVS     r0,#0                 ;163
000018  bd10              POP      {r4,pc}
;;;169    
                          ENDP


                          AREA ||i.finsh_node_new_ptr||, CODE, READONLY, ALIGN=1

                  finsh_node_new_ptr PROC
;;;188    
;;;189    struct finsh_node* finsh_node_new_ptr(void* ptr)
000000  b510              PUSH     {r4,lr}
;;;190    {
000002  4604              MOV      r4,r0
;;;191    	struct finsh_node* node;
;;;192    
;;;193    	node = finsh_node_allocate(FINSH_NODE_VALUE_NULL);
000004  2006              MOVS     r0,#6
000006  f7fffffe          BL       finsh_node_allocate
;;;194    	if (node == NULL)
00000a  b108              CBZ      r0,|L7.16|
;;;195    	{
;;;196    		finsh_error_set(FINSH_ERROR_MEMORY_FULL);
;;;197    		return NULL;
;;;198    	}
;;;199    
;;;200    	node->value.ptr = ptr;
;;;201    	return node;
00000c  6044              STR      r4,[r0,#4]
;;;202    }
00000e  bd10              POP      {r4,pc}
                  |L7.16|
000010  2006              MOVS     r0,#6                 ;196
000012  f7fffffe          BL       finsh_error_set
000016  2000              MOVS     r0,#0                 ;197
000018  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.finsh_node_new_string||, CODE, READONLY, ALIGN=1

                  finsh_node_new_string PROC
;;;169    
;;;170    struct finsh_node* finsh_node_new_string(char* s)
000000  b570              PUSH     {r4-r6,lr}
;;;171    {
000002  4605              MOV      r5,r0
;;;172    	struct finsh_node* node;
;;;173    
;;;174    	node = finsh_node_allocate(FINSH_NODE_VALUE_STRING);
000004  2005              MOVS     r0,#5
000006  f7fffffe          BL       finsh_node_allocate
00000a  0004              MOVS     r4,r0
;;;175    	if (node == NULL)
00000c  d016              BEQ      |L8.60|
;;;176    	{
;;;177    		finsh_error_set(FINSH_ERROR_MEMORY_FULL);
;;;178    		return NULL;
;;;179    	}
;;;180    
;;;181    	/* make string */
;;;182    	node->value.ptr = finsh_heap_allocate(strlen(s) + 1);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       strlen
000014  1c40              ADDS     r0,r0,#1
000016  f7fffffe          BL       finsh_heap_allocate
;;;183    	strncpy(node->value.ptr, s, strlen(s));
00001a  6060              STR      r0,[r4,#4]
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       strlen
000022  4602              MOV      r2,r0
000024  4629              MOV      r1,r5
000026  6860              LDR      r0,[r4,#4]
000028  f7fffffe          BL       strncpy
;;;184    	((u_char*)node->value.ptr)[strlen(s)] = '\0';
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       strlen
000032  6861              LDR      r1,[r4,#4]
000034  2200              MOVS     r2,#0
000036  540a              STRB     r2,[r1,r0]
;;;185    
;;;186    	return node;
000038  4620              MOV      r0,r4
;;;187    }
00003a  bd70              POP      {r4-r6,pc}
                  |L8.60|
00003c  2006              MOVS     r0,#6                 ;177
00003e  f7fffffe          BL       finsh_error_set
000042  2000              MOVS     r0,#0                 ;178
000044  bd70              POP      {r4-r6,pc}
;;;188    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  global_node_table
                          %        320
