; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\misc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\misc.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\misc.crf ..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\src\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;129      */
;;;130    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;131    {
000002  4604              MOV      r4,r0
;;;132      uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
;;;133      
;;;134      /* Check the parameters */
;;;135      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
000004  78c0              LDRB     r0,[r0,#3]
000006  250f              MOVS     r5,#0xf               ;132
000008  b128              CBZ      r0,|L1.22|
00000a  2801              CMP      r0,#1
00000c  d003              BEQ      |L1.22|
00000e  2187              MOVS     r1,#0x87
000010  481f              LDR      r0,|L1.144|
000012  f7fffffe          BL       assert_failed
                  |L1.22|
;;;136      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
000016  7860              LDRB     r0,[r4,#1]
000018  2810              CMP      r0,#0x10
00001a  d303              BCC      |L1.36|
00001c  2188              MOVS     r1,#0x88
00001e  481c              LDR      r0,|L1.144|
000020  f7fffffe          BL       assert_failed
                  |L1.36|
;;;137      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
000024  78a0              LDRB     r0,[r4,#2]
000026  2810              CMP      r0,#0x10
000028  d303              BCC      |L1.50|
00002a  2189              MOVS     r1,#0x89
00002c  4818              LDR      r0,|L1.144|
00002e  f7fffffe          BL       assert_failed
                  |L1.50|
;;;138        
;;;139      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000032  78e0              LDRB     r0,[r4,#3]
000034  2201              MOVS     r2,#1                 ;135
000036  b300              CBZ      r0,|L1.122|
;;;140      {
;;;141        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;142        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
000038  4816              LDR      r0,|L1.148|
00003a  6800              LDR      r0,[r0,#0]
00003c  f40060e0          AND      r0,r0,#0x700
000040  f5c060e0          RSB      r0,r0,#0x700
000044  f3c02007          UBFX     r0,r0,#8,#8
;;;143        tmppre = (0x4 - tmppriority);
000048  f1c00104          RSB      r1,r0,#4
;;;144        tmpsub = tmpsub >> tmppriority;
00004c  40c5              LSRS     r5,r5,r0
;;;145    
;;;146        tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
00004e  7860              LDRB     r0,[r4,#1]
000050  4088              LSLS     r0,r0,r1
;;;147        tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
000052  78a1              LDRB     r1,[r4,#2]
000054  4029              ANDS     r1,r1,r5
000056  4301              ORRS     r1,r1,r0
;;;148            
;;;149        tmppriority = tmppriority << 0x04;
000058  0108              LSLS     r0,r1,#4
;;;150            
;;;151        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
00005a  7821              LDRB     r1,[r4,#0]
00005c  f10121e0          ADD      r1,r1,#0xe000e000
000060  f8810400          STRB     r0,[r1,#0x400]
;;;152        
;;;153        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;154        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000064  7820              LDRB     r0,[r4,#0]
000066  f000011f          AND      r1,r0,#0x1f
00006a  408a              LSLS     r2,r2,r1
00006c  0940              LSRS     r0,r0,#5
00006e  0080              LSLS     r0,r0,#2
000070  f10020e0          ADD      r0,r0,#0xe000e000
000074  f8c02100          STR      r2,[r0,#0x100]
;;;155          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;156      }
;;;157      else
;;;158      {
;;;159        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;160        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;161          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;162      }
;;;163    }
000078  bd70              POP      {r4-r6,pc}
                  |L1.122|
00007a  7820              LDRB     r0,[r4,#0]            ;160
00007c  f000011f          AND      r1,r0,#0x1f           ;160
000080  408a              LSLS     r2,r2,r1              ;160
000082  0940              LSRS     r0,r0,#5              ;160
000084  0080              LSLS     r0,r0,#2              ;160
000086  f10020e0          ADD      r0,r0,#0xe000e000     ;160
00008a  f8c02180          STR      r2,[r0,#0x180]        ;160
00008e  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP

                  |L1.144|
                          DCD      ||.conststring||
                  |L1.148|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;111      */
;;;112    void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  b510              PUSH     {r4,lr}
;;;113    {
000002  4604              MOV      r4,r0
;;;114      /* Check the parameters */
;;;115      assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
000004  f5b06fe0          CMP      r0,#0x700
000008  d00f              BEQ      |L2.42|
00000a  f5b46fc0          CMP      r4,#0x600
00000e  d00c              BEQ      |L2.42|
000010  f5b46fa0          CMP      r4,#0x500
000014  d009              BEQ      |L2.42|
000016  f5b46f80          CMP      r4,#0x400
00001a  d006              BEQ      |L2.42|
00001c  f5b47f40          CMP      r4,#0x300
000020  d003              BEQ      |L2.42|
000022  2173              MOVS     r1,#0x73
000024  4803              LDR      r0,|L2.52|
000026  f7fffffe          BL       assert_failed
                  |L2.42|
;;;116      
;;;117      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;118      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
00002a  4803              LDR      r0,|L2.56|
00002c  4304              ORRS     r4,r4,r0
00002e  4803              LDR      r0,|L2.60|
000030  6004              STR      r4,[r0,#0]
;;;119    }
000032  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  |L2.52|
                          DCD      ||.conststring||
                  |L2.56|
                          DCD      0x05fa0000
                  |L2.60|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;173      */
;;;174    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  b570              PUSH     {r4-r6,lr}
;;;175    { 
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;176      /* Check the parameters */
;;;177      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
000006  f1b05f00          CMP      r0,#0x20000000
00000a  d006              BEQ      |L3.26|
00000c  f1b46f00          CMP      r4,#0x8000000
000010  d003              BEQ      |L3.26|
000012  21b1              MOVS     r1,#0xb1
000014  4807              LDR      r0,|L3.52|
000016  f7fffffe          BL       assert_failed
                  |L3.26|
;;;178      assert_param(IS_NVIC_OFFSET(Offset));  
00001a  4807              LDR      r0,|L3.56|
00001c  4285              CMP      r5,r0
00001e  d303              BCC      |L3.40|
000020  21b2              MOVS     r1,#0xb2
000022  4804              LDR      r0,|L3.52|
000024  f7fffffe          BL       assert_failed
                  |L3.40|
;;;179       
;;;180      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000028  4804              LDR      r0,|L3.60|
00002a  4005              ANDS     r5,r5,r0
00002c  4804              LDR      r0,|L3.64|
00002e  4325              ORRS     r5,r5,r4
000030  6005              STR      r5,[r0,#0]
;;;181    }
000032  bd70              POP      {r4-r6,pc}
;;;182    
                          ENDP

                  |L3.52|
                          DCD      ||.conststring||
                  |L3.56|
                          DCD      0x000fffff
                  |L3.60|
                          DCD      0x1fffff80
                  |L3.64|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;192      */
;;;193    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;194    {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;195      /* Check the parameters */
;;;196      assert_param(IS_NVIC_LP(LowPowerMode));
000006  2810              CMP      r0,#0x10
000008  d007              BEQ      |L4.26|
00000a  2c04              CMP      r4,#4
00000c  d005              BEQ      |L4.26|
00000e  2c02              CMP      r4,#2
000010  d003              BEQ      |L4.26|
000012  21c4              MOVS     r1,#0xc4
000014  4808              LDR      r0,|L4.56|
000016  f7fffffe          BL       assert_failed
                  |L4.26|
;;;197      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;198      
;;;199      if (NewState != DISABLE)
;;;200      {
;;;201        SCB->SCR |= LowPowerMode;
00001a  4e08              LDR      r6,|L4.60|
00001c  b145              CBZ      r5,|L4.48|
00001e  2d01              CMP      r5,#1                 ;197
000020  d003              BEQ      |L4.42|
000022  21c5              MOVS     r1,#0xc5              ;197
000024  4804              LDR      r0,|L4.56|
000026  f7fffffe          BL       assert_failed
                  |L4.42|
00002a  6830              LDR      r0,[r6,#0]
00002c  4320              ORRS     r0,r0,r4
00002e  e001              B        |L4.52|
                  |L4.48|
;;;202      }
;;;203      else
;;;204      {
;;;205        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000030  6830              LDR      r0,[r6,#0]
000032  43a0              BICS     r0,r0,r4
                  |L4.52|
000034  6030              STR      r0,[r6,#0]            ;201
;;;206      }
;;;207    }
000036  bd70              POP      {r4-r6,pc}
;;;208    
                          ENDP

                  |L4.56|
                          DCD      ||.conststring||
                  |L4.60|
                          DCD      0xe000ed10

                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=2

                  SysTick_CLKSourceConfig PROC
;;;216      */
;;;217    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  b510              PUSH     {r4,lr}
;;;218    {
;;;219      /* Check the parameters */
;;;220      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;221      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
;;;222      {
;;;223        SysTick->CTRL |= SysTick_CLKSource_HCLK;
000002  f04f24e0          MOV      r4,#0xe000e000
000006  2804              CMP      r0,#4                 ;220
000008  d00a              BEQ      |L5.32|
00000a  1d40              ADDS     r0,r0,#5              ;218
00000c  d003              BEQ      |L5.22|
00000e  21dc              MOVS     r1,#0xdc              ;220
000010  4805              LDR      r0,|L5.40|
000012  f7fffffe          BL       assert_failed
                  |L5.22|
;;;224      }
;;;225      else
;;;226      {
;;;227        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000016  6920              LDR      r0,[r4,#0x10]
000018  f0200004          BIC      r0,r0,#4
                  |L5.28|
00001c  6120              STR      r0,[r4,#0x10]         ;223
;;;228      }
;;;229    }
00001e  bd10              POP      {r4,pc}
                  |L5.32|
000020  6920              LDR      r0,[r4,#0x10]         ;223
000022  f0400004          ORR      r0,r0,#4              ;223
000026  e7f9              B        |L5.28|
;;;230    
                          ENDP

                  |L5.40|
                          DCD      ||.conststring||

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2e2e5c4f          DCB      "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_"
000004  535c6273
000008  705c7374
00000c  6d333266
000010  3430785c
000014  4c696272
000018  61726965
00001c  735c5354
000020  4d333246
000024  3478785f
000028  53746450
00002c  65726970
000030  685f    
000032  44726976          DCB      "Driver\\src\\misc.c",0
000036  65725c73
00003a  72635c6d
00003e  6973632e
000042  6300    

;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\misc.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_misc_c_d0fc1254____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REVSH|
#line 128
|__asm___6_misc_c_d0fc1254____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
