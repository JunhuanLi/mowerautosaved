; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\cpuport.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\cpuport.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\cpuport.crf ..\OS\libcpu\arm\cortex-m4\cpuport.c]
                          THUMB

                          AREA ||i.rt_hw_cpu_shutdown||, CODE, READONLY, ALIGN=2

                  rt_hw_cpu_shutdown PROC
;;;214    
;;;215    void rt_hw_cpu_shutdown(void)
000000  b508              PUSH     {r3,lr}
;;;216    {
;;;217        rt_kprintf("shutdown...\n");
000002  a008              ADR      r0,|L1.36|
000004  f7fffffe          BL       rt_kprintf
;;;218    
;;;219        RT_ASSERT(0);
000008  2000              MOVS     r0,#0
00000a  f88d0000          STRB     r0,[sp,#0]
00000e  23db              MOVS     r3,#0xdb
000010  4a08              LDR      r2,|L1.52|
000012  a109              ADR      r1,|L1.56|
000014  a009              ADR      r0,|L1.60|
000016  f7fffffe          BL       rt_kprintf
                  |L1.26|
00001a  f89d0000          LDRB     r0,[sp,#0]
00001e  2800              CMP      r0,#0
000020  d0fb              BEQ      |L1.26|
;;;220    }
000022  bd08              POP      {r3,pc}
;;;221    
                          ENDP

                  |L1.36|
000024  73687574          DCB      "shutdown...\n",0
000028  646f776e
00002c  2e2e2e0a
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
                  |L1.52|
                          DCD      ||.constdata||
                  |L1.56|
000038  3000              DCB      "0",0
00003a  00                DCB      0
00003b  00                DCB      0
                  |L1.60|
00003c  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000040  20617373
000044  65727420
000048  6661696c
00004c  65642061
000050  74202573
000054  3a256420
000058  0a00    
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.rt_hw_exception_install||, CODE, READONLY, ALIGN=2

                  rt_hw_exception_install PROC
;;;179     */
;;;180    void rt_hw_exception_install(rt_err_t (*exception_handle)(void* context))
000000  4901              LDR      r1,|L2.8|
;;;181    {
;;;182        rt_exception_hook = exception_handle;
000002  6008              STR      r0,[r1,#0]  ; rt_exception_hook
;;;183    }
000004  4770              BX       lr
;;;184    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.data||

                          AREA ||i.rt_hw_hard_fault_exception||, CODE, READONLY, ALIGN=2

                  rt_hw_hard_fault_exception PROC
;;;184    
;;;185    void rt_hw_hard_fault_exception(struct exception_stack_frame *exception_stack)
000000  b510              PUSH     {r4,lr}
;;;186    {
000002  4604              MOV      r4,r0
;;;187        extern long list_thread(void);
;;;188    
;;;189        if (rt_exception_hook != RT_NULL)
000004  4818              LDR      r0,|L3.104|
000006  6801              LDR      r1,[r0,#0]            ;186  ; rt_exception_hook
000008  b119              CBZ      r1,|L3.18|
;;;190        {
;;;191            rt_err_t result;
;;;192    
;;;193            result = rt_exception_hook(exception_stack);
00000a  4620              MOV      r0,r4
00000c  4788              BLX      r1
;;;194            if (result == RT_EOK) return;
00000e  2800              CMP      r0,#0
000010  d028              BEQ      |L3.100|
                  |L3.18|
;;;195        }
;;;196    
;;;197        rt_kprintf("psr: 0x%08x\n", exception_stack->psr);
000012  a016              ADR      r0,|L3.108|
000014  69e1              LDR      r1,[r4,#0x1c]
000016  f7fffffe          BL       rt_kprintf
;;;198        rt_kprintf(" pc: 0x%08x\n", exception_stack->pc);
00001a  a018              ADR      r0,|L3.124|
00001c  69a1              LDR      r1,[r4,#0x18]
00001e  f7fffffe          BL       rt_kprintf
;;;199        rt_kprintf(" lr: 0x%08x\n", exception_stack->lr);
000022  a01a              ADR      r0,|L3.140|
000024  6961              LDR      r1,[r4,#0x14]
000026  f7fffffe          BL       rt_kprintf
;;;200        rt_kprintf("r12: 0x%08x\n", exception_stack->r12);
00002a  a01c              ADR      r0,|L3.156|
00002c  6921              LDR      r1,[r4,#0x10]
00002e  f7fffffe          BL       rt_kprintf
;;;201        rt_kprintf("r03: 0x%08x\n", exception_stack->r3);
000032  a01e              ADR      r0,|L3.172|
000034  68e1              LDR      r1,[r4,#0xc]
000036  f7fffffe          BL       rt_kprintf
;;;202        rt_kprintf("r02: 0x%08x\n", exception_stack->r2);
00003a  a020              ADR      r0,|L3.188|
00003c  68a1              LDR      r1,[r4,#8]
00003e  f7fffffe          BL       rt_kprintf
;;;203        rt_kprintf("r01: 0x%08x\n", exception_stack->r1);
000042  a022              ADR      r0,|L3.204|
000044  6861              LDR      r1,[r4,#4]
000046  f7fffffe          BL       rt_kprintf
;;;204        rt_kprintf("r00: 0x%08x\n", exception_stack->r0);
00004a  a024              ADR      r0,|L3.220|
00004c  6821              LDR      r1,[r4,#0]
00004e  f7fffffe          BL       rt_kprintf
;;;205    
;;;206        rt_kprintf("hard fault on thread: %s\n", rt_thread_self()->name);
000052  f7fffffe          BL       rt_thread_self
000056  4601              MOV      r1,r0
000058  a024              ADR      r0,|L3.236|
00005a  f7fffffe          BL       rt_kprintf
;;;207    
;;;208    #ifdef RT_USING_FINSH
;;;209        list_thread();
00005e  f7fffffe          BL       list_thread
                  |L3.98|
;;;210    #endif
;;;211    
;;;212        while (1);
000062  e7fe              B        |L3.98|
                  |L3.100|
;;;213    }
000064  bd10              POP      {r4,pc}
;;;214    
                          ENDP

000066  0000              DCW      0x0000
                  |L3.104|
                          DCD      ||.data||
                  |L3.108|
00006c  7073723a          DCB      "psr: 0x%08x\n",0
000070  20307825
000074  3038780a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L3.124|
00007c  2070633a          DCB      " pc: 0x%08x\n",0
000080  20307825
000084  3038780a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L3.140|
00008c  206c723a          DCB      " lr: 0x%08x\n",0
000090  20307825
000094  3038780a
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L3.156|
00009c  7231323a          DCB      "r12: 0x%08x\n",0
0000a0  20307825
0000a4  3038780a
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L3.172|
0000ac  7230333a          DCB      "r03: 0x%08x\n",0
0000b0  20307825
0000b4  3038780a
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L3.188|
0000bc  7230323a          DCB      "r02: 0x%08x\n",0
0000c0  20307825
0000c4  3038780a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L3.204|
0000cc  7230313a          DCB      "r01: 0x%08x\n",0
0000d0  20307825
0000d4  3038780a
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L3.220|
0000dc  7230303a          DCB      "r00: 0x%08x\n",0
0000e0  20307825
0000e4  3038780a
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L3.236|
0000ec  68617264          DCB      "hard fault on thread: %s\n",0
0000f0  20666175
0000f4  6c74206f
0000f8  6e207468
0000fc  72656164
000100  3a202573
000104  0a00    
000106  00                DCB      0
000107  00                DCB      0

                          AREA ||i.rt_hw_stack_init||, CODE, READONLY, ALIGN=2

                  rt_hw_stack_init PROC
;;;136    
;;;137    rt_uint8_t *rt_hw_stack_init(void       *tentry,
000000  b570              PUSH     {r4-r6,lr}
;;;138                                 void       *parameter,
;;;139                                 rt_uint8_t *stack_addr,
;;;140                                 void       *texit)
;;;141    {
000002  4605              MOV      r5,r0
000004  1d12              ADDS     r2,r2,#4
;;;142        struct stack_frame *stack_frame;
;;;143        rt_uint8_t         *stk;
;;;144        unsigned long       i;
;;;145    
;;;146        stk  = stack_addr + sizeof(rt_uint32_t);
;;;147        stk  = (rt_uint8_t *)RT_ALIGN_DOWN((rt_uint32_t)stk, 8);
000006  f0220007          BIC      r0,r2,#7
00000a  3844              SUBS     r0,r0,#0x44
;;;148        stk -= sizeof(struct stack_frame);
;;;149    
;;;150        stack_frame = (struct stack_frame *)stk;
;;;151    
;;;152        /* init all register */
;;;153        for (i = 0; i < sizeof(struct stack_frame) / sizeof(rt_uint32_t); i ++)
;;;154        {
;;;155            ((rt_uint32_t *)stack_frame)[i] = 0xdeadbeef;
00000c  4c0a              LDR      r4,|L4.56|
00000e  4606              MOV      r6,r0                 ;148
000010  2200              MOVS     r2,#0                 ;153
                  |L4.18|
000012  f8404022          STR      r4,[r0,r2,LSL #2]
000016  1c52              ADDS     r2,r2,#1
000018  2a11              CMP      r2,#0x11              ;153
00001a  d3fa              BCC      |L4.18|
;;;156        }
;;;157    
;;;158        stack_frame->exception_stack_frame.r0  = (unsigned long)parameter; /* r0 : argument */
;;;159        stack_frame->exception_stack_frame.r1  = 0;                        /* r1 */
00001c  6241              STR      r1,[r0,#0x24]
00001e  2100              MOVS     r1,#0
;;;160        stack_frame->exception_stack_frame.r2  = 0;                        /* r2 */
000020  6281              STR      r1,[r0,#0x28]
;;;161        stack_frame->exception_stack_frame.r3  = 0;                        /* r3 */
000022  62c1              STR      r1,[r0,#0x2c]
;;;162        stack_frame->exception_stack_frame.r12 = 0;                        /* r12 */
;;;163        stack_frame->exception_stack_frame.lr  = (unsigned long)texit;     /* lr */
;;;164        stack_frame->exception_stack_frame.pc  = (unsigned long)tentry;    /* entry point, pc */
;;;165        stack_frame->exception_stack_frame.psr = 0x01000000L;              /* PSR */
000024  f04f7280          MOV      r2,#0x1000000
000028  f1000434          ADD      r4,r0,#0x34
00002c  6402              STR      r2,[r0,#0x40]
00002e  6301              STR      r1,[r0,#0x30]
000030  e884002a          STM      r4,{r1,r3,r5}
;;;166    
;;;167    #if USE_FPU
;;;168        stack_frame->flag = 0;
000034  6031              STR      r1,[r6,#0]
;;;169    #endif /* USE_FPU */
;;;170    
;;;171        /* return task's current stack address */
;;;172        return stk;
;;;173    }
000036  bd70              POP      {r4-r6,pc}
;;;174    
                          ENDP

                  |L4.56|
                          DCD      0xdeadbeef

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  72745f68          DCB      0x72,0x74,0x5f,0x68
000004  775f6370          DCB      0x77,0x5f,0x63,0x70
000008  755f7368          DCB      0x75,0x5f,0x73,0x68
00000c  7574646f          DCB      0x75,0x74,0x64,0x6f
000010  776e00            DCB      0x77,0x6e,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  rt_exception_hook
                          DCD      0x00000000

                          AREA ||area_number.9||, DATA, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.data||
                  rt_interrupt_from_thread
                          DCD      0x00000000

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  rt_interrupt_to_thread
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  rt_thread_switch_interrupt_flag
                          DCD      0x00000000
