; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f4xx_dbgmcu.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_dbgmcu.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\stm32f4xx_dbgmcu.crf ..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_dbgmcu.c]
                          THUMB

                          AREA ||i.DBGMCU_APB1PeriphConfig||, CODE, READONLY, ALIGN=2

                  DBGMCU_APB1PeriphConfig PROC
;;;116      */
;;;117    void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4604              MOV      r4,r0
;;;119      /* Check the parameters */
;;;120      assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
000004  480b              LDR      r0,|L1.52|
000006  460d              MOV      r5,r1                 ;118
000008  4204              TST      r4,r0
00000a  d100              BNE      |L1.14|
00000c  b91c              CBNZ     r4,|L1.22|
                  |L1.14|
00000e  2178              MOVS     r1,#0x78
000010  4809              LDR      r0,|L1.56|
000012  f7fffffe          BL       assert_failed
                  |L1.22|
;;;121      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;122    
;;;123      if (NewState != DISABLE)
;;;124      {
;;;125        DBGMCU->APB1FZ |= DBGMCU_Periph;
000016  4e09              LDR      r6,|L1.60|
000018  b145              CBZ      r5,|L1.44|
00001a  2d01              CMP      r5,#1                 ;121
00001c  d003              BEQ      |L1.38|
00001e  2179              MOVS     r1,#0x79              ;121
000020  4805              LDR      r0,|L1.56|
000022  f7fffffe          BL       assert_failed
                  |L1.38|
000026  68b0              LDR      r0,[r6,#8]
000028  4320              ORRS     r0,r0,r4
00002a  e001              B        |L1.48|
                  |L1.44|
;;;126      }
;;;127      else
;;;128      {
;;;129        DBGMCU->APB1FZ &= ~DBGMCU_Periph;
00002c  68b0              LDR      r0,[r6,#8]
00002e  43a0              BICS     r0,r0,r4
                  |L1.48|
000030  60b0              STR      r0,[r6,#8]            ;125
;;;130      }
;;;131    }
000032  bd70              POP      {r4-r6,pc}
;;;132    
                          ENDP

                  |L1.52|
                          DCD      0xf91fe200
                  |L1.56|
                          DCD      ||.conststring||
                  |L1.60|
                          DCD      0xe0042000

                          AREA ||i.DBGMCU_APB2PeriphConfig||, CODE, READONLY, ALIGN=2

                  DBGMCU_APB2PeriphConfig PROC
;;;145      */
;;;146    void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;147    {
000002  4604              MOV      r4,r0
;;;148      /* Check the parameters */
;;;149      assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
000004  480b              LDR      r0,|L2.52|
000006  460d              MOV      r5,r1                 ;147
000008  4204              TST      r4,r0
00000a  d100              BNE      |L2.14|
00000c  b91c              CBNZ     r4,|L2.22|
                  |L2.14|
00000e  2195              MOVS     r1,#0x95
000010  4809              LDR      r0,|L2.56|
000012  f7fffffe          BL       assert_failed
                  |L2.22|
;;;150      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;151    
;;;152      if (NewState != DISABLE)
;;;153      {
;;;154        DBGMCU->APB2FZ |= DBGMCU_Periph;
000016  4e09              LDR      r6,|L2.60|
000018  b145              CBZ      r5,|L2.44|
00001a  2d01              CMP      r5,#1                 ;150
00001c  d003              BEQ      |L2.38|
00001e  2196              MOVS     r1,#0x96              ;150
000020  4805              LDR      r0,|L2.56|
000022  f7fffffe          BL       assert_failed
                  |L2.38|
000026  68f0              LDR      r0,[r6,#0xc]
000028  4320              ORRS     r0,r0,r4
00002a  e001              B        |L2.48|
                  |L2.44|
;;;155      }
;;;156      else
;;;157      {
;;;158        DBGMCU->APB2FZ &= ~DBGMCU_Periph;
00002c  68f0              LDR      r0,[r6,#0xc]
00002e  43a0              BICS     r0,r0,r4
                  |L2.48|
000030  60f0              STR      r0,[r6,#0xc]          ;154
;;;159      }
;;;160    }
000032  bd70              POP      {r4-r6,pc}
;;;161    
                          ENDP

                  |L2.52|
                          DCD      0xfff8fffc
                  |L2.56|
                          DCD      ||.conststring||
                  |L2.60|
                          DCD      0xe0042000

                          AREA ||i.DBGMCU_Config||, CODE, READONLY, ALIGN=2

                  DBGMCU_Config PROC
;;;77       */
;;;78     void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;80       /* Check the parameters */
;;;81       assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
000006  08c0              LSRS     r0,r0,#3
000008  d100              BNE      |L3.12|
00000a  b91c              CBNZ     r4,|L3.20|
                  |L3.12|
00000c  2151              MOVS     r1,#0x51
00000e  4809              LDR      r0,|L3.52|
000010  f7fffffe          BL       assert_failed
                  |L3.20|
;;;82       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;83       if (NewState != DISABLE)
;;;84       {
;;;85         DBGMCU->CR |= DBGMCU_Periph;
000014  4e08              LDR      r6,|L3.56|
000016  b145              CBZ      r5,|L3.42|
000018  2d01              CMP      r5,#1                 ;82
00001a  d003              BEQ      |L3.36|
00001c  2152              MOVS     r1,#0x52              ;82
00001e  4805              LDR      r0,|L3.52|
000020  f7fffffe          BL       assert_failed
                  |L3.36|
000024  6870              LDR      r0,[r6,#4]
000026  4320              ORRS     r0,r0,r4
000028  e001              B        |L3.46|
                  |L3.42|
;;;86       }
;;;87       else
;;;88       {
;;;89         DBGMCU->CR &= ~DBGMCU_Periph;
00002a  6870              LDR      r0,[r6,#4]
00002c  43a0              BICS     r0,r0,r4
                  |L3.46|
00002e  6070              STR      r0,[r6,#4]            ;85
;;;90       }
;;;91     }
000030  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      ||.conststring||
                  |L3.56|
                          DCD      0xe0042000

                          AREA ||i.DBGMCU_GetDEVID||, CODE, READONLY, ALIGN=2

                  DBGMCU_GetDEVID PROC
;;;61       */
;;;62     uint32_t DBGMCU_GetDEVID(void)
000000  4802              LDR      r0,|L4.12|
;;;63     {
;;;64        return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  f3c0000b          UBFX     r0,r0,#0,#12
;;;65     }
000008  4770              BX       lr
;;;66     
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0xe0042000

                          AREA ||i.DBGMCU_GetREVID||, CODE, READONLY, ALIGN=2

                  DBGMCU_GetREVID PROC
;;;51       */
;;;52     uint32_t DBGMCU_GetREVID(void)
000000  4801              LDR      r0,|L5.8|
;;;53     {
;;;54        return(DBGMCU->IDCODE >> 16);
000002  6800              LDR      r0,[r0,#0]
000004  0c00              LSRS     r0,r0,#16
;;;55     }
000006  4770              BX       lr
;;;56     
                          ENDP

                  |L5.8|
                          DCD      0xe0042000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2e2e5c4f          DCB      "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_"
000004  535c6273
000008  705c7374
00000c  6d333266
000010  3430785c
000014  4c696272
000018  61726965
00001c  735c5354
000020  4d333246
000024  3478785f
000028  53746450
00002c  65726970
000030  685f    
000032  44726976          DCB      "Driver\\src\\stm32f4xx_dbgmcu.c",0
000036  65725c73
00003a  72635c73
00003e  746d3332
000042  66347878
000046  5f646267
00004a  6d63752e
00004e  6300    

;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_dbgmcu.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_dbgmcu_c_588a430f____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_stm32f4xx_dbgmcu_c_588a430f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_dbgmcu_c_588a430f____REVSH|
#line 128
|__asm___18_stm32f4xx_dbgmcu_c_588a430f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
