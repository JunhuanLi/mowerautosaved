; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f4xx_wwdg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_wwdg.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\stm32f4xx_wwdg.crf ..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;281      */
;;;282    void WWDG_ClearFlag(void)
000000  4901              LDR      r1,|L1.8|
;;;283    {
;;;284      WWDG->SR = (uint32_t)RESET;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;285    }
000006  4770              BX       lr
;;;286    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;133      */
;;;134    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02cc              LSLS     r4,r1,#11
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;137      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;138    }
;;;139    
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;234      */
;;;235    void WWDG_Enable(uint8_t Counter)
000000  b510              PUSH     {r4,lr}
;;;236    {
000002  4604              MOV      r4,r0
;;;237      /* Check the parameters */
;;;238      assert_param(IS_WWDG_COUNTER(Counter));
000004  3840              SUBS     r0,r0,#0x40
000006  283f              CMP      r0,#0x3f
000008  d903              BLS      |L3.18|
00000a  21ee              MOVS     r1,#0xee
00000c  4803              LDR      r0,|L3.28|
00000e  f7fffffe          BL       assert_failed
                  |L3.18|
;;;239      WWDG->CR = WWDG_CR_WDGA | Counter;
000012  4903              LDR      r1,|L3.32|
000014  f0440080          ORR      r0,r4,#0x80
000018  6008              STR      r0,[r1,#0]
;;;240    }
00001a  bd10              POP      {r4,pc}
;;;241    /**
                          ENDP

                  |L3.28|
                          DCD      ||.conststring||
                  |L3.32|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;191      */
;;;192    void WWDG_EnableIT(void)
000000  4902              LDR      r1,|L4.12|
;;;193    {
;;;194      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  f8c100a4          STR      r0,[r1,#0xa4]
;;;195    }
000008  4770              BX       lr
;;;196    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x42058000

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;261      */
;;;262    FlagStatus WWDG_GetFlagStatus(void)
000000  4903              LDR      r1,|L5.16|
;;;263    {
;;;264      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;265        
;;;266      if ((WWDG->SR) != (uint32_t)RESET)
000004  6809              LDR      r1,[r1,#0]
000006  2900              CMP      r1,#0                 ;263
000008  d000              BEQ      |L5.12|
;;;267      {
;;;268        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L5.12|
;;;269      }
;;;270      else
;;;271      {
;;;272        bitstatus = RESET;
;;;273      }
;;;274      return bitstatus;
;;;275    }
00000c  4770              BX       lr
;;;276    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40002c08

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;203      */
;;;204    void WWDG_SetCounter(uint8_t Counter)
000000  b510              PUSH     {r4,lr}
;;;205    {
000002  4604              MOV      r4,r0
;;;206      /* Check the parameters */
;;;207      assert_param(IS_WWDG_COUNTER(Counter));
000004  3840              SUBS     r0,r0,#0x40
000006  283f              CMP      r0,#0x3f
000008  d903              BLS      |L6.18|
00000a  21cf              MOVS     r1,#0xcf
00000c  4803              LDR      r0,|L6.28|
00000e  f7fffffe          BL       assert_failed
                  |L6.18|
;;;208      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;209         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;210      WWDG->CR = Counter & BIT_MASK;
000012  4903              LDR      r1,|L6.32|
000014  f004007f          AND      r0,r4,#0x7f
000018  6008              STR      r0,[r1,#0]
;;;211    }
00001a  bd10              POP      {r4,pc}
;;;212    /**
                          ENDP

                  |L6.28|
                          DCD      ||.conststring||
                  |L6.32|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;149      */
;;;150    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000000  b510              PUSH     {r4,lr}
;;;151    {
000002  0004              MOVS     r4,r0
000004  d00b              BEQ      |L7.30|
;;;152      uint32_t tmpreg = 0;
;;;153      /* Check the parameters */
;;;154      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
000006  2c80              CMP      r4,#0x80
000008  d009              BEQ      |L7.30|
00000a  f5b47f80          CMP      r4,#0x100
00000e  d006              BEQ      |L7.30|
000010  f5b47fc0          CMP      r4,#0x180
000014  d003              BEQ      |L7.30|
000016  219a              MOVS     r1,#0x9a
000018  4804              LDR      r0,|L7.44|
00001a  f7fffffe          BL       assert_failed
                  |L7.30|
;;;155      /* Clear WDGTB[1:0] bits */
;;;156      tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
00001e  4904              LDR      r1,|L7.48|
000020  6808              LDR      r0,[r1,#0]
000022  f42070c0          BIC      r0,r0,#0x180
;;;157      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;158      tmpreg |= WWDG_Prescaler;
000026  4320              ORRS     r0,r0,r4
;;;159      /* Store the new value */
;;;160      WWDG->CFR = tmpreg;
000028  6008              STR      r0,[r1,#0]
;;;161    }
00002a  bd10              POP      {r4,pc}
;;;162    
                          ENDP

                  |L7.44|
                          DCD      ||.conststring||
                  |L7.48|
                          DCD      0x40002c04

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;168      */
;;;169    void WWDG_SetWindowValue(uint8_t WindowValue)
000000  b538              PUSH     {r3-r5,lr}
;;;170    {
000002  4604              MOV      r4,r0
;;;171      __IO uint32_t tmpreg = 0;
000004  2000              MOVS     r0,#0
;;;172    
;;;173      /* Check the parameters */
;;;174      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
000006  9000              STR      r0,[sp,#0]
000008  2c7f              CMP      r4,#0x7f
00000a  d903              BLS      |L8.20|
00000c  21ae              MOVS     r1,#0xae
00000e  4807              LDR      r0,|L8.44|
000010  f7fffffe          BL       assert_failed
                  |L8.20|
;;;175      /* Clear W[6:0] bits */
;;;176    
;;;177      tmpreg = WWDG->CFR & CFR_W_MASK;
000014  4806              LDR      r0,|L8.48|
000016  6801              LDR      r1,[r0,#0]
000018  f021017f          BIC      r1,r1,#0x7f
;;;178    
;;;179      /* Set W[6:0] bits according to WindowValue value */
;;;180      tmpreg |= WindowValue & (uint32_t) BIT_MASK;
00001c  9100              STR      r1,[sp,#0]
00001e  9a00              LDR      r2,[sp,#0]
000020  f004017f          AND      r1,r4,#0x7f
000024  4311              ORRS     r1,r1,r2
;;;181    
;;;182      /* Store the new value */
;;;183      WWDG->CFR = tmpreg;
000026  9100              STR      r1,[sp,#0]
000028  6001              STR      r1,[r0,#0]
;;;184    }
00002a  bd38              POP      {r3-r5,pc}
;;;185    
                          ENDP

                  |L8.44|
                          DCD      ||.conststring||
                  |L8.48|
                          DCD      0x40002c04

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2e2e5c4f          DCB      "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_"
000004  535c6273
000008  705c7374
00000c  6d333266
000010  3430785c
000014  4c696272
000018  61726965
00001c  735c5354
000020  4d333246
000024  3478785f
000028  53746450
00002c  65726970
000030  685f    
000032  44726976          DCB      "Driver\\src\\stm32f4xx_wwdg.c",0
000036  65725c73
00003a  72635c73
00003e  746d3332
000042  66347878
000046  5f777764
00004a  672e6300

;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_wwdg.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_wwdg_c_9668c0ca____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f4xx_wwdg_c_9668c0ca____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_wwdg_c_9668c0ca____REVSH|
#line 128
|__asm___16_stm32f4xx_wwdg_c_9668c0ca____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
