; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f4xx_fsmc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_fsmc.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\stm32f4xx_fsmc.crf ..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_fsmc.c]
                          THUMB

                          AREA ||i.FSMC_ClearFlag||, CODE, READONLY, ALIGN=2

                  FSMC_ClearFlag PROC
;;;858      */
;;;859    void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;860    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;861     /* Check the parameters */
;;;862      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
000006  f44f7680          MOV      r6,#0x100
00000a  2810              CMP      r0,#0x10
00000c  d009              BEQ      |L1.34|
00000e  42b5              CMP      r5,r6
000010  d007              BEQ      |L1.34|
000012  f5b55f80          CMP      r5,#0x1000
000016  d004              BEQ      |L1.34|
000018  f240315e          MOV      r1,#0x35e
00001c  480e              LDR      r0,|L1.88|
00001e  f7fffffe          BL       assert_failed
                  |L1.34|
;;;863      assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
000022  08e0              LSRS     r0,r4,#3
000024  d100              BNE      |L1.40|
000026  b924              CBNZ     r4,|L1.50|
                  |L1.40|
000028  f240315f          MOV      r1,#0x35f
00002c  480a              LDR      r0,|L1.88|
00002e  f7fffffe          BL       assert_failed
                  |L1.50|
;;;864        
;;;865      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;866      {
;;;867        FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
000032  f04f4020          MOV      r0,#0xa0000000
000036  2d10              CMP      r5,#0x10              ;865
000038  d004              BEQ      |L1.68|
;;;868      }  
;;;869      else if(FSMC_Bank == FSMC_Bank3_NAND)
00003a  42b5              CMP      r5,r6
00003c  d106              BNE      |L1.76|
;;;870      {
;;;871        FSMC_Bank3->SR3 &= ~FSMC_FLAG;
00003e  f8501f84          LDR      r1,[r0,#0x84]!
000042  e005              B        |L1.80|
                  |L1.68|
000044  6e41              LDR      r1,[r0,#0x64]         ;867
000046  43a1              BICS     r1,r1,r4              ;867
000048  6641              STR      r1,[r0,#0x64]         ;867
;;;872      }
;;;873      /* FSMC_Bank4_PCCARD*/
;;;874      else
;;;875      {
;;;876        FSMC_Bank4->SR4 &= ~FSMC_FLAG;
;;;877      }
;;;878    }
00004a  bd70              POP      {r4-r6,pc}
                  |L1.76|
00004c  f8501fa4          LDR      r1,[r0,#0xa4]!        ;876
                  |L1.80|
000050  43a1              BICS     r1,r1,r4              ;876
000052  6001              STR      r1,[r0,#0]            ;876
000054  bd70              POP      {r4-r6,pc}
;;;879    
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      ||.conststring||

                          AREA ||i.FSMC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  FSMC_ClearITPendingBit PROC
;;;944      */
;;;945    void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;946    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;947      /* Check the parameters */
;;;948      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
000006  f44f7680          MOV      r6,#0x100
00000a  2810              CMP      r0,#0x10
00000c  d009              BEQ      |L2.34|
00000e  42b5              CMP      r5,r6
000010  d007              BEQ      |L2.34|
000012  f5b55f80          CMP      r5,#0x1000
000016  d004              BEQ      |L2.34|
000018  f44f716d          MOV      r1,#0x3b4
00001c  480f              LDR      r0,|L2.92|
00001e  f7fffffe          BL       assert_failed
                  |L2.34|
;;;949      assert_param(IS_FSMC_IT(FSMC_IT));
000022  f0340038          BICS     r0,r4,#0x38
000026  d100              BNE      |L2.42|
000028  b924              CBNZ     r4,|L2.52|
                  |L2.42|
00002a  f24031b5          MOV      r1,#0x3b5
00002e  480b              LDR      r0,|L2.92|
000030  f7fffffe          BL       assert_failed
                  |L2.52|
;;;950        
;;;951      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;952      {
;;;953        FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
000034  f04f4020          MOV      r0,#0xa0000000
000038  2d10              CMP      r5,#0x10              ;951
00003a  d004              BEQ      |L2.70|
;;;954      }  
;;;955      else if(FSMC_Bank == FSMC_Bank3_NAND)
00003c  42b5              CMP      r5,r6
00003e  d107              BNE      |L2.80|
;;;956      {
;;;957        FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
000040  f8501f84          LDR      r1,[r0,#0x84]!
000044  e006              B        |L2.84|
                  |L2.70|
000046  6e41              LDR      r1,[r0,#0x64]         ;953
000048  ea2101d4          BIC      r1,r1,r4,LSR #3       ;953
00004c  6641              STR      r1,[r0,#0x64]         ;953
;;;958      }
;;;959      /* FSMC_Bank4_PCCARD*/
;;;960      else
;;;961      {
;;;962        FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
;;;963      }
;;;964    }
00004e  bd70              POP      {r4-r6,pc}
                  |L2.80|
000050  f8501fa4          LDR      r1,[r0,#0xa4]!        ;962
                  |L2.84|
000054  ea2101d4          BIC      r1,r1,r4,LSR #3       ;962
000058  6001              STR      r1,[r0,#0]            ;962
00005a  bd70              POP      {r4-r6,pc}
;;;965    
                          ENDP

                  |L2.92|
                          DCD      ||.conststring||

                          AREA ||i.FSMC_GetECC||, CODE, READONLY, ALIGN=1

                  FSMC_GetECC PROC
;;;542      */
;;;543    uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
000000  f04f4120          MOV      r1,#0xa0000000
;;;544    {
;;;545      uint32_t eccval = 0x00000000;
;;;546      
;;;547      if(FSMC_Bank == FSMC_Bank2_NAND)
000004  2810              CMP      r0,#0x10
000006  d002              BEQ      |L3.14|
;;;548      {
;;;549        /* Get the ECCR2 register value */
;;;550        eccval = FSMC_Bank2->ECCR2;
;;;551      }
;;;552      else
;;;553      {
;;;554        /* Get the ECCR3 register value */
;;;555        eccval = FSMC_Bank3->ECCR3;
000008  f8d10094          LDR      r0,[r1,#0x94]
;;;556      }
;;;557      /* Return the error correction code value */
;;;558      return(eccval);
;;;559    }
00000c  4770              BX       lr
                  |L3.14|
00000e  6f48              LDR      r0,[r1,#0x74]         ;550
000010  4770              BX       lr
;;;560    /**
                          ENDP


                          AREA ||i.FSMC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FSMC_GetFlagStatus PROC
;;;808      */
;;;809    FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;810    {
;;;811      FlagStatus bitstatus = RESET;
000004  2600              MOVS     r6,#0
000006  460c              MOV      r4,r1                 ;810
000008  4605              MOV      r5,r0                 ;810
;;;812      uint32_t tmpsr = 0x00000000;
;;;813      
;;;814      /* Check the parameters */
;;;815      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
00000a  f44f7780          MOV      r7,#0x100
00000e  2810              CMP      r0,#0x10
000010  d009              BEQ      |L4.38|
000012  42bd              CMP      r5,r7
000014  d007              BEQ      |L4.38|
000016  f5b55f80          CMP      r5,#0x1000
00001a  d004              BEQ      |L4.38|
00001c  f240312f          MOV      r1,#0x32f
000020  4811              LDR      r0,|L4.104|
000022  f7fffffe          BL       assert_failed
                  |L4.38|
;;;816      assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
000026  2c01              CMP      r4,#1
000028  d00a              BEQ      |L4.64|
00002a  2c02              CMP      r4,#2
00002c  d008              BEQ      |L4.64|
00002e  2c04              CMP      r4,#4
000030  d006              BEQ      |L4.64|
000032  2c40              CMP      r4,#0x40
000034  d004              BEQ      |L4.64|
000036  f44f714c          MOV      r1,#0x330
00003a  480b              LDR      r0,|L4.104|
00003c  f7fffffe          BL       assert_failed
                  |L4.64|
;;;817      
;;;818      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;819      {
;;;820        tmpsr = FSMC_Bank2->SR2;
000040  f04f4020          MOV      r0,#0xa0000000
000044  2d10              CMP      r5,#0x10              ;818
000046  d004              BEQ      |L4.82|
;;;821      }  
;;;822      else if(FSMC_Bank == FSMC_Bank3_NAND)
000048  42bd              CMP      r5,r7
00004a  d104              BNE      |L4.86|
;;;823      {
;;;824        tmpsr = FSMC_Bank3->SR3;
00004c  f8d00084          LDR      r0,[r0,#0x84]
000050  e003              B        |L4.90|
                  |L4.82|
000052  6e40              LDR      r0,[r0,#0x64]         ;820
000054  e001              B        |L4.90|
                  |L4.86|
;;;825      }
;;;826      /* FSMC_Bank4_PCCARD*/
;;;827      else
;;;828      {
;;;829        tmpsr = FSMC_Bank4->SR4;
000056  f8d000a4          LDR      r0,[r0,#0xa4]
                  |L4.90|
;;;830      } 
;;;831      
;;;832      /* Get the flag status */
;;;833      if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
00005a  4220              TST      r0,r4
00005c  d000              BEQ      |L4.96|
;;;834      {
;;;835        bitstatus = SET;
00005e  2601              MOVS     r6,#1
                  |L4.96|
;;;836      }
;;;837      else
;;;838      {
;;;839        bitstatus = RESET;
;;;840      }
;;;841      /* Return the flag status */
;;;842      return bitstatus;
000060  4630              MOV      r0,r6
;;;843    }
000062  e8bd81f0          POP      {r4-r8,pc}
;;;844    
                          ENDP

000066  0000              DCW      0x0000
                  |L4.104|
                          DCD      ||.conststring||

                          AREA ||i.FSMC_GetITStatus||, CODE, READONLY, ALIGN=2

                  FSMC_GetITStatus PROC
;;;893      */
;;;894    ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;895    {
;;;896      ITStatus bitstatus = RESET;
000004  2600              MOVS     r6,#0
000006  460c              MOV      r4,r1                 ;895
000008  4605              MOV      r5,r0                 ;895
;;;897      uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
;;;898      
;;;899      /* Check the parameters */
;;;900      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
00000a  f44f7780          MOV      r7,#0x100
00000e  2810              CMP      r0,#0x10
000010  d009              BEQ      |L5.38|
000012  42bd              CMP      r5,r7
000014  d007              BEQ      |L5.38|
000016  f5b55f80          CMP      r5,#0x1000
00001a  d004              BEQ      |L5.38|
00001c  f44f7161          MOV      r1,#0x384
000020  4811              LDR      r0,|L5.104|
000022  f7fffffe          BL       assert_failed
                  |L5.38|
;;;901      assert_param(IS_FSMC_GET_IT(FSMC_IT));
000026  2c08              CMP      r4,#8
000028  d008              BEQ      |L5.60|
00002a  2c10              CMP      r4,#0x10
00002c  d006              BEQ      |L5.60|
00002e  2c20              CMP      r4,#0x20
000030  d004              BEQ      |L5.60|
000032  f2403185          MOV      r1,#0x385
000036  480c              LDR      r0,|L5.104|
000038  f7fffffe          BL       assert_failed
                  |L5.60|
;;;902      
;;;903      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;904      {
;;;905        tmpsr = FSMC_Bank2->SR2;
00003c  f04f4020          MOV      r0,#0xa0000000
000040  2d10              CMP      r5,#0x10              ;903
000042  d004              BEQ      |L5.78|
;;;906      }  
;;;907      else if(FSMC_Bank == FSMC_Bank3_NAND)
000044  42bd              CMP      r5,r7
000046  d104              BNE      |L5.82|
;;;908      {
;;;909        tmpsr = FSMC_Bank3->SR3;
000048  f8d00084          LDR      r0,[r0,#0x84]
00004c  e003              B        |L5.86|
                  |L5.78|
00004e  6e40              LDR      r0,[r0,#0x64]         ;905
000050  e001              B        |L5.86|
                  |L5.82|
;;;910      }
;;;911      /* FSMC_Bank4_PCCARD*/
;;;912      else
;;;913      {
;;;914        tmpsr = FSMC_Bank4->SR4;
000052  f8d000a4          LDR      r0,[r0,#0xa4]
                  |L5.86|
;;;915      } 
;;;916      
;;;917      itstatus = tmpsr & FSMC_IT;
000056  4220              TST      r0,r4
;;;918      
;;;919      itenable = tmpsr & (FSMC_IT >> 3);
000058  ea0002d4          AND      r2,r0,r4,LSR #3
;;;920      if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
00005c  d001              BEQ      |L5.98|
00005e  b102              CBZ      r2,|L5.98|
;;;921      {
;;;922        bitstatus = SET;
000060  2601              MOVS     r6,#1
                  |L5.98|
;;;923      }
;;;924      else
;;;925      {
;;;926        bitstatus = RESET;
;;;927      }
;;;928      return bitstatus; 
000062  4630              MOV      r0,r6
;;;929    }
000064  e8bd81f0          POP      {r4-r8,pc}
;;;930    
                          ENDP

                  |L5.104|
                          DCD      ||.conststring||

                          AREA ||i.FSMC_ITConfig||, CODE, READONLY, ALIGN=2

                  FSMC_ITConfig PROC
;;;748      */
;;;749    void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;750    {
000004  4690              MOV      r8,r2
000006  460c              MOV      r4,r1
000008  4605              MOV      r5,r0
;;;751      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
00000a  f44f7780          MOV      r7,#0x100
00000e  2810              CMP      r0,#0x10
000010  d009              BEQ      |L6.38|
000012  42bd              CMP      r5,r7
000014  d007              BEQ      |L6.38|
000016  f5b55f80          CMP      r5,#0x1000
00001a  d004              BEQ      |L6.38|
00001c  f24021ef          MOV      r1,#0x2ef
000020  481b              LDR      r0,|L6.144|
000022  f7fffffe          BL       assert_failed
                  |L6.38|
;;;752      assert_param(IS_FSMC_IT(FSMC_IT));	
000026  f0340038          BICS     r0,r4,#0x38
00002a  d100              BNE      |L6.46|
00002c  b924              CBNZ     r4,|L6.56|
                  |L6.46|
00002e  f44f713c          MOV      r1,#0x2f0
000032  4817              LDR      r0,|L6.144|
000034  f7fffffe          BL       assert_failed
                  |L6.56|
;;;753      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;754      
;;;755      if (NewState != DISABLE)
;;;756      {
;;;757        /* Enable the selected FSMC_Bank2 interrupts */
;;;758        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;759        {
;;;760          FSMC_Bank2->SR2 |= FSMC_IT;
000038  f04f4620          MOV      r6,#0xa0000000
00003c  f1b80f00          CMP      r8,#0                 ;753
000040  d017              BEQ      |L6.114|
000042  f1b80f01          CMP      r8,#1                 ;753
000046  d004              BEQ      |L6.82|
000048  f24021f1          MOV      r1,#0x2f1             ;753
00004c  4810              LDR      r0,|L6.144|
00004e  f7fffffe          BL       assert_failed
                  |L6.82|
000052  2d10              CMP      r5,#0x10              ;758
000054  d004              BEQ      |L6.96|
;;;761        }
;;;762        /* Enable the selected FSMC_Bank3 interrupts */
;;;763        else if (FSMC_Bank == FSMC_Bank3_NAND)
000056  42bd              CMP      r5,r7
000058  d105              BNE      |L6.102|
;;;764        {
;;;765          FSMC_Bank3->SR3 |= FSMC_IT;
00005a  f8560f84          LDR      r0,[r6,#0x84]!
00005e  e004              B        |L6.106|
                  |L6.96|
000060  6e70              LDR      r0,[r6,#0x64]         ;760
000062  4320              ORRS     r0,r0,r4              ;760
000064  e00e              B        |L6.132|
                  |L6.102|
;;;766        }
;;;767        /* Enable the selected FSMC_Bank4 interrupts */
;;;768        else
;;;769        {
;;;770          FSMC_Bank4->SR4 |= FSMC_IT;    
000066  f8560fa4          LDR      r0,[r6,#0xa4]!
                  |L6.106|
00006a  4320              ORRS     r0,r0,r4
                  |L6.108|
00006c  6030              STR      r0,[r6,#0]
                  |L6.110|
;;;771        }
;;;772      }
;;;773      else
;;;774      {
;;;775        /* Disable the selected FSMC_Bank2 interrupts */
;;;776        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;777        {
;;;778          
;;;779          FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
;;;780        }
;;;781        /* Disable the selected FSMC_Bank3 interrupts */
;;;782        else if (FSMC_Bank == FSMC_Bank3_NAND)
;;;783        {
;;;784          FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
;;;785        }
;;;786        /* Disable the selected FSMC_Bank4 interrupts */
;;;787        else
;;;788        {
;;;789          FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
;;;790        }
;;;791      }
;;;792    }
00006e  e8bd81f0          POP      {r4-r8,pc}
                  |L6.114|
000072  2d10              CMP      r5,#0x10              ;776
000074  d004              BEQ      |L6.128|
000076  42bd              CMP      r5,r7                 ;782
000078  d106              BNE      |L6.136|
00007a  f8560f84          LDR      r0,[r6,#0x84]!        ;784
00007e  e005              B        |L6.140|
                  |L6.128|
000080  6e70              LDR      r0,[r6,#0x64]         ;779
000082  43a0              BICS     r0,r0,r4              ;779
                  |L6.132|
000084  6670              STR      r0,[r6,#0x64]         ;760
000086  e7f2              B        |L6.110|
                  |L6.136|
000088  f8560fa4          LDR      r0,[r6,#0xa4]!        ;789
                  |L6.140|
00008c  43a0              BICS     r0,r0,r4              ;784
00008e  e7ed              B        |L6.108|
;;;793    
                          ENDP

                  |L6.144|
                          DCD      ||.conststring||

                          AREA ||i.FSMC_NANDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDCmd PROC
;;;463      */
;;;464    void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;465    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;466      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
000006  2810              CMP      r0,#0x10
000008  d007              BEQ      |L7.26|
00000a  f5b47f80          CMP      r4,#0x100
00000e  d004              BEQ      |L7.26|
000010  f44f71e9          MOV      r1,#0x1d2
000014  4812              LDR      r0,|L7.96|
000016  f7fffffe          BL       assert_failed
                  |L7.26|
;;;467      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;468      
;;;469      if (NewState != DISABLE)
;;;470      {
;;;471        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;472        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;473        {
;;;474          FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
00001a  f04f4520          MOV      r5,#0xa0000000
00001e  b19e              CBZ      r6,|L7.72|
000020  2e01              CMP      r6,#1                 ;467
000022  d004              BEQ      |L7.46|
000024  f24011d3          MOV      r1,#0x1d3             ;467
000028  480d              LDR      r0,|L7.96|
00002a  f7fffffe          BL       assert_failed
                  |L7.46|
00002e  2c10              CMP      r4,#0x10              ;472
000030  d005              BEQ      |L7.62|
;;;475        }
;;;476        else
;;;477        {
;;;478          FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
000032  f8550f80          LDR      r0,[r5,#0x80]!
000036  f0400004          ORR      r0,r0,#4
00003a  6028              STR      r0,[r5,#0]
;;;479        }
;;;480      }
;;;481      else
;;;482      {
;;;483        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;484        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;485        {
;;;486          FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
;;;487        }
;;;488        else
;;;489        {
;;;490          FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
;;;491        }
;;;492      }
;;;493    }
00003c  bd70              POP      {r4-r6,pc}
                  |L7.62|
00003e  6e28              LDR      r0,[r5,#0x60]         ;474
000040  f0400004          ORR      r0,r0,#4              ;474
000044  6628              STR      r0,[r5,#0x60]         ;474
000046  bd70              POP      {r4-r6,pc}
                  |L7.72|
000048  4806              LDR      r0,|L7.100|
00004a  2c10              CMP      r4,#0x10              ;484
00004c  d004              BEQ      |L7.88|
00004e  f8551f80          LDR      r1,[r5,#0x80]!        ;490
000052  4001              ANDS     r1,r1,r0              ;490
000054  6029              STR      r1,[r5,#0]            ;490
000056  bd70              POP      {r4-r6,pc}
                  |L7.88|
000058  6e29              LDR      r1,[r5,#0x60]         ;486
00005a  4001              ANDS     r1,r1,r0              ;486
00005c  6629              STR      r1,[r5,#0x60]         ;486
00005e  bd70              POP      {r4-r6,pc}
;;;494    /**
                          ENDP

                  |L7.96|
                          DCD      ||.conststring||
                  |L7.100|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_NANDDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_NANDDeInit PROC
;;;338      */
;;;339    void FSMC_NANDDeInit(uint32_t FSMC_Bank)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;340    {
;;;341      /* Check the parameter */
;;;342      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;343      
;;;344      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;345      {
;;;346        /* Set the FSMC_Bank2 registers to their reset values */
;;;347        FSMC_Bank2->PCR2 = 0x00000018;
000004  2718              MOVS     r7,#0x18
;;;348        FSMC_Bank2->SR2 = 0x00000040;
000006  2640              MOVS     r6,#0x40
000008  f04f4420          MOV      r4,#0xa0000000        ;347
;;;349        FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
00000c  f04f35fc          MOV      r5,#0xfcfcfcfc
000010  2810              CMP      r0,#0x10              ;342
000012  d00e              BEQ      |L8.50|
000014  f5b07f80          CMP      r0,#0x100             ;342
000018  d004              BEQ      |L8.36|
00001a  f44f71ab          MOV      r1,#0x156             ;342
00001e  4807              LDR      r0,|L8.60|
000020  f7fffffe          BL       assert_failed
                  |L8.36|
;;;350        FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
;;;351      }
;;;352      /* FSMC_Bank3_NAND */  
;;;353      else
;;;354      {
;;;355        /* Set the FSMC_Bank3 registers to their reset values */
;;;356        FSMC_Bank3->PCR3 = 0x00000018;
000024  f8447f80          STR      r7,[r4,#0x80]!
;;;357        FSMC_Bank3->SR3 = 0x00000040;
000028  6066              STR      r6,[r4,#4]
;;;358        FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
00002a  60a5              STR      r5,[r4,#8]
;;;359        FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
00002c  60e5              STR      r5,[r4,#0xc]
                  |L8.46|
;;;360      }  
;;;361    }
00002e  e8bd81f0          POP      {r4-r8,pc}
                  |L8.50|
000032  6627              STR      r7,[r4,#0x60]         ;347
000034  6666              STR      r6,[r4,#0x64]         ;348
000036  66a5              STR      r5,[r4,#0x68]         ;349
000038  66e5              STR      r5,[r4,#0x6c]         ;350
00003a  e7f8              B        |L8.46|
;;;362    
                          ENDP

                  |L8.60|
                          DCD      ||.conststring||

                          AREA ||i.FSMC_NANDECCCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDECCCmd PROC
;;;503      */
;;;504    void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;505    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;506      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
000006  2810              CMP      r0,#0x10
000008  d007              BEQ      |L9.26|
00000a  f5b47f80          CMP      r4,#0x100
00000e  d004              BEQ      |L9.26|
000010  f44f71fd          MOV      r1,#0x1fa
000014  4812              LDR      r0,|L9.96|
000016  f7fffffe          BL       assert_failed
                  |L9.26|
;;;507      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;508      
;;;509      if (NewState != DISABLE)
;;;510      {
;;;511        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;512        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;513        {
;;;514          FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
00001a  f04f4520          MOV      r5,#0xa0000000
00001e  b19e              CBZ      r6,|L9.72|
000020  2e01              CMP      r6,#1                 ;507
000022  d004              BEQ      |L9.46|
000024  f24011fb          MOV      r1,#0x1fb             ;507
000028  480d              LDR      r0,|L9.96|
00002a  f7fffffe          BL       assert_failed
                  |L9.46|
00002e  2c10              CMP      r4,#0x10              ;512
000030  d005              BEQ      |L9.62|
;;;515        }
;;;516        else
;;;517        {
;;;518          FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
000032  f8550f80          LDR      r0,[r5,#0x80]!
000036  f0400040          ORR      r0,r0,#0x40
00003a  6028              STR      r0,[r5,#0]
;;;519        }
;;;520      }
;;;521      else
;;;522      {
;;;523        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;524        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;525        {
;;;526          FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
;;;527        }
;;;528        else
;;;529        {
;;;530          FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
;;;531        }
;;;532      }
;;;533    }
00003c  bd70              POP      {r4-r6,pc}
                  |L9.62|
00003e  6e28              LDR      r0,[r5,#0x60]         ;514
000040  f0400040          ORR      r0,r0,#0x40           ;514
000044  6628              STR      r0,[r5,#0x60]         ;514
000046  bd70              POP      {r4-r6,pc}
                  |L9.72|
000048  4806              LDR      r0,|L9.100|
00004a  2c10              CMP      r4,#0x10              ;524
00004c  d004              BEQ      |L9.88|
00004e  f8551f80          LDR      r1,[r5,#0x80]!        ;530
000052  4001              ANDS     r1,r1,r0              ;530
000054  6029              STR      r1,[r5,#0]            ;530
000056  bd70              POP      {r4-r6,pc}
                  |L9.88|
000058  6e29              LDR      r1,[r5,#0x60]         ;526
00005a  4001              ANDS     r1,r1,r0              ;526
00005c  6629              STR      r1,[r5,#0x60]         ;526
00005e  bd70              POP      {r4-r6,pc}
;;;534    
                          ENDP

                  |L9.96|
                          DCD      ||.conststring||
                  |L9.100|
                          DCD      0x000fffbf

                          AREA ||i.FSMC_NANDInit||, CODE, READONLY, ALIGN=2

                  FSMC_NANDInit PROC
;;;369      */
;;;370    void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;371    {
000002  4604              MOV      r4,r0
;;;372      uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
;;;373        
;;;374      /* Check the parameters */
;;;375      assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
000004  6800              LDR      r0,[r0,#0]
000006  2810              CMP      r0,#0x10
000008  d007              BEQ      |L10.26|
00000a  f5b07f80          CMP      r0,#0x100
00000e  d004              BEQ      |L10.26|
000010  f2401177          MOV      r1,#0x177
000014  485f              LDR      r0,|L10.404|
000016  f7fffffe          BL       assert_failed
                  |L10.26|
;;;376      assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
00001a  6860              LDR      r0,[r4,#4]
00001c  b130              CBZ      r0,|L10.44|
00001e  2802              CMP      r0,#2
000020  d004              BEQ      |L10.44|
000022  f44f71bc          MOV      r1,#0x178
000026  485b              LDR      r0,|L10.404|
000028  f7fffffe          BL       assert_failed
                  |L10.44|
;;;377      assert_param( IS_FSMC_MEMORY_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
00002c  68a0              LDR      r0,[r4,#8]
00002e  b130              CBZ      r0,|L10.62|
000030  2810              CMP      r0,#0x10
000032  d004              BEQ      |L10.62|
000034  f2401179          MOV      r1,#0x179
000038  4856              LDR      r0,|L10.404|
00003a  f7fffffe          BL       assert_failed
                  |L10.62|
;;;378      assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
00003e  68e0              LDR      r0,[r4,#0xc]
000040  b130              CBZ      r0,|L10.80|
000042  2840              CMP      r0,#0x40
000044  d004              BEQ      |L10.80|
000046  f44f71bd          MOV      r1,#0x17a
00004a  4852              LDR      r0,|L10.404|
00004c  f7fffffe          BL       assert_failed
                  |L10.80|
;;;379      assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
000050  6920              LDR      r0,[r4,#0x10]
000052  b198              CBZ      r0,|L10.124|
000054  f5b03f00          CMP      r0,#0x20000
000058  d010              BEQ      |L10.124|
00005a  f5b02f80          CMP      r0,#0x40000
00005e  d00d              BEQ      |L10.124|
000060  f5b02fc0          CMP      r0,#0x60000
000064  d00a              BEQ      |L10.124|
000066  f5b02f00          CMP      r0,#0x80000
00006a  d007              BEQ      |L10.124|
00006c  f5b02f20          CMP      r0,#0xa0000
000070  d004              BEQ      |L10.124|
000072  f240117b          MOV      r1,#0x17b
000076  4847              LDR      r0,|L10.404|
000078  f7fffffe          BL       assert_failed
                  |L10.124|
;;;380      assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
00007c  6960              LDR      r0,[r4,#0x14]
00007e  28ff              CMP      r0,#0xff
000080  d904              BLS      |L10.140|
000082  f44f71be          MOV      r1,#0x17c
000086  4843              LDR      r0,|L10.404|
000088  f7fffffe          BL       assert_failed
                  |L10.140|
;;;381      assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
00008c  69a0              LDR      r0,[r4,#0x18]
00008e  28ff              CMP      r0,#0xff
000090  d904              BLS      |L10.156|
000092  f240117d          MOV      r1,#0x17d
000096  483f              LDR      r0,|L10.404|
000098  f7fffffe          BL       assert_failed
                  |L10.156|
;;;382      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
00009c  69e0              LDR      r0,[r4,#0x1c]
00009e  6800              LDR      r0,[r0,#0]
0000a0  28ff              CMP      r0,#0xff
0000a2  d904              BLS      |L10.174|
0000a4  f44f71bf          MOV      r1,#0x17e
0000a8  483a              LDR      r0,|L10.404|
0000aa  f7fffffe          BL       assert_failed
                  |L10.174|
;;;383      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
0000ae  69e0              LDR      r0,[r4,#0x1c]
0000b0  6840              LDR      r0,[r0,#4]
0000b2  28ff              CMP      r0,#0xff
0000b4  d904              BLS      |L10.192|
0000b6  f240117f          MOV      r1,#0x17f
0000ba  4836              LDR      r0,|L10.404|
0000bc  f7fffffe          BL       assert_failed
                  |L10.192|
;;;384      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
0000c0  69e0              LDR      r0,[r4,#0x1c]
0000c2  6880              LDR      r0,[r0,#8]
0000c4  28ff              CMP      r0,#0xff
0000c6  d904              BLS      |L10.210|
0000c8  f44f71c0          MOV      r1,#0x180
0000cc  4831              LDR      r0,|L10.404|
0000ce  f7fffffe          BL       assert_failed
                  |L10.210|
;;;385      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
0000d2  69e0              LDR      r0,[r4,#0x1c]
0000d4  68c0              LDR      r0,[r0,#0xc]
0000d6  28ff              CMP      r0,#0xff
0000d8  d904              BLS      |L10.228|
0000da  f2401181          MOV      r1,#0x181
0000de  482d              LDR      r0,|L10.404|
0000e0  f7fffffe          BL       assert_failed
                  |L10.228|
;;;386      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
0000e4  6a20              LDR      r0,[r4,#0x20]
0000e6  6800              LDR      r0,[r0,#0]
0000e8  28ff              CMP      r0,#0xff
0000ea  d904              BLS      |L10.246|
0000ec  f44f71c1          MOV      r1,#0x182
0000f0  4828              LDR      r0,|L10.404|
0000f2  f7fffffe          BL       assert_failed
                  |L10.246|
;;;387      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
0000f6  6a20              LDR      r0,[r4,#0x20]
0000f8  6840              LDR      r0,[r0,#4]
0000fa  28ff              CMP      r0,#0xff
0000fc  d904              BLS      |L10.264|
0000fe  f2401183          MOV      r1,#0x183
000102  4824              LDR      r0,|L10.404|
000104  f7fffffe          BL       assert_failed
                  |L10.264|
;;;388      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
000108  6a20              LDR      r0,[r4,#0x20]
00010a  6880              LDR      r0,[r0,#8]
00010c  28ff              CMP      r0,#0xff
00010e  d904              BLS      |L10.282|
000110  f44f71c2          MOV      r1,#0x184
000114  481f              LDR      r0,|L10.404|
000116  f7fffffe          BL       assert_failed
                  |L10.282|
;;;389      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
00011a  6a20              LDR      r0,[r4,#0x20]
00011c  68c0              LDR      r0,[r0,#0xc]
00011e  28ff              CMP      r0,#0xff
000120  d904              BLS      |L10.300|
000122  f2401185          MOV      r1,#0x185
000126  481b              LDR      r0,|L10.404|
000128  f7fffffe          BL       assert_failed
                  |L10.300|
00012c  e9d40101          LDRD     r0,r1,[r4,#4]
;;;390      
;;;391      /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
;;;392      tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
000130  4308              ORRS     r0,r0,r1
000132  e9d41203          LDRD     r1,r2,[r4,#0xc]
000136  4311              ORRS     r1,r1,r2
000138  4308              ORRS     r0,r0,r1
00013a  6961              LDR      r1,[r4,#0x14]
00013c  ea402041          ORR      r0,r0,r1,LSL #9
000140  69a1              LDR      r1,[r4,#0x18]
000142  ea403041          ORR      r0,r0,r1,LSL #13
000146  f0400308          ORR      r3,r0,#8
;;;393                PCR_MEMORYTYPE_NAND |
;;;394                FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
;;;395                FSMC_NANDInitStruct->FSMC_ECC |
;;;396                FSMC_NANDInitStruct->FSMC_ECCPageSize |
;;;397                (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
;;;398                (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
;;;399                
;;;400      /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
;;;401      tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
00014a  69e0              LDR      r0,[r4,#0x1c]
00014c  e9d01200          LDRD     r1,r2,[r0,#0]
000150  ea412102          ORR      r1,r1,r2,LSL #8
000154  8902              LDRH     r2,[r0,#8]
000156  7b00              LDRB     r0,[r0,#0xc]
000158  0412              LSLS     r2,r2,#16
00015a  ea426000          ORR      r0,r2,r0,LSL #24
00015e  4301              ORRS     r1,r1,r0
;;;402                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;403                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;404                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;405                
;;;406      /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;407      tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000160  6a20              LDR      r0,[r4,#0x20]
;;;408                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;409                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;410                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
;;;411      
;;;412      if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
000162  6824              LDR      r4,[r4,#0]
000164  e9d02500          LDRD     r2,r5,[r0,#0]         ;407
000168  ea422205          ORR      r2,r2,r5,LSL #8       ;407
00016c  8905              LDRH     r5,[r0,#8]            ;407
00016e  7b00              LDRB     r0,[r0,#0xc]          ;407
000170  042d              LSLS     r5,r5,#16             ;407
000172  ea456000          ORR      r0,r5,r0,LSL #24      ;407
000176  4302              ORRS     r2,r2,r0              ;407
;;;413      {
;;;414        /* FSMC_Bank2_NAND registers configuration */
;;;415        FSMC_Bank2->PCR2 = tmppcr;
000178  f04f4020          MOV      r0,#0xa0000000
00017c  2c10              CMP      r4,#0x10              ;412
00017e  d004              BEQ      |L10.394|
;;;416        FSMC_Bank2->PMEM2 = tmppmem;
;;;417        FSMC_Bank2->PATT2 = tmppatt;
;;;418      }
;;;419      else
;;;420      {
;;;421        /* FSMC_Bank3_NAND registers configuration */
;;;422        FSMC_Bank3->PCR3 = tmppcr;
000180  f8403f80          STR      r3,[r0,#0x80]!
;;;423        FSMC_Bank3->PMEM3 = tmppmem;
000184  6081              STR      r1,[r0,#8]
;;;424        FSMC_Bank3->PATT3 = tmppatt;
000186  60c2              STR      r2,[r0,#0xc]
;;;425      }
;;;426    }
000188  bd70              POP      {r4-r6,pc}
                  |L10.394|
00018a  6603              STR      r3,[r0,#0x60]         ;415
00018c  6681              STR      r1,[r0,#0x68]         ;416
00018e  66c2              STR      r2,[r0,#0x6c]         ;417
000190  bd70              POP      {r4-r6,pc}
;;;427    
                          ENDP

000192  0000              DCW      0x0000
                  |L10.404|
                          DCD      ||.conststring||

                          AREA ||i.FSMC_NANDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NANDStructInit PROC
;;;434      */
;;;435    void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  2110              MOVS     r1,#0x10
;;;436    { 
;;;437      /* Reset NAND Init structure parameters values */
;;;438      FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
;;;439      FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000002  6001              STR      r1,[r0,#0]
000004  2100              MOVS     r1,#0
;;;440      FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
000006  6041              STR      r1,[r0,#4]
;;;441      FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
000008  6081              STR      r1,[r0,#8]
;;;442      FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
00000a  60c1              STR      r1,[r0,#0xc]
;;;443      FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
00000c  6101              STR      r1,[r0,#0x10]
;;;444      FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
00000e  6141              STR      r1,[r0,#0x14]
;;;445      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000010  6181              STR      r1,[r0,#0x18]
000012  69c2              LDR      r2,[r0,#0x1c]
000014  21fc              MOVS     r1,#0xfc
;;;446      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000016  6011              STR      r1,[r2,#0]
000018  69c2              LDR      r2,[r0,#0x1c]
;;;447      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00001a  6051              STR      r1,[r2,#4]
00001c  69c2              LDR      r2,[r0,#0x1c]
;;;448      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
00001e  6091              STR      r1,[r2,#8]
000020  69c2              LDR      r2,[r0,#0x1c]
;;;449      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000022  60d1              STR      r1,[r2,#0xc]
000024  6a02              LDR      r2,[r0,#0x20]
;;;450      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000026  6011              STR      r1,[r2,#0]
000028  6a02              LDR      r2,[r0,#0x20]
;;;451      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00002a  6051              STR      r1,[r2,#4]
00002c  6a02              LDR      r2,[r0,#0x20]
;;;452      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
00002e  6091              STR      r1,[r2,#8]
000030  6a00              LDR      r0,[r0,#0x20]
000032  60c1              STR      r1,[r0,#0xc]
;;;453    }
000034  4770              BX       lr
;;;454    
                          ENDP


                          AREA ||i.FSMC_NORSRAMCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMCmd PROC
;;;267      */
;;;268    void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;269    {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d00a              BEQ      |L12.30|
;;;270      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
000008  2c02              CMP      r4,#2
00000a  d008              BEQ      |L12.30|
00000c  2c04              CMP      r4,#4
00000e  d006              BEQ      |L12.30|
000010  2c06              CMP      r4,#6
000012  d004              BEQ      |L12.30|
000014  f44f7187          MOV      r1,#0x10e
000018  480b              LDR      r0,|L12.72|
00001a  f7fffffe          BL       assert_failed
                  |L12.30|
;;;271      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;272      
;;;273      if (NewState != DISABLE)
;;;274      {
;;;275        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;276        FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
00001e  00a4              LSLS     r4,r4,#2
000020  f1a444c0          SUB      r4,r4,#0x60000000
000024  b155              CBZ      r5,|L12.60|
000026  2d01              CMP      r5,#1                 ;271
000028  d004              BEQ      |L12.52|
00002a  f240110f          MOV      r1,#0x10f             ;271
00002e  4806              LDR      r0,|L12.72|
000030  f7fffffe          BL       assert_failed
                  |L12.52|
000034  6820              LDR      r0,[r4,#0]
000036  f0400001          ORR      r0,r0,#1
00003a  e002              B        |L12.66|
                  |L12.60|
;;;277      }
;;;278      else
;;;279      {
;;;280        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;281        FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
00003c  6820              LDR      r0,[r4,#0]
00003e  4903              LDR      r1,|L12.76|
000040  4008              ANDS     r0,r0,r1
                  |L12.66|
000042  6020              STR      r0,[r4,#0]            ;276
;;;282      }
;;;283    }
000044  bd70              POP      {r4-r6,pc}
;;;284    /**
                          ENDP

000046  0000              DCW      0x0000
                  |L12.72|
                          DCD      ||.conststring||
                  |L12.76|
                          DCD      0x000ffffe

                          AREA ||i.FSMC_NORSRAMDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMDeInit PROC
;;;115      */
;;;116    void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
000000  b510              PUSH     {r4,lr}
;;;117    {
;;;118      /* Check the parameter */
;;;119      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;120      
;;;121      /* FSMC_Bank1_NORSRAM1 */
;;;122      if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
;;;123      {
;;;124        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
;;;125      }
;;;126      /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;127      else
;;;128      {   
;;;129        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
000002  0084              LSLS     r4,r0,#2
000004  f1a444c0          SUB      r4,r4,#0x60000000
000008  b190              CBZ      r0,|L13.48|
00000a  2802              CMP      r0,#2                 ;119
00000c  d007              BEQ      |L13.30|
00000e  2804              CMP      r0,#4                 ;119
000010  d005              BEQ      |L13.30|
000012  2806              CMP      r0,#6                 ;119
000014  d003              BEQ      |L13.30|
000016  2177              MOVS     r1,#0x77              ;119
000018  4808              LDR      r0,|L13.60|
00001a  f7fffffe          BL       assert_failed
                  |L13.30|
00001e  f24300d2          MOV      r0,#0x30d2
000022  6020              STR      r0,[r4,#0]
                  |L13.36|
;;;130      }
;;;131      FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
000024  f06f4070          MVN      r0,#0xf0000000
000028  6060              STR      r0,[r4,#4]
;;;132      FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
00002a  f8c40104          STR      r0,[r4,#0x104]
;;;133    }
00002e  bd10              POP      {r4,pc}
                  |L13.48|
000030  f04f4120          MOV      r1,#0xa0000000        ;124
000034  f24300db          MOV      r0,#0x30db            ;124
000038  6008              STR      r0,[r1,#0]            ;124
00003a  e7f3              B        |L13.36|
;;;134    
                          ENDP

                  |L13.60|
                          DCD      ||.conststring||

                          AREA ||i.FSMC_NORSRAMInit||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMInit PROC
;;;142      */
;;;143    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;144    { 
000004  4604              MOV      r4,r0
;;;145      /* Check the parameters */
;;;146      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
000006  6800              LDR      r0,[r0,#0]
000008  b148              CBZ      r0,|L14.30|
00000a  2802              CMP      r0,#2
00000c  d007              BEQ      |L14.30|
00000e  2804              CMP      r0,#4
000010  d005              BEQ      |L14.30|
000012  2806              CMP      r0,#6
000014  d003              BEQ      |L14.30|
000016  2192              MOVS     r1,#0x92
000018  48a2              LDR      r0,|L14.676|
00001a  f7fffffe          BL       assert_failed
                  |L14.30|
;;;147      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
00001e  6860              LDR      r0,[r4,#4]
000020  b128              CBZ      r0,|L14.46|
000022  2802              CMP      r0,#2
000024  d003              BEQ      |L14.46|
000026  2193              MOVS     r1,#0x93
000028  489e              LDR      r0,|L14.676|
00002a  f7fffffe          BL       assert_failed
                  |L14.46|
;;;148      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
00002e  68a0              LDR      r0,[r4,#8]
000030  b138              CBZ      r0,|L14.66|
000032  2804              CMP      r0,#4
000034  d005              BEQ      |L14.66|
000036  2808              CMP      r0,#8
000038  d003              BEQ      |L14.66|
00003a  2194              MOVS     r1,#0x94
00003c  4899              LDR      r0,|L14.676|
00003e  f7fffffe          BL       assert_failed
                  |L14.66|
;;;149      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
000042  68e0              LDR      r0,[r4,#0xc]
000044  b128              CBZ      r0,|L14.82|
000046  2810              CMP      r0,#0x10
000048  d003              BEQ      |L14.82|
00004a  2195              MOVS     r1,#0x95
00004c  4895              LDR      r0,|L14.676|
00004e  f7fffffe          BL       assert_failed
                  |L14.82|
;;;150      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
000052  6920              LDR      r0,[r4,#0x10]
000054  b130              CBZ      r0,|L14.100|
000056  f5b07f80          CMP      r0,#0x100
00005a  d003              BEQ      |L14.100|
00005c  2196              MOVS     r1,#0x96
00005e  4891              LDR      r0,|L14.676|
000060  f7fffffe          BL       assert_failed
                  |L14.100|
;;;151      assert_param(IS_FSMC_ASYNWAIT(FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait));
000064  6960              LDR      r0,[r4,#0x14]
000066  b130              CBZ      r0,|L14.118|
000068  f5b04f00          CMP      r0,#0x8000
00006c  d003              BEQ      |L14.118|
00006e  2197              MOVS     r1,#0x97
000070  488c              LDR      r0,|L14.676|
000072  f7fffffe          BL       assert_failed
                  |L14.118|
;;;152      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
000076  69a0              LDR      r0,[r4,#0x18]
000078  b130              CBZ      r0,|L14.136|
00007a  f5b07f00          CMP      r0,#0x200
00007e  d003              BEQ      |L14.136|
000080  2198              MOVS     r1,#0x98
000082  4888              LDR      r0,|L14.676|
000084  f7fffffe          BL       assert_failed
                  |L14.136|
;;;153      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
000088  69e0              LDR      r0,[r4,#0x1c]
00008a  b130              CBZ      r0,|L14.154|
00008c  f5b06f80          CMP      r0,#0x400
000090  d003              BEQ      |L14.154|
000092  2199              MOVS     r1,#0x99
000094  4883              LDR      r0,|L14.676|
000096  f7fffffe          BL       assert_failed
                  |L14.154|
;;;154      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
00009a  6a20              LDR      r0,[r4,#0x20]
00009c  b130              CBZ      r0,|L14.172|
00009e  f5b06f00          CMP      r0,#0x800
0000a2  d003              BEQ      |L14.172|
0000a4  219a              MOVS     r1,#0x9a
0000a6  487f              LDR      r0,|L14.676|
0000a8  f7fffffe          BL       assert_failed
                  |L14.172|
;;;155      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
0000ac  6a60              LDR      r0,[r4,#0x24]
0000ae  b130              CBZ      r0,|L14.190|
0000b0  f5b05f80          CMP      r0,#0x1000
0000b4  d003              BEQ      |L14.190|
0000b6  219b              MOVS     r1,#0x9b
0000b8  487a              LDR      r0,|L14.676|
0000ba  f7fffffe          BL       assert_failed
                  |L14.190|
;;;156      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
0000be  6aa0              LDR      r0,[r4,#0x28]
0000c0  b130              CBZ      r0,|L14.208|
0000c2  f5b05f00          CMP      r0,#0x2000
0000c6  d003              BEQ      |L14.208|
0000c8  219c              MOVS     r1,#0x9c
0000ca  4876              LDR      r0,|L14.676|
0000cc  f7fffffe          BL       assert_failed
                  |L14.208|
;;;157      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
0000d0  6ae0              LDR      r0,[r4,#0x2c]
0000d2  f44f4880          MOV      r8,#0x4000
0000d6  b128              CBZ      r0,|L14.228|
0000d8  4540              CMP      r0,r8
0000da  d003              BEQ      |L14.228|
0000dc  219d              MOVS     r1,#0x9d
0000de  4871              LDR      r0,|L14.676|
0000e0  f7fffffe          BL       assert_failed
                  |L14.228|
;;;158      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
0000e4  6b20              LDR      r0,[r4,#0x30]
0000e6  b130              CBZ      r0,|L14.246|
0000e8  f5b02f00          CMP      r0,#0x80000
0000ec  d003              BEQ      |L14.246|
0000ee  219e              MOVS     r1,#0x9e
0000f0  486c              LDR      r0,|L14.676|
0000f2  f7fffffe          BL       assert_failed
                  |L14.246|
;;;159      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
0000f6  6b60              LDR      r0,[r4,#0x34]
0000f8  6800              LDR      r0,[r0,#0]
0000fa  280f              CMP      r0,#0xf
0000fc  d903              BLS      |L14.262|
0000fe  219f              MOVS     r1,#0x9f
000100  4868              LDR      r0,|L14.676|
000102  f7fffffe          BL       assert_failed
                  |L14.262|
;;;160      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
000106  6b60              LDR      r0,[r4,#0x34]
000108  6840              LDR      r0,[r0,#4]
00010a  280f              CMP      r0,#0xf
00010c  d903              BLS      |L14.278|
00010e  21a0              MOVS     r1,#0xa0
000110  4864              LDR      r0,|L14.676|
000112  f7fffffe          BL       assert_failed
                  |L14.278|
;;;161      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
000116  6b60              LDR      r0,[r4,#0x34]
000118  6880              LDR      r0,[r0,#8]
00011a  1e40              SUBS     r0,r0,#1
00011c  28fe              CMP      r0,#0xfe
00011e  d903              BLS      |L14.296|
000120  21a1              MOVS     r1,#0xa1
000122  4860              LDR      r0,|L14.676|
000124  f7fffffe          BL       assert_failed
                  |L14.296|
;;;162      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
000128  6b60              LDR      r0,[r4,#0x34]
00012a  68c0              LDR      r0,[r0,#0xc]
00012c  280f              CMP      r0,#0xf
00012e  d903              BLS      |L14.312|
000130  21a2              MOVS     r1,#0xa2
000132  485c              LDR      r0,|L14.676|
000134  f7fffffe          BL       assert_failed
                  |L14.312|
;;;163      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
000138  6b60              LDR      r0,[r4,#0x34]
00013a  6900              LDR      r0,[r0,#0x10]
00013c  280f              CMP      r0,#0xf
00013e  d903              BLS      |L14.328|
000140  21a3              MOVS     r1,#0xa3
000142  4858              LDR      r0,|L14.676|
000144  f7fffffe          BL       assert_failed
                  |L14.328|
;;;164      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
000148  6b60              LDR      r0,[r4,#0x34]
00014a  6940              LDR      r0,[r0,#0x14]
00014c  280f              CMP      r0,#0xf
00014e  d903              BLS      |L14.344|
000150  21a4              MOVS     r1,#0xa4
000152  4854              LDR      r0,|L14.676|
000154  f7fffffe          BL       assert_failed
                  |L14.344|
;;;165      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
000158  6b60              LDR      r0,[r4,#0x34]
00015a  f04f5580          MOV      r5,#0x10000000
00015e  006e              LSLS     r6,r5,#1
000160  6980              LDR      r0,[r0,#0x18]
000162  f04f5740          MOV      r7,#0x30000000
000166  b148              CBZ      r0,|L14.380|
000168  42a8              CMP      r0,r5
00016a  d007              BEQ      |L14.380|
00016c  42b0              CMP      r0,r6
00016e  d005              BEQ      |L14.380|
000170  42b8              CMP      r0,r7
000172  d003              BEQ      |L14.380|
000174  21a5              MOVS     r1,#0xa5
000176  484b              LDR      r0,|L14.676|
000178  f7fffffe          BL       assert_failed
                  |L14.380|
00017c  e9d40101          LDRD     r0,r1,[r4,#4]
;;;166      
;;;167      /* Bank1 NOR/SRAM control register configuration */ 
;;;168      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
000180  4308              ORRS     r0,r0,r1
000182  e9d41203          LDRD     r1,r2,[r4,#0xc]
000186  4311              ORRS     r1,r1,r2
000188  4308              ORRS     r0,r0,r1
00018a  6961              LDR      r1,[r4,#0x14]
00018c  4308              ORRS     r0,r0,r1
00018e  69a1              LDR      r1,[r4,#0x18]
000190  4308              ORRS     r0,r0,r1
000192  69e1              LDR      r1,[r4,#0x1c]
000194  4308              ORRS     r0,r0,r1
000196  6a21              LDR      r1,[r4,#0x20]
000198  4308              ORRS     r0,r0,r1
00019a  6a61              LDR      r1,[r4,#0x24]
00019c  4308              ORRS     r0,r0,r1
00019e  6aa1              LDR      r1,[r4,#0x28]
0001a0  4308              ORRS     r0,r0,r1
0001a2  6ae1              LDR      r1,[r4,#0x2c]
0001a4  4308              ORRS     r0,r0,r1
0001a6  6b21              LDR      r1,[r4,#0x30]
0001a8  4308              ORRS     r0,r0,r1
0001aa  6821              LDR      r1,[r4,#0]
0001ac  0089              LSLS     r1,r1,#2
0001ae  f1a141c0          SUB      r1,r1,#0x60000000
0001b2  6008              STR      r0,[r1,#0]
;;;169                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;170                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;171                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;172                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;173                FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
;;;174                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;175                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;176                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;177                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;178                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;179                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;180                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;181      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
0001b4  68a0              LDR      r0,[r4,#8]
0001b6  2808              CMP      r0,#8
0001b8  d107              BNE      |L14.458|
;;;182      {
;;;183        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
0001ba  6820              LDR      r0,[r4,#0]
0001bc  0080              LSLS     r0,r0,#2
0001be  f1a040c0          SUB      r0,r0,#0x60000000
0001c2  6801              LDR      r1,[r0,#0]
0001c4  f0410140          ORR      r1,r1,#0x40
0001c8  6001              STR      r1,[r0,#0]
                  |L14.458|
;;;184      }
;;;185      /* Bank1 NOR/SRAM timing register configuration */
;;;186      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
0001ca  6b60              LDR      r0,[r4,#0x34]
0001cc  e9d01200          LDRD     r1,r2,[r0,#0]
0001d0  ea411102          ORR      r1,r1,r2,LSL #4
0001d4  6882              LDR      r2,[r0,#8]
0001d6  8983              LDRH     r3,[r0,#0xc]
0001d8  0212              LSLS     r2,r2,#8
0001da  ea424203          ORR      r2,r2,r3,LSL #16
0001de  4311              ORRS     r1,r1,r2
0001e0  8a02              LDRH     r2,[r0,#0x10]
0001e2  ea415102          ORR      r1,r1,r2,LSL #20
0001e6  7d02              LDRB     r2,[r0,#0x14]
0001e8  6980              LDR      r0,[r0,#0x18]
0001ea  ea416102          ORR      r1,r1,r2,LSL #24
0001ee  4301              ORRS     r1,r1,r0
0001f0  6820              LDR      r0,[r4,#0]
0001f2  0080              LSLS     r0,r0,#2
0001f4  f1a040c0          SUB      r0,r0,#0x60000000
0001f8  6041              STR      r1,[r0,#4]
;;;187                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;188                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;189                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;190                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;191                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;192                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;193                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;194                
;;;195        
;;;196      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;197      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
0001fa  6ae0              LDR      r0,[r4,#0x2c]
0001fc  4540              CMP      r0,r8
0001fe  d14d              BNE      |L14.668|
;;;198      {
;;;199        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
000200  6ba0              LDR      r0,[r4,#0x38]
000202  6800              LDR      r0,[r0,#0]
000204  280f              CMP      r0,#0xf
000206  d903              BLS      |L14.528|
000208  21c7              MOVS     r1,#0xc7
00020a  4826              LDR      r0,|L14.676|
00020c  f7fffffe          BL       assert_failed
                  |L14.528|
;;;200        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
000210  6ba0              LDR      r0,[r4,#0x38]
000212  6840              LDR      r0,[r0,#4]
000214  280f              CMP      r0,#0xf
000216  d903              BLS      |L14.544|
000218  21c8              MOVS     r1,#0xc8
00021a  4822              LDR      r0,|L14.676|
00021c  f7fffffe          BL       assert_failed
                  |L14.544|
;;;201        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
000220  6ba0              LDR      r0,[r4,#0x38]
000222  6880              LDR      r0,[r0,#8]
000224  1e40              SUBS     r0,r0,#1
000226  28fe              CMP      r0,#0xfe
000228  d903              BLS      |L14.562|
00022a  21c9              MOVS     r1,#0xc9
00022c  481d              LDR      r0,|L14.676|
00022e  f7fffffe          BL       assert_failed
                  |L14.562|
;;;202        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
000232  6ba0              LDR      r0,[r4,#0x38]
000234  6900              LDR      r0,[r0,#0x10]
000236  280f              CMP      r0,#0xf
000238  d903              BLS      |L14.578|
00023a  21ca              MOVS     r1,#0xca
00023c  4819              LDR      r0,|L14.676|
00023e  f7fffffe          BL       assert_failed
                  |L14.578|
;;;203        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
000242  6ba0              LDR      r0,[r4,#0x38]
000244  6940              LDR      r0,[r0,#0x14]
000246  280f              CMP      r0,#0xf
000248  d903              BLS      |L14.594|
00024a  21cb              MOVS     r1,#0xcb
00024c  4815              LDR      r0,|L14.676|
00024e  f7fffffe          BL       assert_failed
                  |L14.594|
;;;204        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
000252  6ba0              LDR      r0,[r4,#0x38]
000254  6980              LDR      r0,[r0,#0x18]
000256  b148              CBZ      r0,|L14.620|
000258  42a8              CMP      r0,r5
00025a  d007              BEQ      |L14.620|
00025c  42b0              CMP      r0,r6
00025e  d005              BEQ      |L14.620|
000260  42b8              CMP      r0,r7
000262  d003              BEQ      |L14.620|
000264  21cc              MOVS     r1,#0xcc
000266  480f              LDR      r0,|L14.676|
000268  f7fffffe          BL       assert_failed
                  |L14.620|
;;;205        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
00026c  6ba0              LDR      r0,[r4,#0x38]
00026e  e9d01200          LDRD     r1,r2,[r0,#0]
000272  ea411102          ORR      r1,r1,r2,LSL #4
000276  6882              LDR      r2,[r0,#8]
000278  8a03              LDRH     r3,[r0,#0x10]
00027a  0212              LSLS     r2,r2,#8
00027c  ea425203          ORR      r2,r2,r3,LSL #20
000280  4311              ORRS     r1,r1,r2
000282  7d02              LDRB     r2,[r0,#0x14]
000284  6980              LDR      r0,[r0,#0x18]
000286  ea416102          ORR      r1,r1,r2,LSL #24
00028a  4301              ORRS     r1,r1,r0
                  |L14.652|
00028c  6820              LDR      r0,[r4,#0]
00028e  0080              LSLS     r0,r0,#2
000290  f1a040c0          SUB      r0,r0,#0x60000000
000294  f8c01104          STR      r1,[r0,#0x104]
;;;206                  (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;207                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;208                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;209                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;210                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;211                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;212      }
;;;213      else
;;;214      {
;;;215        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
;;;216      }
;;;217    }
000298  e8bd81f0          POP      {r4-r8,pc}
                  |L14.668|
00029c  f06f4170          MVN      r1,#0xf0000000        ;215
0002a0  e7f4              B        |L14.652|
;;;218    
                          ENDP

0002a2  0000              DCW      0x0000
                  |L14.676|
                          DCD      ||.conststring||

                          AREA ||i.FSMC_NORSRAMStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMStructInit PROC
;;;224      */
;;;225    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  b510              PUSH     {r4,lr}
;;;226    {  
;;;227      /* Reset NOR/SRAM Init structure parameters values */
;;;228      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
000002  2100              MOVS     r1,#0
;;;229      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
000004  2202              MOVS     r2,#2
000006  e9c01200          STRD     r1,r2,[r0,#0]
;;;230      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
;;;231      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
00000a  6081              STR      r1,[r0,#8]
;;;232      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00000c  60c1              STR      r1,[r0,#0xc]
;;;233      FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
00000e  6101              STR      r1,[r0,#0x10]
;;;234      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000010  6141              STR      r1,[r0,#0x14]
;;;235      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
000012  6181              STR      r1,[r0,#0x18]
;;;236      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
;;;237      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000014  02d2              LSLS     r2,r2,#11
000016  61c1              STR      r1,[r0,#0x1c]
000018  e9c01208          STRD     r1,r2,[r0,#0x20]
;;;238      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
00001c  0052              LSLS     r2,r2,#1
00001e  e9c0210a          STRD     r2,r1,[r0,#0x28]
;;;239      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
;;;240      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
;;;241      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000022  6301              STR      r1,[r0,#0x30]
000024  6b43              LDR      r3,[r0,#0x34]
000026  220f              MOVS     r2,#0xf
;;;242      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000028  601a              STR      r2,[r3,#0]
00002a  6b43              LDR      r3,[r0,#0x34]
;;;243      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
00002c  605a              STR      r2,[r3,#4]
00002e  6b44              LDR      r4,[r0,#0x34]
000030  23ff              MOVS     r3,#0xff
;;;244      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
000032  60a3              STR      r3,[r4,#8]
000034  6b44              LDR      r4,[r0,#0x34]
;;;245      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
000036  60e2              STR      r2,[r4,#0xc]
000038  6b44              LDR      r4,[r0,#0x34]
;;;246      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
00003a  6122              STR      r2,[r4,#0x10]
00003c  6b44              LDR      r4,[r0,#0x34]
;;;247      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
00003e  6162              STR      r2,[r4,#0x14]
000040  6b44              LDR      r4,[r0,#0x34]
;;;248      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000042  61a1              STR      r1,[r4,#0x18]
000044  6b84              LDR      r4,[r0,#0x38]
;;;249      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000046  6022              STR      r2,[r4,#0]
000048  6b84              LDR      r4,[r0,#0x38]
;;;250      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
00004a  6062              STR      r2,[r4,#4]
00004c  6b84              LDR      r4,[r0,#0x38]
;;;251      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
00004e  60a3              STR      r3,[r4,#8]
000050  6b83              LDR      r3,[r0,#0x38]
;;;252      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
000052  60da              STR      r2,[r3,#0xc]
000054  6b83              LDR      r3,[r0,#0x38]
;;;253      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
000056  611a              STR      r2,[r3,#0x10]
000058  6b83              LDR      r3,[r0,#0x38]
;;;254      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
00005a  615a              STR      r2,[r3,#0x14]
00005c  6b80              LDR      r0,[r0,#0x38]
00005e  6181              STR      r1,[r0,#0x18]
;;;255    }
000060  bd10              POP      {r4,pc}
;;;256    
                          ENDP


                          AREA ||i.FSMC_PCCARDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDCmd PROC
;;;701      */
;;;702    void FSMC_PCCARDCmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;703    {
;;;704      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;705      
;;;706      if (NewState != DISABLE)
;;;707      {
;;;708        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;709        FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
000002  f04f4420          MOV      r4,#0xa0000000
000006  b158              CBZ      r0,|L16.32|
000008  2801              CMP      r0,#1                 ;704
00000a  d004              BEQ      |L16.22|
00000c  f44f7130          MOV      r1,#0x2c0             ;704
000010  4806              LDR      r0,|L16.44|
000012  f7fffffe          BL       assert_failed
                  |L16.22|
000016  f8540fa0          LDR      r0,[r4,#0xa0]!
00001a  f0400004          ORR      r0,r0,#4
00001e  e003              B        |L16.40|
                  |L16.32|
;;;710      }
;;;711      else
;;;712      {
;;;713        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;714        FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
000020  f8540fa0          LDR      r0,[r4,#0xa0]!
000024  4902              LDR      r1,|L16.48|
000026  4008              ANDS     r0,r0,r1
                  |L16.40|
000028  6020              STR      r0,[r4,#0]            ;709
;;;715      }
;;;716    }
00002a  bd10              POP      {r4,pc}
;;;717    /**
                          ENDP

                  |L16.44|
                          DCD      ||.conststring||
                  |L16.48|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_PCCARDDeInit||, CODE, READONLY, ALIGN=1

                  FSMC_PCCARDDeInit PROC
;;;606      */
;;;607    void FSMC_PCCARDDeInit(void)
000000  f04f4020          MOV      r0,#0xa0000000
;;;608    {
;;;609      /* Set the FSMC_Bank4 registers to their reset values */
;;;610      FSMC_Bank4->PCR4 = 0x00000018; 
000004  2118              MOVS     r1,#0x18
000006  f8401fa0          STR      r1,[r0,#0xa0]!
;;;611      FSMC_Bank4->SR4 = 0x00000000;	
00000a  2100              MOVS     r1,#0
00000c  6041              STR      r1,[r0,#4]
;;;612      FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
00000e  f04f31fc          MOV      r1,#0xfcfcfcfc
000012  6081              STR      r1,[r0,#8]
;;;613      FSMC_Bank4->PATT4 = 0xFCFCFCFC;
000014  60c1              STR      r1,[r0,#0xc]
;;;614      FSMC_Bank4->PIO4 = 0xFCFCFCFC;
000016  6101              STR      r1,[r0,#0x10]
;;;615    }
000018  4770              BX       lr
;;;616    
                          ENDP


                          AREA ||i.FSMC_PCCARDInit||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDInit PROC
;;;623      */
;;;624    void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  b510              PUSH     {r4,lr}
;;;625    {
000002  4604              MOV      r4,r0
;;;626      /* Check the parameters */
;;;627      assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
000004  6800              LDR      r0,[r0,#0]
000006  b130              CBZ      r0,|L18.22|
000008  2802              CMP      r0,#2
00000a  d004              BEQ      |L18.22|
00000c  f2402173          MOV      r1,#0x273
000010  4858              LDR      r0,|L18.372|
000012  f7fffffe          BL       assert_failed
                  |L18.22|
;;;628      assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
000016  6860              LDR      r0,[r4,#4]
000018  28ff              CMP      r0,#0xff
00001a  d904              BLS      |L18.38|
00001c  f44f711d          MOV      r1,#0x274
000020  4854              LDR      r0,|L18.372|
000022  f7fffffe          BL       assert_failed
                  |L18.38|
;;;629      assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
000026  68a0              LDR      r0,[r4,#8]
000028  28ff              CMP      r0,#0xff
00002a  d904              BLS      |L18.54|
00002c  f2402175          MOV      r1,#0x275
000030  4850              LDR      r0,|L18.372|
000032  f7fffffe          BL       assert_failed
                  |L18.54|
;;;630     
;;;631      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
000036  68e0              LDR      r0,[r4,#0xc]
000038  6800              LDR      r0,[r0,#0]
00003a  28ff              CMP      r0,#0xff
00003c  d904              BLS      |L18.72|
00003e  f2402177          MOV      r1,#0x277
000042  484c              LDR      r0,|L18.372|
000044  f7fffffe          BL       assert_failed
                  |L18.72|
;;;632      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
000048  68e0              LDR      r0,[r4,#0xc]
00004a  6840              LDR      r0,[r0,#4]
00004c  28ff              CMP      r0,#0xff
00004e  d904              BLS      |L18.90|
000050  f44f711e          MOV      r1,#0x278
000054  4847              LDR      r0,|L18.372|
000056  f7fffffe          BL       assert_failed
                  |L18.90|
;;;633      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
00005a  68e0              LDR      r0,[r4,#0xc]
00005c  6880              LDR      r0,[r0,#8]
00005e  28ff              CMP      r0,#0xff
000060  d904              BLS      |L18.108|
000062  f2402179          MOV      r1,#0x279
000066  4843              LDR      r0,|L18.372|
000068  f7fffffe          BL       assert_failed
                  |L18.108|
;;;634      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
00006c  68e0              LDR      r0,[r4,#0xc]
00006e  68c0              LDR      r0,[r0,#0xc]
000070  28ff              CMP      r0,#0xff
000072  d904              BLS      |L18.126|
000074  f240217a          MOV      r1,#0x27a
000078  483e              LDR      r0,|L18.372|
00007a  f7fffffe          BL       assert_failed
                  |L18.126|
;;;635      
;;;636      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
00007e  6920              LDR      r0,[r4,#0x10]
000080  6800              LDR      r0,[r0,#0]
000082  28ff              CMP      r0,#0xff
000084  d904              BLS      |L18.144|
000086  f44f711f          MOV      r1,#0x27c
00008a  483a              LDR      r0,|L18.372|
00008c  f7fffffe          BL       assert_failed
                  |L18.144|
;;;637      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
000090  6920              LDR      r0,[r4,#0x10]
000092  6840              LDR      r0,[r0,#4]
000094  28ff              CMP      r0,#0xff
000096  d904              BLS      |L18.162|
000098  f240217d          MOV      r1,#0x27d
00009c  4835              LDR      r0,|L18.372|
00009e  f7fffffe          BL       assert_failed
                  |L18.162|
;;;638      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
0000a2  6920              LDR      r0,[r4,#0x10]
0000a4  6880              LDR      r0,[r0,#8]
0000a6  28ff              CMP      r0,#0xff
0000a8  d904              BLS      |L18.180|
0000aa  f240217e          MOV      r1,#0x27e
0000ae  4831              LDR      r0,|L18.372|
0000b0  f7fffffe          BL       assert_failed
                  |L18.180|
;;;639      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
0000b4  6920              LDR      r0,[r4,#0x10]
0000b6  68c0              LDR      r0,[r0,#0xc]
0000b8  28ff              CMP      r0,#0xff
0000ba  d904              BLS      |L18.198|
0000bc  f240217f          MOV      r1,#0x27f
0000c0  482c              LDR      r0,|L18.372|
0000c2  f7fffffe          BL       assert_failed
                  |L18.198|
;;;640      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime));
0000c6  6960              LDR      r0,[r4,#0x14]
0000c8  6800              LDR      r0,[r0,#0]
0000ca  28ff              CMP      r0,#0xff
0000cc  d904              BLS      |L18.216|
0000ce  f44f7120          MOV      r1,#0x280
0000d2  4828              LDR      r0,|L18.372|
0000d4  f7fffffe          BL       assert_failed
                  |L18.216|
;;;641      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
0000d8  6960              LDR      r0,[r4,#0x14]
0000da  6840              LDR      r0,[r0,#4]
0000dc  28ff              CMP      r0,#0xff
0000de  d904              BLS      |L18.234|
0000e0  f2402181          MOV      r1,#0x281
0000e4  4823              LDR      r0,|L18.372|
0000e6  f7fffffe          BL       assert_failed
                  |L18.234|
;;;642      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
0000ea  6960              LDR      r0,[r4,#0x14]
0000ec  6880              LDR      r0,[r0,#8]
0000ee  28ff              CMP      r0,#0xff
0000f0  d904              BLS      |L18.252|
0000f2  f2402182          MOV      r1,#0x282
0000f6  481f              LDR      r0,|L18.372|
0000f8  f7fffffe          BL       assert_failed
                  |L18.252|
;;;643      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
0000fc  6960              LDR      r0,[r4,#0x14]
0000fe  68c0              LDR      r0,[r0,#0xc]
000100  28ff              CMP      r0,#0xff
000102  d904              BLS      |L18.270|
000104  f2402183          MOV      r1,#0x283
000108  481a              LDR      r0,|L18.372|
00010a  f7fffffe          BL       assert_failed
                  |L18.270|
00010e  e9d40100          LDRD     r0,r1,[r4,#0]
;;;644      
;;;645      /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
;;;646      FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
000112  ea402041          ORR      r0,r0,r1,LSL #9
000116  68a1              LDR      r1,[r4,#8]
000118  2210              MOVS     r2,#0x10
00011a  ea423141          ORR      r1,r2,r1,LSL #13
00011e  4308              ORRS     r0,r0,r1
000120  f04f4120          MOV      r1,#0xa0000000
000124  f8410fa0          STR      r0,[r1,#0xa0]!
;;;647                         FSMC_MemoryDataWidth_16b |  
;;;648                         (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
;;;649                         (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
;;;650                
;;;651      /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
;;;652      FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
000128  68e0              LDR      r0,[r4,#0xc]
00012a  e9d02300          LDRD     r2,r3,[r0,#0]
00012e  ea422203          ORR      r2,r2,r3,LSL #8
000132  8903              LDRH     r3,[r0,#8]
000134  7b00              LDRB     r0,[r0,#0xc]
000136  041b              LSLS     r3,r3,#16
000138  ea436000          ORR      r0,r3,r0,LSL #24
00013c  4302              ORRS     r2,r2,r0
00013e  608a              STR      r2,[r1,#8]
;;;653                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;654                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;655                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;656                
;;;657      /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;658      FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000140  6920              LDR      r0,[r4,#0x10]
000142  e9d02300          LDRD     r2,r3,[r0,#0]
000146  ea422203          ORR      r2,r2,r3,LSL #8
00014a  8903              LDRH     r3,[r0,#8]
00014c  7b00              LDRB     r0,[r0,#0xc]
00014e  041b              LSLS     r3,r3,#16
000150  ea436000          ORR      r0,r3,r0,LSL #24
000154  4302              ORRS     r2,r2,r0
000156  60ca              STR      r2,[r1,#0xc]
;;;659                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;660                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;661                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
;;;662                
;;;663      /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
;;;664      FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
000158  6960              LDR      r0,[r4,#0x14]
00015a  e9d02300          LDRD     r2,r3,[r0,#0]
00015e  ea422203          ORR      r2,r2,r3,LSL #8
000162  8903              LDRH     r3,[r0,#8]
000164  7b00              LDRB     r0,[r0,#0xc]
000166  041b              LSLS     r3,r3,#16
000168  ea436000          ORR      r0,r3,r0,LSL #24
00016c  4302              ORRS     r2,r2,r0
00016e  610a              STR      r2,[r1,#0x10]
;;;665                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;666                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;667                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
;;;668    }
000170  bd10              POP      {r4,pc}
;;;669    
                          ENDP

000172  0000              DCW      0x0000
                  |L18.372|
                          DCD      ||.conststring||

                          AREA ||i.FSMC_PCCARDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_PCCARDStructInit PROC
;;;675      */
;;;676    void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  2100              MOVS     r1,#0
;;;677    {
;;;678      /* Reset PCCARD Init structure parameters values */
;;;679      FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
;;;680      FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
000002  6001              STR      r1,[r0,#0]
;;;681      FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
000004  6041              STR      r1,[r0,#4]
;;;682      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000006  6081              STR      r1,[r0,#8]
000008  68c2              LDR      r2,[r0,#0xc]
00000a  21fc              MOVS     r1,#0xfc
;;;683      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00000c  6011              STR      r1,[r2,#0]
00000e  68c2              LDR      r2,[r0,#0xc]
;;;684      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000010  6051              STR      r1,[r2,#4]
000012  68c2              LDR      r2,[r0,#0xc]
;;;685      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000014  6091              STR      r1,[r2,#8]
000016  68c2              LDR      r2,[r0,#0xc]
;;;686      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000018  60d1              STR      r1,[r2,#0xc]
00001a  6902              LDR      r2,[r0,#0x10]
;;;687      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00001c  6011              STR      r1,[r2,#0]
00001e  6902              LDR      r2,[r0,#0x10]
;;;688      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000020  6051              STR      r1,[r2,#4]
000022  6902              LDR      r2,[r0,#0x10]
;;;689      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
000024  6091              STR      r1,[r2,#8]
000026  6902              LDR      r2,[r0,#0x10]
;;;690      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000028  60d1              STR      r1,[r2,#0xc]
00002a  6942              LDR      r2,[r0,#0x14]
;;;691      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00002c  6011              STR      r1,[r2,#0]
00002e  6942              LDR      r2,[r0,#0x14]
;;;692      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000030  6051              STR      r1,[r2,#4]
000032  6942              LDR      r2,[r0,#0x14]
;;;693      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000034  6091              STR      r1,[r2,#8]
000036  6940              LDR      r0,[r0,#0x14]
000038  60c1              STR      r1,[r0,#0xc]
;;;694    }
00003a  4770              BX       lr
;;;695    
                          ENDP


                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2e2e5c4f          DCB      "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_"
000004  535c6273
000008  705c7374
00000c  6d333266
000010  3430785c
000014  4c696272
000018  61726965
00001c  735c5354
000020  4d333246
000024  3478785f
000028  53746450
00002c  65726970
000030  685f    
000032  44726976          DCB      "Driver\\src\\stm32f4xx_fsmc.c",0
000036  65725c73
00003a  72635c73
00003e  746d3332
000042  66347878
000046  5f66736d
00004a  632e6300

;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_fsmc.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_fsmc_c_2e710976____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f4xx_fsmc_c_2e710976____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_fsmc_c_2e710976____REVSH|
#line 128
|__asm___16_stm32f4xx_fsmc_c_2e710976____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
