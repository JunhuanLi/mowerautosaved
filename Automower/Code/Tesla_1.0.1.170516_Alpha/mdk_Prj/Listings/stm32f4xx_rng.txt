; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f4xx_rng.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_rng.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\stm32f4xx_rng.crf ..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_rng.c]
                          THUMB

                          AREA ||i.RNG_ClearFlag||, CODE, READONLY, ALIGN=2

                  RNG_ClearFlag PROC
;;;326      */
;;;327    void RNG_ClearFlag(uint8_t RNG_FLAG)
000000  b510              PUSH     {r4,lr}
;;;328    {
000002  4604              MOV      r4,r0
;;;329      /* Check the parameters */
;;;330      assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
000004  2802              CMP      r0,#2
000006  d006              BEQ      |L1.22|
000008  2c04              CMP      r4,#4
00000a  d004              BEQ      |L1.22|
00000c  f44f71a5          MOV      r1,#0x14a
000010  4803              LDR      r0,|L1.32|
000012  f7fffffe          BL       assert_failed
                  |L1.22|
;;;331      /* Clear the selected RNG flags */
;;;332      RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
000016  4903              LDR      r1,|L1.36|
000018  ea6f1004          MVN      r0,r4,LSL #4
00001c  6008              STR      r0,[r1,#0]
;;;333    }
00001e  bd10              POP      {r4,pc}
;;;334    
                          ENDP

                  |L1.32|
                          DCD      ||.conststring||
                  |L1.36|
                          DCD      0x50060804

                          AREA ||i.RNG_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RNG_ClearITPendingBit PROC
;;;372      */
;;;373    void RNG_ClearITPendingBit(uint8_t RNG_IT)
000000  b510              PUSH     {r4,lr}
;;;374    {
000002  4604              MOV      r4,r0
;;;375      /* Check the parameters */
;;;376      assert_param(IS_RNG_IT(RNG_IT));
000004  f0100f9f          TST      r0,#0x9f
000008  d100              BNE      |L2.12|
00000a  b924              CBNZ     r4,|L2.22|
                  |L2.12|
00000c  f44f71bc          MOV      r1,#0x178
000010  4803              LDR      r0,|L2.32|
000012  f7fffffe          BL       assert_failed
                  |L2.22|
;;;377    
;;;378      /* Clear the selected RNG interrupt pending bit */
;;;379      RNG->SR = (uint8_t)~RNG_IT;
000016  4903              LDR      r1,|L2.36|
000018  43e0              MVNS     r0,r4
00001a  b2c0              UXTB     r0,r0
00001c  6008              STR      r0,[r1,#0]
;;;380    }
00001e  bd10              POP      {r4,pc}
;;;381    /**
                          ENDP

                  |L2.32|
                          DCD      ||.conststring||
                  |L2.36|
                          DCD      0x50060804

                          AREA ||i.RNG_Cmd||, CODE, READONLY, ALIGN=2

                  RNG_Cmd PROC
;;;108      */
;;;109    void RNG_Cmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;110    {
;;;111      /* Check the parameters */
;;;112      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;113    
;;;114      if (NewState != DISABLE)
;;;115      {
;;;116        /* Enable the RNG */
;;;117        RNG->CR |= RNG_CR_RNGEN;
000002  4c08              LDR      r4,|L3.36|
000004  b148              CBZ      r0,|L3.26|
000006  2801              CMP      r0,#1                 ;112
000008  d003              BEQ      |L3.18|
00000a  2170              MOVS     r1,#0x70              ;112
00000c  4806              LDR      r0,|L3.40|
00000e  f7fffffe          BL       assert_failed
                  |L3.18|
000012  6820              LDR      r0,[r4,#0]
000014  f0400004          ORR      r0,r0,#4
000018  e002              B        |L3.32|
                  |L3.26|
;;;118      }
;;;119      else
;;;120      {
;;;121        /* Disable the RNG */
;;;122        RNG->CR &= ~RNG_CR_RNGEN;
00001a  6820              LDR      r0,[r4,#0]
00001c  f0200004          BIC      r0,r0,#4
                  |L3.32|
000020  6020              STR      r0,[r4,#0]            ;117
;;;123      }
;;;124    }
000022  bd10              POP      {r4,pc}
;;;125    /**
                          ENDP

                  |L3.36|
                          DCD      0x50060800
                  |L3.40|
                          DCD      ||.conststring||

                          AREA ||i.RNG_DeInit||, CODE, READONLY, ALIGN=1

                  RNG_DeInit PROC
;;;93       */
;;;94     void RNG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;95     {
;;;96       /* Enable RNG reset state */
;;;97       RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
000002  2101              MOVS     r1,#1
000004  2040              MOVS     r0,#0x40
000006  f7fffffe          BL       RCC_AHB2PeriphResetCmd
;;;98     
;;;99       /* Release RNG from reset state */
;;;100      RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  e8bd4010          POP      {r4,lr}
000010  2040              MOVS     r0,#0x40
000012  f7ffbffe          B.W      RCC_AHB2PeriphResetCmd
;;;101    }
;;;102    
                          ENDP


                          AREA ||i.RNG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RNG_GetFlagStatus PROC
;;;293      */
;;;294    FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;295    {
;;;296      FlagStatus bitstatus = RESET;
000002  2500              MOVS     r5,#0
000004  4604              MOV      r4,r0                 ;295
;;;297      /* Check the parameters */
;;;298      assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
000006  2801              CMP      r0,#1
000008  d008              BEQ      |L5.28|
00000a  2c02              CMP      r4,#2
00000c  d006              BEQ      |L5.28|
00000e  2c04              CMP      r4,#4
000010  d004              BEQ      |L5.28|
000012  f44f7195          MOV      r1,#0x12a
000016  4805              LDR      r0,|L5.44|
000018  f7fffffe          BL       assert_failed
                  |L5.28|
;;;299    
;;;300      /* Check the status of the specified RNG flag */
;;;301      if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
00001c  4804              LDR      r0,|L5.48|
00001e  6800              LDR      r0,[r0,#0]
000020  4220              TST      r0,r4
000022  d000              BEQ      |L5.38|
;;;302      {
;;;303        /* RNG_FLAG is set */
;;;304        bitstatus = SET;
000024  2501              MOVS     r5,#1
                  |L5.38|
;;;305      }
;;;306      else
;;;307      {
;;;308        /* RNG_FLAG is reset */
;;;309        bitstatus = RESET;
;;;310      }
;;;311      /* Return the RNG_FLAG status */
;;;312      return  bitstatus;
000026  4628              MOV      r0,r5
;;;313    }
000028  bd70              POP      {r4-r6,pc}
;;;314    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      ||.conststring||
                  |L5.48|
                          DCD      0x50060804

                          AREA ||i.RNG_GetITStatus||, CODE, READONLY, ALIGN=2

                  RNG_GetITStatus PROC
;;;342      */
;;;343    ITStatus RNG_GetITStatus(uint8_t RNG_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;344    {
;;;345      ITStatus bitstatus = RESET;
000002  2500              MOVS     r5,#0
000004  4604              MOV      r4,r0                 ;344
;;;346      /* Check the parameters */
;;;347      assert_param(IS_RNG_GET_IT(RNG_IT));
000006  2820              CMP      r0,#0x20
000008  d006              BEQ      |L6.24|
00000a  2c40              CMP      r4,#0x40
00000c  d004              BEQ      |L6.24|
00000e  f240115b          MOV      r1,#0x15b
000012  4805              LDR      r0,|L6.40|
000014  f7fffffe          BL       assert_failed
                  |L6.24|
;;;348    
;;;349      /* Check the status of the specified RNG interrupt */
;;;350      if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
000018  4804              LDR      r0,|L6.44|
00001a  6800              LDR      r0,[r0,#0]
00001c  4220              TST      r0,r4
00001e  d000              BEQ      |L6.34|
;;;351      {
;;;352        /* RNG_IT is set */
;;;353        bitstatus = SET;
000020  2501              MOVS     r5,#1
                  |L6.34|
;;;354      }
;;;355      else
;;;356      {
;;;357        /* RNG_IT is reset */
;;;358        bitstatus = RESET;
;;;359      }
;;;360      /* Return the RNG_IT status */
;;;361      return bitstatus;
000022  4628              MOV      r0,r5
;;;362    }
000024  bd70              POP      {r4-r6,pc}
;;;363    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      ||.conststring||
                  |L6.44|
                          DCD      0x50060804

                          AREA ||i.RNG_GetRandomNumber||, CODE, READONLY, ALIGN=2

                  RNG_GetRandomNumber PROC
;;;170      */
;;;171    uint32_t RNG_GetRandomNumber(void)
000000  4801              LDR      r0,|L7.8|
;;;172    {
;;;173      /* Return the 32 bit random number from the DR register */
;;;174      return RNG->DR;
000002  6800              LDR      r0,[r0,#0]
;;;175    }
000004  4770              BX       lr
;;;176    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x50060808

                          AREA ||i.RNG_ITConfig||, CODE, READONLY, ALIGN=2

                  RNG_ITConfig PROC
;;;267      */
;;;268    void RNG_ITConfig(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;269    {
;;;270      /* Check the parameters */
;;;271      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;272    
;;;273      if (NewState != DISABLE)
;;;274      {
;;;275        /* Enable the RNG interrupt */
;;;276        RNG->CR |= RNG_CR_IE;
000002  4c09              LDR      r4,|L8.40|
000004  b150              CBZ      r0,|L8.28|
000006  2801              CMP      r0,#1                 ;271
000008  d004              BEQ      |L8.20|
00000a  f240110f          MOV      r1,#0x10f             ;271
00000e  4807              LDR      r0,|L8.44|
000010  f7fffffe          BL       assert_failed
                  |L8.20|
000014  6820              LDR      r0,[r4,#0]
000016  f0400008          ORR      r0,r0,#8
00001a  e002              B        |L8.34|
                  |L8.28|
;;;277      }
;;;278      else
;;;279      {
;;;280        /* Disable the RNG interrupt */
;;;281        RNG->CR &= ~RNG_CR_IE;
00001c  6820              LDR      r0,[r4,#0]
00001e  f0200008          BIC      r0,r0,#8
                  |L8.34|
000022  6020              STR      r0,[r4,#0]            ;276
;;;282      }
;;;283    }
000024  bd10              POP      {r4,pc}
;;;284    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      0x50060800
                  |L8.44|
                          DCD      ||.conststring||

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2e2e5c4f          DCB      "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_"
000004  535c6273
000008  705c7374
00000c  6d333266
000010  3430785c
000014  4c696272
000018  61726965
00001c  735c5354
000020  4d333246
000024  3478785f
000028  53746450
00002c  65726970
000030  685f    
000032  44726976          DCB      "Driver\\src\\stm32f4xx_rng.c",0
000036  65725c73
00003a  72635c73
00003e  746d3332
000042  66347878
000046  5f726e67
00004a  2e6300  

;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_rng.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rng_c_3ce7902d____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f4xx_rng_c_3ce7902d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rng_c_3ce7902d____REVSH|
#line 128
|__asm___15_stm32f4xx_rng_c_3ce7902d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
