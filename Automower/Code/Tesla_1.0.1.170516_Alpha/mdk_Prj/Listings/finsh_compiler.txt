; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\finsh_compiler.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\finsh_compiler.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\finsh_compiler.crf ..\OS\components\finsh\finsh_compiler.c]
                          THUMB

                          AREA ||i.finsh_compile||, CODE, READONLY, ALIGN=2

                  finsh_compile PROC
;;;42     
;;;43     static int finsh_compile(struct finsh_node* node)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;44     {
000004  0004              MOVS     r4,r0
000006  d075              BEQ      |L1.244|
;;;45         if (node != NULL)
;;;46         {
;;;47             /* compile child node */
;;;48             if (finsh_node_child(node) != NULL)
000008  6920              LDR      r0,[r4,#0x10]
00000a  b108              CBZ      r0,|L1.16|
;;;49                 finsh_compile(finsh_node_child(node));
00000c  f7fffffe          BL       finsh_compile
                  |L1.16|
;;;50     
;;;51             /* compile current node */
;;;52             switch (node->node_type)
000010  7822              LDRB     r2,[r4,#0]
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
;;;53             {
;;;54             case FINSH_NODE_ID:
;;;55                 {
;;;56                     /* identifier::syscall */
;;;57                     if (node->idtype & FINSH_IDTYPE_SYSCALL)
;;;58                     {
;;;59                         /* load address */
;;;60                         finsh_code_byte(FINSH_OP_LD_DWORD);
;;;61                         finsh_code_dword((long)node->id.syscall->func);
;;;62                     }
;;;63                     /* identifier::sysvar */
;;;64                     else if (node->idtype & FINSH_IDTYPE_SYSVAR)
;;;65                     {
;;;66                         struct finsh_sysvar* sysvar;
;;;67     
;;;68                         sysvar = node->id.sysvar;
;;;69                         if (sysvar != NULL)
;;;70                         {
;;;71                             switch (sysvar->type)
;;;72                             {
;;;73                             case finsh_type_char:
;;;74                             case finsh_type_uchar:
;;;75                                 if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;76                                 {
;;;77                                     /* load address */
;;;78                                     finsh_code_byte(FINSH_OP_LD_DWORD);
;;;79                                 }
;;;80                                 else
;;;81                                 {
;;;82                                     /* load value */
;;;83                                     finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
000016  2325              MOVS     r3,#0x25
;;;84                                 }
;;;85     
;;;86                                 finsh_code_dword((long)(sysvar->var));
;;;87                                 break;
;;;88     
;;;89                             case finsh_type_short:
;;;90                             case finsh_type_ushort:
;;;91                                 if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;92                                 {
;;;93                                     /* load address */
;;;94                                     finsh_code_byte(FINSH_OP_LD_DWORD);
;;;95                                 }
;;;96                                 else
;;;97                                 {
;;;98                                     /* load value */
;;;99                                     finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
000018  2626              MOVS     r6,#0x26
;;;100                                }
;;;101    
;;;102                                finsh_code_dword((long)(sysvar->var));
;;;103                                break;
;;;104    
;;;105                            case finsh_type_int:
;;;106                            case finsh_type_uint:
;;;107                            case finsh_type_long:
;;;108                            case finsh_type_ulong:
;;;109                            case finsh_type_charp:
;;;110                            case finsh_type_shortp:
;;;111                            case finsh_type_intp:
;;;112                            case finsh_type_longp:
;;;113                                if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;114                                {
;;;115                                    /* load address */
;;;116                                    finsh_code_byte(FINSH_OP_LD_DWORD);
;;;117                                }
;;;118                                else
;;;119                                {
;;;120                                    /* load value */
;;;121                                    finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
00001a  2727              MOVS     r7,#0x27
;;;122                                }
;;;123    
;;;124                                finsh_code_dword((long)(sysvar->var));
;;;125                                break;
;;;126                            }
;;;127                        }
;;;128                    }
;;;129                    /* identifier::var */
;;;130                    else
;;;131                    {
;;;132                        struct finsh_var* var;
;;;133    
;;;134                        var = node->id.var;
;;;135                        if (var != NULL)
;;;136                        {
;;;137                            switch (var->type)
;;;138                            {
;;;139                            case finsh_type_char:
;;;140                            case finsh_type_uchar:
;;;141                                if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;142                                {
;;;143                                    /* load address */
;;;144                                    finsh_code_byte(FINSH_OP_LD_DWORD);
;;;145                                }
;;;146                                else
;;;147                                {
;;;148                                    /* load value */
;;;149                                    finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
;;;150                                }
;;;151    
;;;152                                finsh_code_dword((long)&(var->value.char_value));
;;;153                                break;
;;;154    
;;;155                            case finsh_type_short:
;;;156                            case finsh_type_ushort:
;;;157                                if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;158                                {
;;;159                                    /* load address */
;;;160                                    finsh_code_byte(FINSH_OP_LD_DWORD);
;;;161                                }
;;;162                                else
;;;163                                {
;;;164                                    /* load value */
;;;165                                    finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
;;;166                                }
;;;167    
;;;168                                finsh_code_dword((long)&(var->value.short_value));
;;;169                                break;
;;;170    
;;;171                            case finsh_type_int:
;;;172                            case finsh_type_uint:
;;;173                            case finsh_type_long:
;;;174                            case finsh_type_ulong:
;;;175                            case finsh_type_charp:
;;;176                            case finsh_type_shortp:
;;;177                            case finsh_type_intp:
;;;178                            case finsh_type_longp:
;;;179                                if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;180                                {
;;;181                                    /* load address */
;;;182                                    finsh_code_byte(FINSH_OP_LD_DWORD);
;;;183                                }
;;;184                                else
;;;185                                {
;;;186                                    /* load value */
;;;187                                    finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
;;;188                                }
;;;189    
;;;190                                finsh_code_dword((long)&(var->value.long_value));
;;;191                                break;
;;;192                            }
;;;193                        }
;;;194                    }
;;;195                }
;;;196                break;
;;;197    
;;;198            /* load const */
;;;199            case FINSH_NODE_VALUE_CHAR:
;;;200                finsh_code_byte(FINSH_OP_LD_BYTE);
;;;201                finsh_code_byte(node->value.char_value);
;;;202                break;
;;;203    
;;;204            case FINSH_NODE_VALUE_INT:
;;;205            case FINSH_NODE_VALUE_LONG:
;;;206                finsh_code_byte(FINSH_OP_LD_DWORD);
;;;207                finsh_code_dword(node->value.long_value);
;;;208                break;
;;;209    
;;;210            case FINSH_NODE_VALUE_NULL:
;;;211            case FINSH_NODE_VALUE_STRING:
;;;212                finsh_code_byte(FINSH_OP_LD_DWORD);
;;;213                finsh_code_dword((u_long)node->value.ptr);
;;;214                break;
;;;215    
;;;216            /* arithmetic operation */
;;;217            case FINSH_NODE_SYS_ADD:
;;;218                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_ADD_BYTE);
;;;219                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_ADD_WORD);
;;;220                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_ADD_DWORD);
;;;221                break;
;;;222    
;;;223            case FINSH_NODE_SYS_SUB:
;;;224                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_SUB_BYTE);
;;;225                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_SUB_WORD);
;;;226                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_SUB_DWORD);
;;;227                break;
;;;228    
;;;229            case FINSH_NODE_SYS_MUL:
;;;230                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_MUL_BYTE);
;;;231                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_MUL_WORD);
;;;232                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_MUL_DWORD);
;;;233                break;
;;;234    
;;;235            case FINSH_NODE_SYS_DIV:
;;;236                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_DIV_BYTE);
;;;237                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_DIV_WORD);
;;;238                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_DIV_DWORD);
;;;239                break;
;;;240    
;;;241            case FINSH_NODE_SYS_MOD:
;;;242                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_MOD_BYTE);
;;;243                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_MOD_WORD);
;;;244                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_MOD_DWORD);
;;;245                break;
;;;246    
;;;247            /* bit operation */
;;;248            case FINSH_NODE_SYS_AND:
;;;249                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_AND_BYTE);
;;;250                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_AND_WORD);
;;;251                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_AND_DWORD);
;;;252                break;
;;;253    
;;;254            case FINSH_NODE_SYS_OR:
;;;255                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_OR_BYTE);
;;;256                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_OR_WORD);
;;;257                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_OR_DWORD);
;;;258                break;
;;;259    
;;;260            case FINSH_NODE_SYS_XOR:
;;;261                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_XOR_BYTE);
;;;262                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_XOR_WORD);
;;;263                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_XOR_DWORD);
;;;264                break;
;;;265    
;;;266            case FINSH_NODE_SYS_BITWISE:
;;;267                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_BITWISE_BYTE);
;;;268                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_BITWISE_WORD);
;;;269                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_BITWISE_DWORD);
;;;270                break;
;;;271    
;;;272            case FINSH_NODE_SYS_SHL:
;;;273                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_SHL_BYTE);
;;;274                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_SHL_WORD);
;;;275                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_SHL_DWORD);
;;;276                break;
;;;277    
;;;278            case FINSH_NODE_SYS_SHR:
;;;279                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_SHR_BYTE);
;;;280                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_SHR_WORD);
;;;281                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_SHR_DWORD);
;;;282                break;
;;;283    
;;;284            /* syscall */
;;;285            case FINSH_NODE_SYS_FUNC:
;;;286                {
;;;287                    int parameters;
;;;288                    struct finsh_node* sibling;
;;;289    
;;;290                    parameters = 0;
;;;291                    if (finsh_node_child(node) != NULL)
;;;292                    {
;;;293                        sibling = finsh_node_sibling(finsh_node_child(node));
;;;294                        while (sibling != NULL)
;;;295                        {
;;;296                            parameters ++;
;;;297                            sibling = finsh_node_sibling(sibling);
;;;298                        }
;;;299    
;;;300                        /* load address of function */
;;;301                        // finsh_code_dword((long)&(node->var->value.ptr));
;;;302    
;;;303                        /* syscall parameters */
;;;304                        finsh_code_byte(FINSH_OP_SYSCALL);
;;;305                        finsh_code_byte(parameters);
;;;306                    }
;;;307                }
;;;308                break;
;;;309    
;;;310            /* assign expression */
;;;311            case FINSH_NODE_SYS_ASSIGN:
;;;312                if (finsh_node_child(node) && finsh_node_child(node)->node_type == FINSH_NODE_ID)
;;;313                {
;;;314                    switch (finsh_node_child(node)->data_type)
;;;315                    {
;;;316                    case FINSH_DATA_TYPE_BYTE:
;;;317                        finsh_code_byte(FINSH_OP_ST_BYTE);
00001c  2528              MOVS     r5,#0x28
00001e  f8df86e4          LDR      r8,|L1.1796|
000022  f04f0a22          MOV      r10,#0x22             ;200
;;;318    
;;;319                        /* load value again */
;;;320                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE_STACK);
000026  f04f0b2d          MOV      r11,#0x2d
;;;321                        break;
;;;322    
;;;323                    case FINSH_DATA_TYPE_WORD:
;;;324                        finsh_code_byte(FINSH_OP_ST_WORD);
00002a  f04f0929          MOV      r9,#0x29
;;;325    
;;;326                        /* load value again */
;;;327                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD_STACK);
00002e  f04f0e2e          MOV      lr,#0x2e
000032  2a1c              CMP      r2,#0x1c              ;52
000034  d27a              BCS      |L1.300|
000036  e8dff002          TBB      [pc,r2]               ;52
00003a  790e              DCB      0x79,0x0e
00003c  9ba2a2a2          DCB      0x9b,0xa2,0xa2,0xa2
000040  a2b4c4d2          DCB      0xa2,0xb4,0xc4,0xd2
000044  f0feedec          DCB      0xf0,0xfe,0xed,0xec
000048  ebeae9e8          DCB      0xeb,0xea,0xe9,0xe8
00004c  e7e679e5          DCB      0xe7,0xe6,0x79,0xe5
000050  e4e3e2e1          DCB      0xe4,0xe3,0xe2,0xe1
000054  a1e0              DCB      0xa1,0xe0
000056  78a1              LDRB     r1,[r4,#2]            ;57
000058  0748              LSLS     r0,r1,#29             ;57
00005a  d516              BPL      |L1.138|
00005c  f8d80004          LDR      r0,[r8,#4]            ;60  ; finsh_compile_pc
000060  2124              MOVS     r1,#0x24              ;60
000062  f8001b01          STRB     r1,[r0],#1            ;60
000066  68a1              LDR      r1,[r4,#8]            ;61
000068  7a09              LDRB     r1,[r1,#8]            ;61
00006a  f8001b01          STRB     r1,[r0],#1            ;61
00006e  68a1              LDR      r1,[r4,#8]            ;61
000070  8909              LDRH     r1,[r1,#8]            ;61
000072  0a09              LSRS     r1,r1,#8              ;61
000074  f8001b01          STRB     r1,[r0],#1            ;61
000078  68a1              LDR      r1,[r4,#8]            ;61
00007a  6889              LDR      r1,[r1,#8]            ;61
00007c  0c09              LSRS     r1,r1,#16             ;61
00007e  f8001b02          STRB     r1,[r0],#2            ;61
000082  68a1              LDR      r1,[r4,#8]            ;61
000084  6889              LDR      r1,[r1,#8]            ;61
                  |L1.134|
000086  0e09              LSRS     r1,r1,#24             ;61
000088  e315              B        |L1.1718|
                  |L1.138|
00008a  0788              LSLS     r0,r1,#30             ;64
00008c  68a0              LDR      r0,[r4,#8]            ;64
00008e  d537              BPL      |L1.256|
000090  2800              CMP      r0,#0                 ;69
                  |L1.146|
000092  d073              BEQ      |L1.380|
000094  7a02              LDRB     r2,[r0,#8]            ;71
000096  1ed2              SUBS     r2,r2,#3              ;71
000098  2a0c              CMP      r2,#0xc               ;71
                  |L1.154|
00009a  d26f              BCS      |L1.380|
00009c  e8dff002          TBB      [pc,r2]               ;71
0000a0  0606221b          DCB      0x06,0x06,0x22,0x1b
0000a4  1b222222          DCB      0x1b,0x22,0x22,0x22
0000a8  22222222          DCB      0x22,0x22,0x22,0x22
0000ac  0709              LSLS     r1,r1,#28             ;75
0000ae  d41b              BMI      |L1.232|
0000b0  f8d81004          LDR      r1,[r8,#4]            ;83  ; finsh_compile_pc
0000b4  f8013b01          STRB     r3,[r1],#1            ;83
                  |L1.184|
0000b8  f8c81004          STR      r1,[r8,#4]            ;124  ; finsh_compile_pc
0000bc  7b02              LDRB     r2,[r0,#0xc]          ;124
0000be  f8012b01          STRB     r2,[r1],#1            ;124
0000c2  8982              LDRH     r2,[r0,#0xc]          ;124
0000c4  0a12              LSRS     r2,r2,#8              ;124
0000c6  f8012b01          STRB     r2,[r1],#1            ;124
0000ca  68c2              LDR      r2,[r0,#0xc]          ;124
0000cc  0c12              LSRS     r2,r2,#16             ;124
0000ce  f8012b02          STRB     r2,[r1],#2            ;124
0000d2  68c0              LDR      r0,[r0,#0xc]          ;124
0000d4  e048              B        |L1.360|
0000d6  0709              LSLS     r1,r1,#28             ;91
0000d8  d406              BMI      |L1.232|
0000da  f8d81004          LDR      r1,[r8,#4]            ;99  ; finsh_compile_pc
0000de  f8016b01          STRB     r6,[r1],#1            ;99
0000e2  e7e9              B        |L1.184|
0000e4  0709              LSLS     r1,r1,#28             ;113
0000e6  d506              BPL      |L1.246|
                  |L1.232|
0000e8  f8d81004          LDR      r1,[r8,#4]            ;116  ; finsh_compile_pc
0000ec  2224              MOVS     r2,#0x24              ;116
0000ee  f8012b01          STRB     r2,[r1],#1            ;116
0000f2  e7e1              B        |L1.184|
                  |L1.244|
0000f4  e2fc              B        |L1.1776|
                  |L1.246|
0000f6  f8d81004          LDR      r1,[r8,#4]            ;121  ; finsh_compile_pc
0000fa  f8017b01          STRB     r7,[r1],#1            ;121
0000fe  e7db              B        |L1.184|
                  |L1.256|
000100  2800              CMP      r0,#0                 ;135
000102  d0c6              BEQ      |L1.146|
000104  7c42              LDRB     r2,[r0,#0x11]         ;137
000106  1ed2              SUBS     r2,r2,#3              ;137
000108  2a0c              CMP      r2,#0xc               ;137
00010a  d2c6              BCS      |L1.154|
00010c  e8dff002          TBB      [pc,r2]               ;137
000110  06061b14          DCB      0x06,0x06,0x1b,0x14
000114  141b1b1b          DCB      0x14,0x1b,0x1b,0x1b
000118  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
00011c  0709              LSLS     r1,r1,#28             ;141
00011e  d506              BPL      |L1.302|
                  |L1.288|
000120  f8d81004          LDR      r1,[r8,#4]            ;144  ; finsh_compile_pc
000124  2224              MOVS     r2,#0x24              ;144
000126  f8012b01          STRB     r2,[r1],#1            ;144
00012a  e012              B        |L1.338|
                  |L1.300|
00012c  e2e7              B        |L1.1790|
                  |L1.302|
00012e  f8d81004          LDR      r1,[r8,#4]            ;149  ; finsh_compile_pc
000132  f8013b01          STRB     r3,[r1],#1            ;149
000136  e00c              B        |L1.338|
000138  0709              LSLS     r1,r1,#28             ;157
00013a  d4f1              BMI      |L1.288|
00013c  f8d81004          LDR      r1,[r8,#4]            ;165  ; finsh_compile_pc
000140  f8016b01          STRB     r6,[r1],#1            ;165
000144  e005              B        |L1.338|
000146  0709              LSLS     r1,r1,#28             ;179
000148  d4ea              BMI      |L1.288|
00014a  f8d81004          LDR      r1,[r8,#4]            ;187  ; finsh_compile_pc
00014e  f8017b01          STRB     r7,[r1],#1            ;187
                  |L1.338|
000152  3014              ADDS     r0,r0,#0x14           ;187
000154  f8c81004          STR      r1,[r8,#4]            ;152  ; finsh_compile_pc
000158  f8010b01          STRB     r0,[r1],#1            ;152
00015c  0a02              LSRS     r2,r0,#8              ;152
00015e  f8012b01          STRB     r2,[r1],#1            ;152
000162  0c02              LSRS     r2,r0,#16             ;152
000164  f8012b02          STRB     r2,[r1],#2            ;152
                  |L1.360|
000168  0e00              LSRS     r0,r0,#24             ;124
00016a  f8010c01          STRB     r0,[r1,#-1]           ;124
00016e  e251              B        |L1.1556|
000170  f8d80004          LDR      r0,[r8,#4]            ;200  ; finsh_compile_pc
000174  f800ab01          STRB     r10,[r0],#1           ;200
000178  7921              LDRB     r1,[r4,#4]            ;201
00017a  e01f              B        |L1.444|
                  |L1.380|
00017c  e1b2              B        |L1.1252|
00017e  f8d80004          LDR      r0,[r8,#4]            ;212  ; finsh_compile_pc
000182  2124              MOVS     r1,#0x24              ;212
000184  f8001b01          STRB     r1,[r0],#1            ;212
000188  7921              LDRB     r1,[r4,#4]            ;213
00018a  f8001b01          STRB     r1,[r0],#1            ;213
00018e  88a1              LDRH     r1,[r4,#4]            ;213
000190  0a09              LSRS     r1,r1,#8              ;213
000192  f8001b01          STRB     r1,[r0],#1            ;213
000196  6861              LDR      r1,[r4,#4]            ;213
000198  0c09              LSRS     r1,r1,#16             ;213
00019a  f8001b02          STRB     r1,[r0],#2            ;213
00019e  6861              LDR      r1,[r4,#4]            ;214
0001a0  e771              B        |L1.134|
0001a2  7861              LDRB     r1,[r4,#1]            ;218
0001a4  2901              CMP      r1,#1                 ;218
0001a6  d004              BEQ      |L1.434|
0001a8  2902              CMP      r1,#2                 ;219
                  |L1.426|
0001aa  d013              BEQ      |L1.468|
0001ac  2903              CMP      r1,#3                 ;220
0001ae  d0fc              BEQ      |L1.426|
0001b0  e29a              B        |L1.1768|
                  |L1.434|
0001b2  f8d81004          LDR      r1,[r8,#4]            ;218  ; finsh_compile_pc
0001b6  f8010b01          STRB     r0,[r1],#1            ;218
0001ba  e22b              B        |L1.1556|
                  |L1.444|
0001bc  f8001b01          STRB     r1,[r0],#1            ;201
0001c0  e290              B        |L1.1764|
0001c2  7860              LDRB     r0,[r4,#1]            ;224
0001c4  2801              CMP      r0,#1                 ;224
0001c6  d004              BEQ      |L1.466|
0001c8  2802              CMP      r0,#2                 ;225
0001ca  d004              BEQ      |L1.470|
0001cc  2803              CMP      r0,#3                 ;226
0001ce  d004              BEQ      |L1.474|
0001d0  e28a              B        |L1.1768|
                  |L1.466|
0001d2  2104              MOVS     r1,#4                 ;224
                  |L1.468|
0001d4  e290              B        |L1.1784|
                  |L1.470|
0001d6  2105              MOVS     r1,#5                 ;225
0001d8  e28e              B        |L1.1784|
                  |L1.474|
0001da  2106              MOVS     r1,#6                 ;226
0001dc  e28c              B        |L1.1784|
0001de  7860              LDRB     r0,[r4,#1]            ;230
0001e0  2801              CMP      r0,#1                 ;230
0001e2  d004              BEQ      |L1.494|
0001e4  2802              CMP      r0,#2                 ;231
0001e6  d004              BEQ      |L1.498|
0001e8  2803              CMP      r0,#3                 ;232
0001ea  d004              BEQ      |L1.502|
0001ec  e27c              B        |L1.1768|
                  |L1.494|
0001ee  210d              MOVS     r1,#0xd               ;230
0001f0  e282              B        |L1.1784|
                  |L1.498|
0001f2  210e              MOVS     r1,#0xe               ;231
0001f4  e280              B        |L1.1784|
                  |L1.502|
0001f6  210f              MOVS     r1,#0xf               ;232
0001f8  e27e              B        |L1.1784|
0001fa  e254              B        |L1.1702|
0001fc  e25e              B        |L1.1724|
0001fe  e1d8              B        |L1.1458|
000200  e171              B        |L1.1254|
000202  e108              B        |L1.1046|
000204  e0b3              B        |L1.878|
000206  e088              B        |L1.794|
000208  e077              B        |L1.762|
00020a  e068              B        |L1.734|
00020c  e059              B        |L1.706|
00020e  e04a              B        |L1.678|
000210  e03b              B        |L1.650|
000212  e02c              B        |L1.622|
000214  e01d              B        |L1.594|
000216  e00e              B        |L1.566|
000218  e7ff              B        |L1.538|
                  |L1.538|
00021a  7860              LDRB     r0,[r4,#1]            ;236
00021c  2801              CMP      r0,#1                 ;236
00021e  d004              BEQ      |L1.554|
000220  2802              CMP      r0,#2                 ;237
000222  d004              BEQ      |L1.558|
000224  2803              CMP      r0,#3                 ;238
000226  d004              BEQ      |L1.562|
                  |L1.552|
000228  e25e              B        |L1.1768|
                  |L1.554|
00022a  2107              MOVS     r1,#7                 ;236
00022c  e264              B        |L1.1784|
                  |L1.558|
00022e  2108              MOVS     r1,#8                 ;237
000230  e262              B        |L1.1784|
                  |L1.562|
000232  2109              MOVS     r1,#9                 ;238
000234  e260              B        |L1.1784|
                  |L1.566|
000236  7860              LDRB     r0,[r4,#1]            ;242
000238  2801              CMP      r0,#1                 ;242
00023a  d004              BEQ      |L1.582|
00023c  2802              CMP      r0,#2                 ;243
00023e  d004              BEQ      |L1.586|
000240  2803              CMP      r0,#3                 ;244
000242  d004              BEQ      |L1.590|
000244  e250              B        |L1.1768|
                  |L1.582|
000246  210a              MOVS     r1,#0xa               ;242
000248  e256              B        |L1.1784|
                  |L1.586|
00024a  210b              MOVS     r1,#0xb               ;243
00024c  e254              B        |L1.1784|
                  |L1.590|
00024e  210c              MOVS     r1,#0xc               ;244
000250  e252              B        |L1.1784|
                  |L1.594|
000252  7860              LDRB     r0,[r4,#1]            ;249
000254  2801              CMP      r0,#1                 ;249
000256  d004              BEQ      |L1.610|
000258  2802              CMP      r0,#2                 ;250
00025a  d004              BEQ      |L1.614|
00025c  2803              CMP      r0,#3                 ;251
00025e  d004              BEQ      |L1.618|
000260  e242              B        |L1.1768|
                  |L1.610|
000262  2110              MOVS     r1,#0x10              ;249
000264  e248              B        |L1.1784|
                  |L1.614|
000266  2111              MOVS     r1,#0x11              ;250
000268  e246              B        |L1.1784|
                  |L1.618|
00026a  2112              MOVS     r1,#0x12              ;251
00026c  e244              B        |L1.1784|
                  |L1.622|
00026e  7860              LDRB     r0,[r4,#1]            ;255
000270  2801              CMP      r0,#1                 ;255
000272  d004              BEQ      |L1.638|
000274  2802              CMP      r0,#2                 ;256
000276  d004              BEQ      |L1.642|
000278  2803              CMP      r0,#3                 ;257
00027a  d004              BEQ      |L1.646|
00027c  e234              B        |L1.1768|
                  |L1.638|
00027e  2113              MOVS     r1,#0x13              ;255
000280  e23a              B        |L1.1784|
                  |L1.642|
000282  2114              MOVS     r1,#0x14              ;256
000284  e238              B        |L1.1784|
                  |L1.646|
000286  2115              MOVS     r1,#0x15              ;257
000288  e236              B        |L1.1784|
                  |L1.650|
00028a  7860              LDRB     r0,[r4,#1]            ;261
00028c  2801              CMP      r0,#1                 ;261
00028e  d004              BEQ      |L1.666|
000290  2802              CMP      r0,#2                 ;262
000292  d004              BEQ      |L1.670|
000294  2803              CMP      r0,#3                 ;263
000296  d004              BEQ      |L1.674|
                  |L1.664|
000298  e226              B        |L1.1768|
                  |L1.666|
00029a  2116              MOVS     r1,#0x16              ;261
00029c  e22c              B        |L1.1784|
                  |L1.670|
00029e  2117              MOVS     r1,#0x17              ;262
0002a0  e22a              B        |L1.1784|
                  |L1.674|
0002a2  2118              MOVS     r1,#0x18              ;263
0002a4  e228              B        |L1.1784|
                  |L1.678|
0002a6  7860              LDRB     r0,[r4,#1]            ;267
0002a8  2801              CMP      r0,#1                 ;267
0002aa  d004              BEQ      |L1.694|
0002ac  2802              CMP      r0,#2                 ;268
0002ae  d004              BEQ      |L1.698|
0002b0  2803              CMP      r0,#3                 ;269
0002b2  d004              BEQ      |L1.702|
                  |L1.692|
0002b4  e218              B        |L1.1768|
                  |L1.694|
0002b6  2119              MOVS     r1,#0x19              ;267
0002b8  e21e              B        |L1.1784|
                  |L1.698|
0002ba  211a              MOVS     r1,#0x1a              ;268
0002bc  e21c              B        |L1.1784|
                  |L1.702|
0002be  211b              MOVS     r1,#0x1b              ;269
0002c0  e21a              B        |L1.1784|
                  |L1.706|
0002c2  7860              LDRB     r0,[r4,#1]            ;273
0002c4  2801              CMP      r0,#1                 ;273
0002c6  d004              BEQ      |L1.722|
0002c8  2802              CMP      r0,#2                 ;274
0002ca  d004              BEQ      |L1.726|
0002cc  2803              CMP      r0,#3                 ;275
0002ce  d004              BEQ      |L1.730|
0002d0  e20a              B        |L1.1768|
                  |L1.722|
0002d2  211c              MOVS     r1,#0x1c              ;273
0002d4  e210              B        |L1.1784|
                  |L1.726|
0002d6  211d              MOVS     r1,#0x1d              ;274
0002d8  e20e              B        |L1.1784|
                  |L1.730|
0002da  211e              MOVS     r1,#0x1e              ;275
0002dc  e20c              B        |L1.1784|
                  |L1.734|
0002de  7860              LDRB     r0,[r4,#1]            ;279
0002e0  2801              CMP      r0,#1                 ;279
0002e2  d004              BEQ      |L1.750|
0002e4  2802              CMP      r0,#2                 ;280
0002e6  d004              BEQ      |L1.754|
0002e8  2803              CMP      r0,#3                 ;281
0002ea  d004              BEQ      |L1.758|
0002ec  e1fc              B        |L1.1768|
                  |L1.750|
0002ee  211f              MOVS     r1,#0x1f              ;279
0002f0  e202              B        |L1.1784|
                  |L1.754|
0002f2  2120              MOVS     r1,#0x20              ;280
0002f4  e200              B        |L1.1784|
                  |L1.758|
0002f6  2121              MOVS     r1,#0x21              ;281
0002f8  e1fe              B        |L1.1784|
                  |L1.762|
0002fa  6920              LDR      r0,[r4,#0x10]         ;291
0002fc  2100              MOVS     r1,#0                 ;290
0002fe  2800              CMP      r0,#0                 ;291
000300  d092              BEQ      |L1.552|
000302  68c0              LDR      r0,[r0,#0xc]          ;293
000304  e001              B        |L1.778|
                  |L1.774|
000306  68c0              LDR      r0,[r0,#0xc]          ;297
000308  1c49              ADDS     r1,r1,#1              ;297
                  |L1.778|
00030a  2800              CMP      r0,#0                 ;294
00030c  d1fb              BNE      |L1.774|
00030e  f8d80004          LDR      r0,[r8,#4]            ;304  ; finsh_compile_pc
000312  222c              MOVS     r2,#0x2c              ;304
000314  f8002b01          STRB     r2,[r0],#1            ;304
000318  e750              B        |L1.444|
                  |L1.794|
00031a  6920              LDR      r0,[r4,#0x10]         ;312
00031c  b110              CBZ      r0,|L1.804|
00031e  7801              LDRB     r1,[r0,#0]            ;312
000320  2901              CMP      r1,#1                 ;312
000322  d003              BEQ      |L1.812|
                  |L1.804|
;;;328                        break;
;;;329    
;;;330                    case FINSH_DATA_TYPE_DWORD:
;;;331                        finsh_code_byte(FINSH_OP_ST_DWORD);
;;;332    
;;;333                        /* load value again */
;;;334                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;335                        break;
;;;336    
;;;337                    default:
;;;338                        finsh_error_set(FINSH_ERROR_UNKNOWN_TYPE);
;;;339                    }
;;;340                }
;;;341                else if (finsh_node_child(node)->node_type == FINSH_NODE_SYS_GETVALUE)
000324  7801              LDRB     r1,[r0,#0]
000326  2919              CMP      r1,#0x19
000328  d012              BEQ      |L1.848|
00032a  e1dd              B        |L1.1768|
                  |L1.812|
00032c  7840              LDRB     r0,[r0,#1]            ;314
00032e  e012              B        |L1.854|
                  |L1.816|
000330  2803              CMP      r0,#3                 ;314
000332  d015              BEQ      |L1.864|
;;;342                {
;;;343                    switch ((finsh_node_child(node)->data_type) & 0x0F)
;;;344                    {
;;;345                    case FINSH_DATA_TYPE_BYTE:
;;;346                        finsh_code_byte(FINSH_OP_ST_BYTE);
;;;347    
;;;348                        /* load value again */
;;;349                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE_STACK);
;;;350                        break;
;;;351    
;;;352                    case FINSH_DATA_TYPE_WORD:
;;;353                        finsh_code_byte(FINSH_OP_ST_WORD);
;;;354    
;;;355                        /* load value again */
;;;356                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD_STACK);
;;;357                        break;
;;;358    
;;;359                    case FINSH_DATA_TYPE_DWORD:
;;;360                        finsh_code_byte(FINSH_OP_ST_DWORD);
;;;361    
;;;362                        /* load value again */
;;;363                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;364                        break;
;;;365    
;;;366                    default:
;;;367                        finsh_error_set(FINSH_ERROR_UNKNOWN_TYPE);
000334  2003              MOVS     r0,#3
                  |L1.822|
000336  f7fffffe          BL       finsh_error_set
00033a  e1d5              B        |L1.1768|
                  |L1.828|
00033c  f8d80004          LDR      r0,[r8,#4]            ;317  ; finsh_compile_pc
000340  f8005b01          STRB     r5,[r0],#1            ;317
000344  e1c7              B        |L1.1750|
                  |L1.838|
000346  f8d80004          LDR      r0,[r8,#4]            ;324  ; finsh_compile_pc
00034a  f8009b01          STRB     r9,[r0],#1            ;324
00034e  e1c7              B        |L1.1760|
                  |L1.848|
000350  7840              LDRB     r0,[r0,#1]            ;343
000352  f000000f          AND      r0,r0,#0xf            ;343
                  |L1.854|
000356  2801              CMP      r0,#1                 ;343
000358  d0f0              BEQ      |L1.828|
00035a  2802              CMP      r0,#2                 ;343
00035c  d0f3              BEQ      |L1.838|
00035e  e7e7              B        |L1.816|
                  |L1.864|
000360  f8d80004          LDR      r0,[r8,#4]            ;360  ; finsh_compile_pc
000364  212a              MOVS     r1,#0x2a              ;360
000366  f8001b01          STRB     r1,[r0],#1            ;360
00036a  212f              MOVS     r1,#0x2f              ;363
00036c  e726              B        |L1.444|
                  |L1.878|
;;;368                    }
;;;369                }
;;;370                break;
;;;371    
;;;372            /* pre-increase */
;;;373            case FINSH_NODE_SYS_PREINC:
;;;374                if (finsh_node_child(node) && finsh_node_child(node)->node_type == FINSH_NODE_ID)
00036e  6922              LDR      r2,[r4,#0x10]
000370  2a00              CMP      r2,#0
000372  d091              BEQ      |L1.664|
000374  f892c000          LDRB     r12,[r2,#0]
000378  f1bc0f01          CMP      r12,#1
00037c  d18c              BNE      |L1.664|
;;;375                {
;;;376                    struct finsh_var* var;
;;;377                    var = finsh_node_child(node)->id.var;
;;;378    
;;;379                    /* ld_dword &id */
;;;380                    // finsh_code_byte(FINSH_OP_LD_DWORD);
;;;381    
;;;382                    switch (node->data_type)
00037e  f8d2c008          LDR      r12,[r2,#8]
000382  7862              LDRB     r2,[r4,#1]
000384  2a01              CMP      r2,#1
000386  d004              BEQ      |L1.914|
000388  2a02              CMP      r2,#2
00038a  d016              BEQ      |L1.954|
00038c  2a03              CMP      r2,#3
00038e  d191              BNE      |L1.692|
000390  e029              B        |L1.998|
                  |L1.914|
;;;383                    {
;;;384                    case FINSH_DATA_TYPE_BYTE:
;;;385                        /* address */
;;;386                        // finsh_code_dword((long)&(var->value.char_value));
;;;387    
;;;388                        /* ld_value_byte &id */
;;;389                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
000392  f8d81004          LDR      r1,[r8,#4]  ; finsh_compile_pc
000396  f10c0c14          ADD      r12,r12,#0x14
;;;390                        finsh_code_dword((long)&(var->value.char_value));
00039a  ea4f221c          LSR      r2,r12,#8
00039e  700b              STRB     r3,[r1,#0]            ;389
0003a0  f881c001          STRB     r12,[r1,#1]
0003a4  708a              STRB     r2,[r1,#2]
0003a6  ea4f421c          LSR      r2,r12,#16
0003aa  70ca              STRB     r2,[r1,#3]
0003ac  ea4f621c          LSR      r2,r12,#24
0003b0  710a              STRB     r2,[r1,#4]
;;;391    
;;;392                        /* ld_byte 1 */
;;;393                        finsh_code_byte(FINSH_OP_LD_BYTE);
0003b2  f881a005          STRB     r10,[r1,#5]
;;;394                        finsh_code_byte(1);
0003b6  7188              STRB     r0,[r1,#6]
;;;395    
;;;396                        /* add_byte */
;;;397                        finsh_code_byte(FINSH_OP_ADD_BYTE);
;;;398                        /* st_byte */
;;;399                        finsh_code_byte(FINSH_OP_ST_BYTE);
;;;400    
;;;401                        /* load value again */
;;;402                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;403    
;;;404                        break;
0003b8  e053              B        |L1.1122|
                  |L1.954|
;;;405    
;;;406                    case FINSH_DATA_TYPE_WORD:
;;;407                        /* address */
;;;408                        // finsh_code_dword((long)&(var->value.short_value));
;;;409    
;;;410                        /* ld_value_word &id */
;;;411                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
0003ba  f8d82004          LDR      r2,[r8,#4]  ; finsh_compile_pc
0003be  f10c0c14          ADD      r12,r12,#0x14
;;;412                        finsh_code_dword((long)&(var->value.short_value));
0003c2  ea4f231c          LSR      r3,r12,#8
0003c6  7016              STRB     r6,[r2,#0]            ;411
0003c8  f882c001          STRB     r12,[r2,#1]
0003cc  7093              STRB     r3,[r2,#2]
0003ce  ea4f431c          LSR      r3,r12,#16
0003d2  70d3              STRB     r3,[r2,#3]
0003d4  ea4f631c          LSR      r3,r12,#24
0003d8  7113              STRB     r3,[r2,#4]
;;;413    
;;;414                        /* ld_word 1 */
;;;415                        finsh_code_byte(FINSH_OP_LD_WORD);
0003da  2323              MOVS     r3,#0x23
0003dc  7153              STRB     r3,[r2,#5]
;;;416                        finsh_code_word(1);
0003de  7190              STRB     r0,[r2,#6]
0003e0  71d1              STRB     r1,[r2,#7]
;;;417    
;;;418                        /* add_word */
;;;419                        finsh_code_byte(FINSH_OP_ADD_WORD);
0003e2  2002              MOVS     r0,#2
;;;420                        /* st_word */
;;;421                        finsh_code_byte(FINSH_OP_ST_WORD);
;;;422    
;;;423                        /* load value again */
;;;424                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;425    
;;;426                        break;
0003e4  e058              B        |L1.1176|
                  |L1.998|
;;;427    
;;;428                    case FINSH_DATA_TYPE_DWORD:
;;;429                        /* address */
;;;430                        // finsh_code_dword((long)&(var->value.long_value));
;;;431    
;;;432                        /* ld_dword &id */
;;;433                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
0003e6  f8d82004          LDR      r2,[r8,#4]  ; finsh_compile_pc
0003ea  f10c0c14          ADD      r12,r12,#0x14
;;;434                        finsh_code_dword((long)&(var->value.long_value));
0003ee  ea4f231c          LSR      r3,r12,#8
0003f2  7017              STRB     r7,[r2,#0]            ;433
0003f4  f882c001          STRB     r12,[r2,#1]
0003f8  7093              STRB     r3,[r2,#2]
0003fa  ea4f431c          LSR      r3,r12,#16
0003fe  70d3              STRB     r3,[r2,#3]
000400  ea4f631c          LSR      r3,r12,#24
000404  7113              STRB     r3,[r2,#4]
;;;435    
;;;436                        /* ld_dword 1 */
;;;437                        finsh_code_byte(FINSH_OP_LD_DWORD);
000406  2324              MOVS     r3,#0x24
000408  7153              STRB     r3,[r2,#5]
;;;438                        finsh_code_dword(1);
00040a  7190              STRB     r0,[r2,#6]
00040c  71d1              STRB     r1,[r2,#7]
00040e  7211              STRB     r1,[r2,#8]
000410  7251              STRB     r1,[r2,#9]
;;;439    
;;;440                        /* add_dword */
;;;441                        finsh_code_byte(FINSH_OP_ADD_DWORD);
000412  2003              MOVS     r0,#3
;;;442                        /* st_dword */
;;;443                        finsh_code_byte(FINSH_OP_ST_DWORD);
;;;444    
;;;445                        /* load value again */
;;;446                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;447    
;;;448                        break;
000414  e05e              B        |L1.1236|
                  |L1.1046|
;;;449                    }
;;;450                }
;;;451                break;
;;;452    
;;;453            /* pre-decrease */
;;;454            case FINSH_NODE_SYS_PREDEC:
;;;455                if (finsh_node_child(node) && finsh_node_child(node)->node_type == FINSH_NODE_ID)
000416  6922              LDR      r2,[r4,#0x10]
000418  2a00              CMP      r2,#0
00041a  d063              BEQ      |L1.1252|
00041c  f892c000          LDRB     r12,[r2,#0]
000420  f1bc0f01          CMP      r12,#1
000424  d15e              BNE      |L1.1252|
;;;456                {
;;;457                    struct finsh_var* var;
;;;458                    var = finsh_node_child(node)->id.var;
;;;459    
;;;460                    /* ld_dword &id */
;;;461                    // finsh_code_byte(FINSH_OP_LD_DWORD);
;;;462    
;;;463                    switch (node->data_type)
000426  f8d2c008          LDR      r12,[r2,#8]
00042a  7862              LDRB     r2,[r4,#1]
00042c  2a01              CMP      r2,#1
00042e  d004              BEQ      |L1.1082|
000430  2a02              CMP      r2,#2
000432  d01c              BEQ      |L1.1134|
000434  2a03              CMP      r2,#3
000436  d155              BNE      |L1.1252|
000438  e035              B        |L1.1190|
                  |L1.1082|
;;;464                    {
;;;465                    case FINSH_DATA_TYPE_BYTE:
;;;466                        /* address */
;;;467                        // finsh_code_dword((long)&(var->value.char_value));
;;;468    
;;;469                        /* ld_value_byte &id */
;;;470                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
00043a  f8d81004          LDR      r1,[r8,#4]  ; finsh_compile_pc
00043e  f10c0c14          ADD      r12,r12,#0x14
;;;471                        finsh_code_dword((long)&(var->value.char_value));
000442  ea4f221c          LSR      r2,r12,#8
000446  700b              STRB     r3,[r1,#0]            ;470
000448  f881c001          STRB     r12,[r1,#1]
00044c  708a              STRB     r2,[r1,#2]
00044e  ea4f421c          LSR      r2,r12,#16
000452  70ca              STRB     r2,[r1,#3]
000454  ea4f621c          LSR      r2,r12,#24
000458  710a              STRB     r2,[r1,#4]
;;;472    
;;;473                        /* ld_byte 1 */
;;;474                        finsh_code_byte(FINSH_OP_LD_BYTE);
00045a  f881a005          STRB     r10,[r1,#5]
;;;475                        finsh_code_byte(1);
00045e  7188              STRB     r0,[r1,#6]
;;;476    
;;;477                        /* add_byte */
;;;478                        finsh_code_byte(FINSH_OP_SUB_BYTE);
000460  2004              MOVS     r0,#4
                  |L1.1122|
000462  71c8              STRB     r0,[r1,#7]            ;397
000464  720d              STRB     r5,[r1,#8]            ;399
000466  202f              MOVS     r0,#0x2f              ;402
000468  7248              STRB     r0,[r1,#9]            ;402
00046a  310a              ADDS     r1,r1,#0xa            ;402
00046c  e0d2              B        |L1.1556|
                  |L1.1134|
;;;479                        /* st_byte */
;;;480                        finsh_code_byte(FINSH_OP_ST_BYTE);
;;;481    
;;;482                        /* load value again */
;;;483                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;484    
;;;485                        break;
;;;486    
;;;487                    case FINSH_DATA_TYPE_WORD:
;;;488                        /* address */
;;;489                        // finsh_code_dword((long)&(var->value.short_value));
;;;490    
;;;491                        /* ld_value_word &id */
;;;492                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
00046e  f8d82004          LDR      r2,[r8,#4]  ; finsh_compile_pc
000472  f10c0c14          ADD      r12,r12,#0x14
;;;493                        finsh_code_dword((long)&(var->value.short_value));
000476  ea4f231c          LSR      r3,r12,#8
00047a  7016              STRB     r6,[r2,#0]            ;492
00047c  f882c001          STRB     r12,[r2,#1]
000480  7093              STRB     r3,[r2,#2]
000482  ea4f431c          LSR      r3,r12,#16
000486  70d3              STRB     r3,[r2,#3]
000488  ea4f631c          LSR      r3,r12,#24
00048c  7113              STRB     r3,[r2,#4]
;;;494    
;;;495                        /* ld_word 1 */
;;;496                        finsh_code_byte(FINSH_OP_LD_WORD);
00048e  2323              MOVS     r3,#0x23
000490  7153              STRB     r3,[r2,#5]
;;;497                        finsh_code_word(1);
000492  7190              STRB     r0,[r2,#6]
000494  71d1              STRB     r1,[r2,#7]
;;;498    
;;;499                        /* add_word */
;;;500                        finsh_code_byte(FINSH_OP_SUB_WORD);
000496  2005              MOVS     r0,#5
                  |L1.1176|
000498  7210              STRB     r0,[r2,#8]            ;419
00049a  f8829009          STRB     r9,[r2,#9]            ;421
00049e  202f              MOVS     r0,#0x2f              ;424
0004a0  7290              STRB     r0,[r2,#0xa]          ;424
0004a2  320b              ADDS     r2,r2,#0xb            ;424
0004a4  e01c              B        |L1.1248|
                  |L1.1190|
;;;501                        /* st_word */
;;;502                        finsh_code_byte(FINSH_OP_ST_WORD);
;;;503    
;;;504                        /* load value again */
;;;505                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;506    
;;;507                        break;
;;;508    
;;;509                    case FINSH_DATA_TYPE_DWORD:
;;;510                        /* address */
;;;511                        // finsh_code_dword((long)&(var->value.long_value));
;;;512    
;;;513                        /* ld_dword &id */
;;;514                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
0004a6  f8d82004          LDR      r2,[r8,#4]  ; finsh_compile_pc
0004aa  f10c0c14          ADD      r12,r12,#0x14
;;;515                        finsh_code_dword((long)&(var->value.long_value));
0004ae  ea4f231c          LSR      r3,r12,#8
0004b2  7017              STRB     r7,[r2,#0]            ;514
0004b4  f882c001          STRB     r12,[r2,#1]
0004b8  7093              STRB     r3,[r2,#2]
0004ba  ea4f431c          LSR      r3,r12,#16
0004be  70d3              STRB     r3,[r2,#3]
0004c0  ea4f631c          LSR      r3,r12,#24
0004c4  7113              STRB     r3,[r2,#4]
;;;516    
;;;517                        /* ld_dword 1 */
;;;518                        finsh_code_byte(FINSH_OP_LD_DWORD);
0004c6  2324              MOVS     r3,#0x24
0004c8  7153              STRB     r3,[r2,#5]
;;;519                        finsh_code_dword(1);
0004ca  7190              STRB     r0,[r2,#6]
0004cc  71d1              STRB     r1,[r2,#7]
0004ce  7211              STRB     r1,[r2,#8]
0004d0  7251              STRB     r1,[r2,#9]
;;;520    
;;;521                        /* add_dword */
;;;522                        finsh_code_byte(FINSH_OP_SUB_DWORD);
0004d2  2006              MOVS     r0,#6
                  |L1.1236|
0004d4  7290              STRB     r0,[r2,#0xa]          ;441
0004d6  202a              MOVS     r0,#0x2a              ;443
0004d8  72d0              STRB     r0,[r2,#0xb]          ;443
0004da  202f              MOVS     r0,#0x2f              ;446
0004dc  7310              STRB     r0,[r2,#0xc]          ;446
0004de  320d              ADDS     r2,r2,#0xd            ;446
                  |L1.1248|
0004e0  f8c82004          STR      r2,[r8,#4]            ;505  ; finsh_compile_pc
                  |L1.1252|
0004e4  e100              B        |L1.1768|
                  |L1.1254|
;;;523                        /* st_dword */
;;;524                        finsh_code_byte(FINSH_OP_ST_DWORD);
;;;525    
;;;526                        /* load value again */
;;;527                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;528    
;;;529                        break;
;;;530                    }
;;;531                }
;;;532                break;
;;;533    
;;;534            /* increase */
;;;535            case FINSH_NODE_SYS_INC:
;;;536                if (finsh_node_child(node) && finsh_node_child(node)->node_type == FINSH_NODE_ID)
0004e6  6922              LDR      r2,[r4,#0x10]
0004e8  b3f2              CBZ      r2,|L1.1384|
0004ea  f892c000          LDRB     r12,[r2,#0]
0004ee  f1bc0f01          CMP      r12,#1
0004f2  d139              BNE      |L1.1384|
;;;537                {
;;;538                    struct finsh_var* var;
;;;539                    var = finsh_node_child(node)->id.var;
;;;540    
;;;541                    switch (node->data_type)
0004f4  f894c001          LDRB     r12,[r4,#1]
0004f8  6892              LDR      r2,[r2,#8]            ;539
0004fa  f1bc0f01          CMP      r12,#1
0004fe  d006              BEQ      |L1.1294|
000500  f1bc0f02          CMP      r12,#2
000504  d01b              BEQ      |L1.1342|
000506  f1bc0f03          CMP      r12,#3
00050a  d12d              BNE      |L1.1384|
00050c  e033              B        |L1.1398|
                  |L1.1294|
;;;542                    {
;;;543                    case FINSH_DATA_TYPE_BYTE:
;;;544                        /* ld_value_byte &id */
;;;545                        // finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
;;;546                        // finsh_code_dword((long)&(var->value.char_value));
;;;547    
;;;548                        /* ld_dword &id */
;;;549                        finsh_code_byte(FINSH_OP_LD_DWORD);
00050e  f8d81004          LDR      r1,[r8,#4]  ; finsh_compile_pc
000512  3214              ADDS     r2,r2,#0x14
000514  2624              MOVS     r6,#0x24
000516  700e              STRB     r6,[r1,#0]
;;;550                        finsh_code_dword((long)&(var->value.char_value));
000518  0a17              LSRS     r7,r2,#8
00051a  704a              STRB     r2,[r1,#1]
00051c  708f              STRB     r7,[r1,#2]
00051e  0c16              LSRS     r6,r2,#16
000520  70ce              STRB     r6,[r1,#3]
000522  ea4f6c12          LSR      r12,r2,#24
000526  f881c004          STRB     r12,[r1,#4]
;;;551    
;;;552                        /* ld_value_byte &id */
;;;553                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
00052a  714b              STRB     r3,[r1,#5]
;;;554                        finsh_code_dword((long)&(var->value.char_value));
00052c  718a              STRB     r2,[r1,#6]
00052e  71cf              STRB     r7,[r1,#7]
000530  720e              STRB     r6,[r1,#8]
000532  f881c009          STRB     r12,[r1,#9]
;;;555    
;;;556                        /* ld_byte 1 */
;;;557                        finsh_code_byte(FINSH_OP_LD_BYTE);
000536  f881a00a          STRB     r10,[r1,#0xa]
;;;558                        finsh_code_byte(1);
00053a  72c8              STRB     r0,[r1,#0xb]
;;;559    
;;;560                        /* add_byte */
;;;561                        finsh_code_byte(FINSH_OP_ADD_BYTE);
;;;562                        /* get byte */
;;;563                        finsh_code_byte(FINSH_OP_ST_BYTE);
;;;564    
;;;565                        /* pop */
;;;566                        finsh_code_byte(FINSH_OP_POP);
;;;567                        break;
00053c  e065              B        |L1.1546|
                  |L1.1342|
;;;568    
;;;569                    case FINSH_DATA_TYPE_WORD:
;;;570                        /* ld_value_word &id */
;;;571                        // finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
;;;572                        // finsh_code_dword((long)&(var->value.short_value));
;;;573    
;;;574                        /* ld_dword &id */
;;;575                        finsh_code_byte(FINSH_OP_LD_DWORD);
00053e  f8d83004          LDR      r3,[r8,#4]  ; finsh_compile_pc
000542  3214              ADDS     r2,r2,#0x14
000544  2524              MOVS     r5,#0x24
000546  701d              STRB     r5,[r3,#0]
;;;576                        finsh_code_dword((long)&(var->value.short_value));
000548  0a17              LSRS     r7,r2,#8
00054a  705a              STRB     r2,[r3,#1]
00054c  709f              STRB     r7,[r3,#2]
00054e  0c15              LSRS     r5,r2,#16
000550  70dd              STRB     r5,[r3,#3]
000552  ea4f6c12          LSR      r12,r2,#24
000556  f883c004          STRB     r12,[r3,#4]
;;;577    
;;;578                        /* ld_value_word &id */
;;;579                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
00055a  715e              STRB     r6,[r3,#5]
;;;580                        finsh_code_dword((long)&(var->value.short_value));
00055c  719a              STRB     r2,[r3,#6]
00055e  71df              STRB     r7,[r3,#7]
000560  721d              STRB     r5,[r3,#8]
000562  f883c009          STRB     r12,[r3,#9]
;;;581    
;;;582                        /* ld_word 1 */
;;;583                        finsh_code_byte(FINSH_OP_LD_WORD);
000566  e000              B        |L1.1386|
                  |L1.1384|
000568  e056              B        |L1.1560|
                  |L1.1386|
00056a  2223              MOVS     r2,#0x23
00056c  729a              STRB     r2,[r3,#0xa]
;;;584                        finsh_code_word(1);
00056e  72d8              STRB     r0,[r3,#0xb]
000570  7319              STRB     r1,[r3,#0xc]
;;;585    
;;;586                        /* add_byte */
;;;587                        finsh_code_byte(FINSH_OP_ADD_WORD);
000572  2002              MOVS     r0,#2
;;;588                        /* get byte */
;;;589                        finsh_code_byte(FINSH_OP_ST_WORD);
;;;590    
;;;591                        /* pop */
;;;592                        finsh_code_byte(FINSH_OP_POP);
;;;593                        break;
000574  e06a              B        |L1.1612|
                  |L1.1398|
;;;594    
;;;595                    case FINSH_DATA_TYPE_DWORD:
;;;596                        /* ld_value_dword &id */
;;;597                        // finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
;;;598                        // finsh_code_dword((long)&(var->value.long_value));
;;;599    
;;;600                        /* ld_dword &id */
;;;601                        finsh_code_byte(FINSH_OP_LD_DWORD);
000576  f8d83004          LDR      r3,[r8,#4]  ; finsh_compile_pc
00057a  3214              ADDS     r2,r2,#0x14
00057c  f04f0924          MOV      r9,#0x24
000580  f8839000          STRB     r9,[r3,#0]
;;;602                        finsh_code_dword((long)&(var->value.long_value));
000584  0a16              LSRS     r6,r2,#8
000586  705a              STRB     r2,[r3,#1]
000588  709e              STRB     r6,[r3,#2]
00058a  0c15              LSRS     r5,r2,#16
00058c  70dd              STRB     r5,[r3,#3]
00058e  ea4f6c12          LSR      r12,r2,#24
000592  f883c004          STRB     r12,[r3,#4]
;;;603    
;;;604                        /* ld_value_dword &id */
;;;605                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
000596  715f              STRB     r7,[r3,#5]
;;;606                        finsh_code_dword((long)&(var->value.long_value));
000598  719a              STRB     r2,[r3,#6]
00059a  71de              STRB     r6,[r3,#7]
00059c  721d              STRB     r5,[r3,#8]
00059e  f883c009          STRB     r12,[r3,#9]
;;;607    
;;;608                        /* ld_dword 1 */
;;;609                        finsh_code_byte(FINSH_OP_LD_DWORD);
0005a2  f883900a          STRB     r9,[r3,#0xa]
;;;610                        finsh_code_dword(1);
0005a6  72d8              STRB     r0,[r3,#0xb]
0005a8  7319              STRB     r1,[r3,#0xc]
0005aa  7359              STRB     r1,[r3,#0xd]
0005ac  7399              STRB     r1,[r3,#0xe]
;;;611    
;;;612                        /* add_byte */
;;;613                        finsh_code_byte(FINSH_OP_ADD_DWORD);
0005ae  2003              MOVS     r0,#3
;;;614                        /* get byte */
;;;615                        finsh_code_byte(FINSH_OP_ST_DWORD);
;;;616    
;;;617                        /* pop */
;;;618                        finsh_code_byte(FINSH_OP_POP);
;;;619                        break;
0005b0  e070              B        |L1.1684|
                  |L1.1458|
;;;620                    }
;;;621                }
;;;622                break;
;;;623    
;;;624            /* decrease */
;;;625            case FINSH_NODE_SYS_DEC:
;;;626                if (finsh_node_child(node) && finsh_node_child(node)->node_type == FINSH_NODE_ID)
0005b2  6922              LDR      r2,[r4,#0x10]
0005b4  b382              CBZ      r2,|L1.1560|
0005b6  f892c000          LDRB     r12,[r2,#0]
0005ba  f1bc0f01          CMP      r12,#1
0005be  d12b              BNE      |L1.1560|
;;;627                {
;;;628                    struct finsh_var* var;
;;;629                    var = finsh_node_child(node)->id.var;
;;;630    
;;;631                    switch (node->data_type)
0005c0  f894c001          LDRB     r12,[r4,#1]
0005c4  6892              LDR      r2,[r2,#8]            ;629
0005c6  f1bc0f01          CMP      r12,#1
0005ca  d006              BEQ      |L1.1498|
0005cc  f1bc0f02          CMP      r12,#2
0005d0  d023              BEQ      |L1.1562|
0005d2  f1bc0f03          CMP      r12,#3
0005d6  d11f              BNE      |L1.1560|
0005d8  e03f              B        |L1.1626|
                  |L1.1498|
;;;632                    {
;;;633                    case FINSH_DATA_TYPE_BYTE:
;;;634                        /* ld_value_byte &id */
;;;635                        // finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
;;;636                        // finsh_code_dword((long)&(var->value.char_value));
;;;637    
;;;638                        /* ld_dword &id */
;;;639                        finsh_code_byte(FINSH_OP_LD_DWORD);
0005da  f8d81004          LDR      r1,[r8,#4]  ; finsh_compile_pc
0005de  3214              ADDS     r2,r2,#0x14
0005e0  2624              MOVS     r6,#0x24
0005e2  700e              STRB     r6,[r1,#0]
;;;640                        finsh_code_dword((long)&(var->value.char_value));
0005e4  0a17              LSRS     r7,r2,#8
0005e6  704a              STRB     r2,[r1,#1]
0005e8  708f              STRB     r7,[r1,#2]
0005ea  0c16              LSRS     r6,r2,#16
0005ec  70ce              STRB     r6,[r1,#3]
0005ee  ea4f6c12          LSR      r12,r2,#24
0005f2  f881c004          STRB     r12,[r1,#4]
;;;641    
;;;642                        /* ld_value_byte &id */
;;;643                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
0005f6  714b              STRB     r3,[r1,#5]
;;;644                        finsh_code_dword((long)&(var->value.char_value));
0005f8  718a              STRB     r2,[r1,#6]
0005fa  71cf              STRB     r7,[r1,#7]
0005fc  720e              STRB     r6,[r1,#8]
0005fe  f881c009          STRB     r12,[r1,#9]
;;;645    
;;;646                        /* ld_byte 1 */
;;;647                        finsh_code_byte(FINSH_OP_LD_BYTE);
000602  f881a00a          STRB     r10,[r1,#0xa]
;;;648                        finsh_code_byte(1);
000606  72c8              STRB     r0,[r1,#0xb]
;;;649    
;;;650                        /* add_byte */
;;;651                        finsh_code_byte(FINSH_OP_SUB_BYTE);
000608  2004              MOVS     r0,#4
                  |L1.1546|
00060a  7308              STRB     r0,[r1,#0xc]
;;;652                        /* get byte */
;;;653                        finsh_code_byte(FINSH_OP_ST_BYTE);
00060c  734d              STRB     r5,[r1,#0xd]
;;;654    
;;;655                        /* pop */
;;;656                        finsh_code_byte(FINSH_OP_POP);
00060e  202b              MOVS     r0,#0x2b
000610  7388              STRB     r0,[r1,#0xe]
000612  310f              ADDS     r1,r1,#0xf
                  |L1.1556|
000614  f8c81004          STR      r1,[r8,#4]  ; finsh_compile_pc
                  |L1.1560|
000618  e066              B        |L1.1768|
                  |L1.1562|
;;;657                        break;
;;;658    
;;;659                    case FINSH_DATA_TYPE_WORD:
;;;660                        /* ld_value_word &id */
;;;661                        // finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
;;;662                        // finsh_code_dword((long)&(var->value.short_value));
;;;663    
;;;664                        /* ld_dword &id */
;;;665                        finsh_code_byte(FINSH_OP_LD_DWORD);
00061a  f8d83004          LDR      r3,[r8,#4]  ; finsh_compile_pc
00061e  3214              ADDS     r2,r2,#0x14
000620  2524              MOVS     r5,#0x24
000622  701d              STRB     r5,[r3,#0]
;;;666                        finsh_code_dword((long)&(var->value.short_value));
000624  0a17              LSRS     r7,r2,#8
000626  705a              STRB     r2,[r3,#1]
000628  709f              STRB     r7,[r3,#2]
00062a  0c15              LSRS     r5,r2,#16
00062c  70dd              STRB     r5,[r3,#3]
00062e  ea4f6c12          LSR      r12,r2,#24
000632  f883c004          STRB     r12,[r3,#4]
;;;667    
;;;668                        /* ld_value_word &id */
;;;669                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
000636  715e              STRB     r6,[r3,#5]
;;;670                        finsh_code_dword((long)&(var->value.short_value));
000638  719a              STRB     r2,[r3,#6]
00063a  71df              STRB     r7,[r3,#7]
00063c  721d              STRB     r5,[r3,#8]
00063e  f883c009          STRB     r12,[r3,#9]
;;;671    
;;;672                        /* ld_word 1 */
;;;673                        finsh_code_byte(FINSH_OP_LD_WORD);
000642  2223              MOVS     r2,#0x23
000644  729a              STRB     r2,[r3,#0xa]
;;;674                        finsh_code_word(1);
000646  72d8              STRB     r0,[r3,#0xb]
000648  7319              STRB     r1,[r3,#0xc]
;;;675    
;;;676                        /* add_byte */
;;;677                        finsh_code_byte(FINSH_OP_SUB_WORD);
00064a  2005              MOVS     r0,#5
                  |L1.1612|
00064c  7358              STRB     r0,[r3,#0xd]          ;587
00064e  f883900e          STRB     r9,[r3,#0xe]          ;589
000652  202b              MOVS     r0,#0x2b              ;592
000654  73d8              STRB     r0,[r3,#0xf]          ;592
000656  3310              ADDS     r3,r3,#0x10           ;592
000658  e022              B        |L1.1696|
                  |L1.1626|
;;;678                        /* get byte */
;;;679                        finsh_code_byte(FINSH_OP_ST_WORD);
;;;680    
;;;681                        /* pop */
;;;682                        finsh_code_byte(FINSH_OP_POP);
;;;683                        break;
;;;684    
;;;685                    case FINSH_DATA_TYPE_DWORD:
;;;686                        /* ld_value_dword &id */
;;;687                        // finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
;;;688                        // finsh_code_dword((long)&(var->value.long_value));
;;;689    
;;;690                        /* ld_dword &id */
;;;691                        finsh_code_byte(FINSH_OP_LD_DWORD);
00065a  f8d83004          LDR      r3,[r8,#4]  ; finsh_compile_pc
00065e  3214              ADDS     r2,r2,#0x14
000660  f04f0924          MOV      r9,#0x24
000664  f8839000          STRB     r9,[r3,#0]
;;;692                        finsh_code_dword((long)&(var->value.long_value));
000668  0a16              LSRS     r6,r2,#8
00066a  705a              STRB     r2,[r3,#1]
00066c  709e              STRB     r6,[r3,#2]
00066e  0c15              LSRS     r5,r2,#16
000670  70dd              STRB     r5,[r3,#3]
000672  ea4f6c12          LSR      r12,r2,#24
000676  f883c004          STRB     r12,[r3,#4]
;;;693    
;;;694                        /* ld_value_dword &id */
;;;695                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
00067a  715f              STRB     r7,[r3,#5]
;;;696                        finsh_code_dword((long)&(var->value.long_value));
00067c  719a              STRB     r2,[r3,#6]
00067e  71de              STRB     r6,[r3,#7]
000680  721d              STRB     r5,[r3,#8]
000682  f883c009          STRB     r12,[r3,#9]
;;;697    
;;;698                        /* ld_dword 1 */
;;;699                        finsh_code_byte(FINSH_OP_LD_DWORD);
000686  f883900a          STRB     r9,[r3,#0xa]
;;;700                        finsh_code_dword(1);
00068a  72d8              STRB     r0,[r3,#0xb]
00068c  7319              STRB     r1,[r3,#0xc]
00068e  7359              STRB     r1,[r3,#0xd]
000690  7399              STRB     r1,[r3,#0xe]
;;;701    
;;;702                        /* add_byte */
;;;703                        finsh_code_byte(FINSH_OP_SUB_DWORD);
000692  2006              MOVS     r0,#6
                  |L1.1684|
000694  73d8              STRB     r0,[r3,#0xf]          ;613
000696  202a              MOVS     r0,#0x2a              ;615
000698  7418              STRB     r0,[r3,#0x10]         ;615
00069a  202b              MOVS     r0,#0x2b              ;618
00069c  7458              STRB     r0,[r3,#0x11]         ;618
00069e  3312              ADDS     r3,r3,#0x12           ;618
                  |L1.1696|
0006a0  f8c83004          STR      r3,[r8,#4]            ;682  ; finsh_compile_pc
0006a4  e020              B        |L1.1768|
                  |L1.1702|
;;;704                        /* get byte */
;;;705                        finsh_code_byte(FINSH_OP_ST_DWORD);
;;;706    
;;;707                        /* pop */
;;;708                        finsh_code_byte(FINSH_OP_POP);
;;;709                        break;
;;;710                    }
;;;711                }
;;;712                break;
;;;713    
;;;714            case FINSH_NODE_SYS_NULL:
;;;715                finsh_code_dword(0);
0006a6  f8d80004          LDR      r0,[r8,#4]  ; finsh_compile_pc
0006aa  f8001b01          STRB     r1,[r0],#1
0006ae  f8001b01          STRB     r1,[r0],#1
0006b2  f8001b02          STRB     r1,[r0],#2
                  |L1.1718|
0006b6  f8001c01          STRB     r1,[r0,#-1]
0006ba  e013              B        |L1.1764|
                  |L1.1724|
;;;716                break;
;;;717    
;;;718            case FINSH_NODE_SYS_GETVALUE:
;;;719                if (node->idtype & FINSH_IDTYPE_ADDRESS)
0006bc  78a0              LDRB     r0,[r4,#2]
0006be  0700              LSLS     r0,r0,#28
0006c0  d412              BMI      |L1.1768|
;;;720                {
;;;721                    /* nothing will be generated */
;;;722                }
;;;723                else
;;;724                {
;;;725                    switch (node->data_type)
0006c2  7860              LDRB     r0,[r4,#1]
0006c4  2801              CMP      r0,#1
0006c6  d004              BEQ      |L1.1746|
0006c8  2802              CMP      r0,#2
0006ca  d007              BEQ      |L1.1756|
0006cc  2803              CMP      r0,#3
0006ce  d10b              BNE      |L1.1768|
0006d0  e011              B        |L1.1782|
                  |L1.1746|
;;;726                    {
;;;727                    case FINSH_DATA_TYPE_BYTE:
;;;728                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE_STACK);
0006d2  f8d80004          LDR      r0,[r8,#4]  ; finsh_compile_pc
                  |L1.1750|
0006d6  f800bb01          STRB     r11,[r0],#1           ;320
0006da  e003              B        |L1.1764|
                  |L1.1756|
;;;729                        break;
;;;730                    case FINSH_DATA_TYPE_WORD:
;;;731                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD_STACK);
0006dc  f8d80004          LDR      r0,[r8,#4]  ; finsh_compile_pc
                  |L1.1760|
0006e0  f800eb01          STRB     lr,[r0],#1            ;327
                  |L1.1764|
0006e4  f8c80004          STR      r0,[r8,#4]            ;305  ; finsh_compile_pc
                  |L1.1768|
;;;732                        break;
;;;733                    case FINSH_DATA_TYPE_DWORD:
;;;734                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;735                        break;
;;;736                    default:
;;;737                        break;
;;;738                    }
;;;739                }
;;;740                break;
;;;741    
;;;742            case FINSH_NODE_SYS_GETADDR:
;;;743                /* nothing will be generated */
;;;744                break;
;;;745    
;;;746            default:
;;;747                finsh_error_set(FINSH_ERROR_UNKNOWN_NODE);
;;;748                break;
;;;749            }
;;;750    
;;;751            /* compile sibling node */
;;;752            if (finsh_node_sibling(node) != NULL)
0006e8  68e0              LDR      r0,[r4,#0xc]
0006ea  b108              CBZ      r0,|L1.1776|
;;;753                finsh_compile(finsh_node_sibling(node));
0006ec  f7fffffe          BL       finsh_compile
                  |L1.1776|
;;;754        }
;;;755    
;;;756        return 0;
0006f0  2000              MOVS     r0,#0
;;;757    }
0006f2  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1782|
0006f6  212f              MOVS     r1,#0x2f              ;734
                  |L1.1784|
0006f8  f8d80004          LDR      r0,[r8,#4]            ;734  ; finsh_compile_pc
0006fc  e55e              B        |L1.444|
                  |L1.1790|
0006fe  2008              MOVS     r0,#8                 ;747
000700  e619              B        |L1.822|
;;;758    
                          ENDP

000702  0000              DCW      0x0000
                  |L1.1796|
                          DCD      ||.data||

                          AREA ||i.finsh_compiler_run||, CODE, READONLY, ALIGN=2

                  finsh_compiler_run PROC
;;;902    
;;;903    int finsh_compiler_run(struct finsh_node* node)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;904    {
000004  4604              MOV      r4,r0
;;;905        struct finsh_node* sibling;
;;;906    
;;;907        /* type check */
;;;908        finsh_type_check(node, FINSH_NODE_VALUE);
000006  2100              MOVS     r1,#0
000008  f7fffffe          BL       finsh_type_check
;;;909    
;;;910        /* clean text segment and vm stack */
;;;911        memset(&text_segment[0], 0, sizeof(text_segment));
00000c  2180              MOVS     r1,#0x80
00000e  480d              LDR      r0,|L2.68|
000010  f7fffffe          BL       __aeabi_memclr
;;;912        memset(&finsh_vm_stack[0], 0, sizeof(finsh_vm_stack[0]));
000014  480c              LDR      r0,|L2.72|
;;;913    
;;;914        /* reset compile stack pointer and pc */
;;;915        finsh_compile_sp = &finsh_vm_stack[0];
000016  4d0d              LDR      r5,|L2.76|
000018  2600              MOVS     r6,#0                 ;912
00001a  6006              STR      r6,[r0,#0]  ; finsh_vm_stack
;;;916        finsh_compile_pc = &text_segment[0];
00001c  6028              STR      r0,[r5,#0]  ; finsh_compile_sp
00001e  4809              LDR      r0,|L2.68|
;;;917    
;;;918        /* compile node */
;;;919        sibling = node;
;;;920        while (sibling != NULL)
000020  6068              STR      r0,[r5,#4]  ; finsh_compile_pc
000022  b15c              CBZ      r4,|L2.60|
;;;921        {
;;;922            struct finsh_node* current_node;
;;;923            current_node = sibling;
;;;924    
;;;925            /* get sibling node */
;;;926            sibling = current_node->sibling;
;;;927    
;;;928            /* clean sibling node */
;;;929            current_node->sibling = NULL;
;;;930            finsh_compile(current_node);
;;;931    
;;;932            /* pop current value */
;;;933            if (sibling != NULL) finsh_code_byte(FINSH_OP_POP);
000024  272b              MOVS     r7,#0x2b
                  |L2.38|
000026  4620              MOV      r0,r4                 ;923
000028  68e4              LDR      r4,[r4,#0xc]          ;926
00002a  60c6              STR      r6,[r0,#0xc]          ;930
00002c  f7fffffe          BL       finsh_compile
000030  b124              CBZ      r4,|L2.60|
000032  6868              LDR      r0,[r5,#4]  ; finsh_compile_pc
000034  f8007b01          STRB     r7,[r0],#1
000038  6068              STR      r0,[r5,#4]  ; finsh_compile_pc
00003a  e7f4              B        |L2.38|
                  |L2.60|
;;;934        }
;;;935    
;;;936        return 0;
00003c  2000              MOVS     r0,#0
;;;937    }
00003e  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      text_segment
                  |L2.72|
                          DCD      finsh_vm_stack
                  |L2.76|
                          DCD      ||.data||

                          AREA ||i.finsh_type_check||, CODE, READONLY, ALIGN=1

                  finsh_type_check PROC
;;;758    
;;;759    static int finsh_type_check(struct finsh_node* node, u_char is_addr)
000000  b570              PUSH     {r4-r6,lr}
;;;760    {
000002  0004              MOVS     r4,r0
000004  460d              MOV      r5,r1
000006  d032              BEQ      |L3.110|
;;;761        if (node != NULL)
;;;762        {
;;;763            /* address & value */
;;;764            if (node->node_type == FINSH_NODE_SYS_ASSIGN ||
000008  7820              LDRB     r0,[r4,#0]
00000a  2813              CMP      r0,#0x13
00000c  d008              BEQ      |L3.32|
;;;765                node->node_type == FINSH_NODE_SYS_PREINC ||
00000e  2815              CMP      r0,#0x15
000010  d006              BEQ      |L3.32|
;;;766                node->node_type == FINSH_NODE_SYS_PREDEC ||
000012  2816              CMP      r0,#0x16
000014  d004              BEQ      |L3.32|
;;;767                node->node_type == FINSH_NODE_SYS_GETADDR)
000016  281a              CMP      r0,#0x1a
000018  d002              BEQ      |L3.32|
;;;768            {
;;;769                /* address */
;;;770                finsh_type_check(finsh_node_child(node), FINSH_IDTYPE_ADDRESS);
;;;771            }
;;;772            else if (node->node_type == FINSH_NODE_SYS_GETVALUE && is_addr)
00001a  2819              CMP      r0,#0x19
00001c  d003              BEQ      |L3.38|
00001e  e006              B        |L3.46|
                  |L3.32|
000020  2108              MOVS     r1,#8                 ;770
000022  6920              LDR      r0,[r4,#0x10]         ;770
000024  e004              B        |L3.48|
                  |L3.38|
000026  b115              CBZ      r5,|L3.46|
;;;773            {
;;;774                /* change the attribute of getvalue in left expr */
;;;775                finsh_type_check(finsh_node_child(node), 0);
000028  2100              MOVS     r1,#0
00002a  6920              LDR      r0,[r4,#0x10]
00002c  e000              B        |L3.48|
                  |L3.46|
;;;776            }
;;;777            else
;;;778            {
;;;779                /* transfer 'av' to child node */
;;;780                finsh_type_check(finsh_node_child(node), is_addr);
00002e  6920              LDR      r0,[r4,#0x10]
                  |L3.48|
000030  f7fffffe          BL       finsh_type_check
;;;781            }
;;;782    
;;;783            /* always does not load address in sibling */
;;;784            finsh_type_check(finsh_node_sibling(node), FINSH_NODE_VALUE);
000034  2100              MOVS     r1,#0
000036  68e0              LDR      r0,[r4,#0xc]
000038  f7fffffe          BL       finsh_type_check
;;;785    
;;;786            /** set attribute of current node */
;;;787    
;;;788            /* make sure the current node is address or value */
;;;789            if (node->idtype != FINSH_IDTYPE_SYSCALL) node->idtype |= is_addr;
00003c  78a0              LDRB     r0,[r4,#2]
00003e  2804              CMP      r0,#4
000040  d001              BEQ      |L3.70|
000042  4328              ORRS     r0,r0,r5
000044  70a0              STRB     r0,[r4,#2]
                  |L3.70|
;;;790    
;;;791            if (finsh_node_child(node) != NULL)
000046  6920              LDR      r0,[r4,#0x10]
000048  b110              CBZ      r0,|L3.80|
;;;792            {
;;;793                node->data_type = finsh_node_child(node)->data_type;
00004a  7840              LDRB     r0,[r0,#1]
00004c  7060              STRB     r0,[r4,#1]
;;;794                return 0;
00004e  e00e              B        |L3.110|
                  |L3.80|
;;;795            }
;;;796    
;;;797            if (node->node_type == FINSH_NODE_ID)
000050  7820              LDRB     r0,[r4,#0]
000052  2201              MOVS     r2,#1                 ;764
;;;798            {
;;;799                if (node->idtype & FINSH_IDTYPE_VAR)
;;;800                {
;;;801                    struct finsh_var* var;
;;;802    
;;;803                    var = node->id.var;
;;;804                    if (var != NULL)
;;;805                    {
;;;806                        switch (var->type)
;;;807                        {
;;;808                        case finsh_type_void:
;;;809                            node->data_type = FINSH_DATA_TYPE_VOID;
;;;810                            break;
;;;811    
;;;812                        case finsh_type_char:
;;;813                        case finsh_type_uchar:
;;;814                            node->data_type = FINSH_DATA_TYPE_BYTE;
;;;815                            break;
;;;816    
;;;817                        case finsh_type_short:
;;;818                        case finsh_type_ushort:
;;;819                            node->data_type = FINSH_DATA_TYPE_WORD;
;;;820                            break;
;;;821    
;;;822                        case finsh_type_int:
;;;823                        case finsh_type_uint:
;;;824                        case finsh_type_long:
;;;825                        case finsh_type_ulong:
;;;826                            node->data_type = FINSH_DATA_TYPE_DWORD;
000054  2103              MOVS     r1,#3
000056  2801              CMP      r0,#1                 ;797
000058  d00b              BEQ      |L3.114|
;;;827                            break;
;;;828    
;;;829                        case finsh_type_charp:
;;;830                        case finsh_type_voidp:
;;;831                        case finsh_type_shortp:
;;;832                        case finsh_type_intp:
;;;833                        case finsh_type_longp:
;;;834                            node->data_type = FINSH_DATA_TYPE_DWORD;
;;;835                            break;
;;;836    
;;;837                        default:
;;;838                            finsh_error_set(FINSH_ERROR_UNKNOWN_TYPE);
;;;839                            break;
;;;840                        }
;;;841                    }
;;;842                }
;;;843                else if (node->idtype & FINSH_IDTYPE_SYSVAR)
;;;844                {
;;;845                    struct finsh_sysvar *sysvar;
;;;846    
;;;847                    sysvar = node->id.sysvar;
;;;848                    if (sysvar != NULL)
;;;849                    {
;;;850                        switch (sysvar->type)
;;;851                        {
;;;852                        case finsh_type_void:
;;;853                            node->data_type = FINSH_DATA_TYPE_VOID;
;;;854                            break;
;;;855    
;;;856                        case finsh_type_char:
;;;857                        case finsh_type_uchar:
;;;858                            node->data_type = FINSH_DATA_TYPE_BYTE;
;;;859                            break;
;;;860    
;;;861                        case finsh_type_short:
;;;862                        case finsh_type_ushort:
;;;863                            node->data_type = FINSH_DATA_TYPE_WORD;
;;;864                            break;
;;;865    
;;;866                        case finsh_type_int:
;;;867                        case finsh_type_uint:
;;;868                        case finsh_type_long:
;;;869                        case finsh_type_ulong:
;;;870                            node->data_type = FINSH_DATA_TYPE_DWORD;
;;;871                            break;
;;;872    
;;;873                        case finsh_type_charp:
;;;874                        case finsh_type_voidp:
;;;875                        case finsh_type_shortp:
;;;876                        case finsh_type_intp:
;;;877                        case finsh_type_longp:
;;;878                            node->data_type = FINSH_DATA_TYPE_DWORD;
;;;879                            break;
;;;880    
;;;881                        default:
;;;882                            finsh_error_set(FINSH_ERROR_UNKNOWN_TYPE);
;;;883                            break;
;;;884                        }
;;;885                    }
;;;886                }
;;;887            }
;;;888            else if (node->node_type == FINSH_NODE_VALUE_CHAR)
00005a  2802              CMP      r0,#2
00005c  d034              BEQ      |L3.200|
;;;889            {
;;;890                node->data_type = FINSH_DATA_TYPE_BYTE;
;;;891            }
;;;892            else if (node->node_type == FINSH_NODE_VALUE_INT ||
00005e  2803              CMP      r0,#3
000060  d036              BEQ      |L3.208|
;;;893                node->node_type == FINSH_NODE_VALUE_LONG    ||
000062  2804              CMP      r0,#4
000064  d034              BEQ      |L3.208|
;;;894                node->node_type == FINSH_NODE_VALUE_STRING  ||
000066  2805              CMP      r0,#5
000068  d032              BEQ      |L3.208|
;;;895                node->node_type == FINSH_NODE_VALUE_NULL)
00006a  2806              CMP      r0,#6
00006c  d030              BEQ      |L3.208|
                  |L3.110|
;;;896            {
;;;897                node->data_type = FINSH_DATA_TYPE_DWORD;
;;;898            }
;;;899        }
;;;900        return 0;
00006e  2000              MOVS     r0,#0
;;;901    }
000070  bd70              POP      {r4-r6,pc}
                  |L3.114|
000072  78a0              LDRB     r0,[r4,#2]            ;799
000074  f04f0300          MOV      r3,#0                 ;799
000078  07c6              LSLS     r6,r0,#31             ;799
00007a  f04f0502          MOV      r5,#2                 ;819
00007e  d00f              BEQ      |L3.160|
000080  68a0              LDR      r0,[r4,#8]            ;804
000082  2800              CMP      r0,#0                 ;804
000084  d0f3              BEQ      |L3.110|
000086  7c40              LDRB     r0,[r0,#0x11]         ;806
000088  280f              CMP      r0,#0xf               ;806
00008a  d223              BCS      |L3.212|
00008c  e8dff000          TBB      [pc,r0]               ;806
000090  221a201c          DCB      0x22,0x1a,0x20,0x1c
000094  1c201e1e          DCB      0x1c,0x20,0x1e,0x1e
000098  20202020          DCB      0x20,0x20,0x20,0x20
00009c  20202000          DCB      0x20,0x20,0x20,0x00
                  |L3.160|
0000a0  0780              LSLS     r0,r0,#30             ;843
0000a2  d5e4              BPL      |L3.110|
0000a4  68a0              LDR      r0,[r4,#8]            ;848
0000a6  2800              CMP      r0,#0                 ;848
0000a8  d0e1              BEQ      |L3.110|
0000aa  7a00              LDRB     r0,[r0,#8]            ;850
0000ac  280f              CMP      r0,#0xf               ;850
0000ae  d211              BCS      |L3.212|
0000b0  e8dff000          TBB      [pc,r0]               ;850
0000b4  10080e0a          DCB      0x10,0x08,0x0e,0x0a
0000b8  0a0e0c0c          DCB      0x0a,0x0e,0x0c,0x0c
0000bc  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0000c0  0e0e0e00          DCB      0x0e,0x0e,0x0e,0x00
0000c4  7063              STRB     r3,[r4,#1]            ;853
0000c6  e7d2              B        |L3.110|
                  |L3.200|
0000c8  7062              STRB     r2,[r4,#1]            ;858
0000ca  e7d0              B        |L3.110|
0000cc  7065              STRB     r5,[r4,#1]            ;863
0000ce  e7ce              B        |L3.110|
                  |L3.208|
0000d0  7061              STRB     r1,[r4,#1]            ;870
0000d2  e7cc              B        |L3.110|
                  |L3.212|
0000d4  2003              MOVS     r0,#3                 ;882
0000d6  f7fffffe          BL       finsh_error_set
0000da  e7c8              B        |L3.110|
;;;902    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  finsh_compile_sp
                          DCD      0x00000000
                  finsh_compile_pc
                          DCD      0x00000000
