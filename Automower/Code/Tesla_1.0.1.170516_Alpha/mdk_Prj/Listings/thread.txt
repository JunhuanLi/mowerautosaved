; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\thread.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\thread.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\thread.crf ..\OS\src\thread.c]
                          THUMB

                          AREA ||i._rt_thread_init||, CODE, READONLY, ALIGN=2

                  _rt_thread_init PROC
;;;83     
;;;84     static rt_err_t _rt_thread_init(struct rt_thread *thread,
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;85                                     const char       *name,
;;;86                                     void (*entry)(void *parameter),
;;;87                                     void             *parameter,
;;;88                                     void             *stack_start,
;;;89                                     rt_uint32_t       stack_size,
;;;90                                     rt_uint8_t        priority,
;;;91                                     rt_uint32_t       tick)
;;;92     {
000004  4619              MOV      r1,r3
000006  4604              MOV      r4,r0
000008  e9dd3708          LDRD     r3,r7,[sp,#0x20]
00000c  e9dd560a          LDRD     r5,r6,[sp,#0x28]
;;;93         /* init thread list */
;;;94         rt_list_init(&(thread->tlist));
000010  3014              ADDS     r0,r0,#0x14
000012  6040              STR      r0,[r0,#4]
000014  6000              STR      r0,[r0,#0]
;;;95     
;;;96         thread->entry = (void *)entry;
;;;97         thread->parameter = parameter;
;;;98     
;;;99         /* stack init */
;;;100        thread->stack_addr = stack_start;
000016  62a3              STR      r3,[r4,#0x28]
000018  e9c42108          STRD     r2,r1,[r4,#0x20]
;;;101        thread->stack_size = (rt_uint16_t)stack_size;
00001c  b2ba              UXTH     r2,r7
00001e  85a2              STRH     r2,[r4,#0x2c]
;;;102    
;;;103        /* init thread stack */
;;;104        rt_memset(thread->stack_addr, '#', thread->stack_size);
000020  2123              MOVS     r1,#0x23
000022  4618              MOV      r0,r3
000024  f7fffffe          BL       rt_memset
;;;105        thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
000028  8da1              LDRH     r1,[r4,#0x2c]
00002a  6aa0              LDR      r0,[r4,#0x28]
00002c  4b16              LDR      r3,|L1.136|
00002e  1842              ADDS     r2,r0,r1
000030  e9d40108          LDRD     r0,r1,[r4,#0x20]
000034  1f12              SUBS     r2,r2,#4
000036  f7fffffe          BL       rt_hw_stack_init
00003a  2700              MOVS     r7,#0
;;;106            (void *)((char *)thread->stack_addr + thread->stack_size - 4),
;;;107            (void *)rt_thread_exit);
;;;108    
;;;109        /* priority init */
;;;110        RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
00003c  61e0              STR      r0,[r4,#0x1c]
00003e  2d20              CMP      r5,#0x20
000040  d30b              BCC      |L1.90|
000042  f88d7000          STRB     r7,[sp,#0]
000046  236e              MOVS     r3,#0x6e
000048  4a10              LDR      r2,|L1.140|
00004a  a111              ADR      r1,|L1.144|
00004c  a019              ADR      r0,|L1.180|
00004e  f7fffffe          BL       rt_kprintf
                  |L1.82|
000052  f89d0000          LDRB     r0,[sp,#0]
000056  2800              CMP      r0,#0
000058  d0fb              BEQ      |L1.82|
                  |L1.90|
;;;111        thread->init_priority    = priority;
00005a  f8845036          STRB     r5,[r4,#0x36]
;;;112        thread->current_priority = priority;
00005e  f8845035          STRB     r5,[r4,#0x35]
;;;113    
;;;114        /* tick init */
;;;115        thread->init_tick      = tick;
;;;116        thread->remaining_tick = tick;
000062  6466              STR      r6,[r4,#0x44]
;;;117    
;;;118        /* error and flags */
;;;119        thread->error = RT_EOK;
;;;120        thread->stat  = RT_THREAD_INIT;
000064  6327              STR      r7,[r4,#0x30]
000066  64a6              STR      r6,[r4,#0x48]
000068  f8847034          STRB     r7,[r4,#0x34]
;;;121    
;;;122        /* initialize cleanup function and user data */
;;;123        thread->cleanup   = 0;
;;;124        thread->user_data = 0;
00006c  67a7              STR      r7,[r4,#0x78]
;;;125    
;;;126        /* init thread timer */
;;;127        rt_timer_init(&(thread->thread_timer),
00006e  67e7              STR      r7,[r4,#0x7c]
000070  4623              MOV      r3,r4
000072  9700              STR      r7,[sp,#0]
000074  4a17              LDR      r2,|L1.212|
000076  4619              MOV      r1,r3
000078  f104004c          ADD      r0,r4,#0x4c
00007c  9701              STR      r7,[sp,#4]
00007e  f7fffffe          BL       rt_timer_init
;;;128                      thread->name,
;;;129                      rt_thread_timeout,
;;;130                      thread,
;;;131                      0,
;;;132                      RT_TIMER_FLAG_ONE_SHOT);
;;;133    
;;;134        return RT_EOK;
000082  2000              MOVS     r0,#0
;;;135    }
000084  e8bd81fc          POP      {r2-r8,pc}
;;;136    
                          ENDP

                  |L1.136|
                          DCD      rt_thread_exit
                  |L1.140|
                          DCD      ||.constdata||
                  |L1.144|
000090  7072696f          DCB      "priority < RT_THREAD_PRIORITY_MAX",0
000094  72697479
000098  203c2052
00009c  545f5448
0000a0  52454144
0000a4  5f505249
0000a8  4f524954
0000ac  595f4d41
0000b0  5800    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L1.180|
0000b4  28257329          DCB      "(%s) assert failed at %s:%d \n",0
0000b8  20617373
0000bc  65727420
0000c0  6661696c
0000c4  65642061
0000c8  74202573
0000cc  3a256420
0000d0  0a00    
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L1.212|
                          DCD      rt_thread_timeout

                          AREA ||i.rt_list_insert_after||, CODE, READONLY, ALIGN=1

                  rt_list_insert_after PROC
;;;61      */
;;;62     rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
000000  6802              LDR      r2,[r0,#0]
;;;63     {
;;;64         l->next->prev = n;
;;;65         n->next = l->next;
000002  6051              STR      r1,[r2,#4]
000004  6802              LDR      r2,[r0,#0]
;;;66     
;;;67         l->next = n;
000006  600a              STR      r2,[r1,#0]
;;;68         n->prev = l;
000008  6001              STR      r1,[r0,#0]
00000a  6048              STR      r0,[r1,#4]
;;;69     }
00000c  4770              BX       lr
;;;70     
                          ENDP


                          AREA ||i.rt_list_remove||, CODE, READONLY, ALIGN=1

                  rt_list_remove PROC
;;;89      */
;;;90     rt_inline void rt_list_remove(rt_list_t *n)
000000  e9d01200          LDRD     r1,r2,[r0,#0]
;;;91     {
;;;92         n->next->prev = n->prev;
000004  604a              STR      r2,[r1,#4]
000006  e9d01200          LDRD     r1,r2,[r0,#0]
;;;93         n->prev->next = n->next;
;;;94     
;;;95         n->next = n->prev = n;
00000a  6011              STR      r1,[r2,#0]
00000c  6040              STR      r0,[r0,#4]
00000e  6000              STR      r0,[r0,#0]
;;;96     }
000010  4770              BX       lr
;;;97     
                          ENDP


                          AREA ||i.rt_thread_control||, CODE, READONLY, ALIGN=2

                  rt_thread_control PROC
;;;475     */
;;;476    rt_err_t rt_thread_control(rt_thread_t thread, rt_uint8_t cmd, void *arg)
000000  b5f8              PUSH     {r3-r7,lr}
;;;477    {
000002  4616              MOV      r6,r2
000004  460d              MOV      r5,r1
000006  0004              MOVS     r4,r0
000008  d10c              BNE      |L4.36|
;;;478        register rt_base_t temp;
;;;479    
;;;480        /* thread check */
;;;481        RT_ASSERT(thread != RT_NULL);
00000a  f88d0000          STRB     r0,[sp,#0]
00000e  f24013e1          MOV      r3,#0x1e1
000012  4a1b              LDR      r2,|L4.128|
000014  a11b              ADR      r1,|L4.132|
000016  a020              ADR      r0,|L4.152|
000018  f7fffffe          BL       rt_kprintf
                  |L4.28|
00001c  f89d0000          LDRB     r0,[sp,#0]
000020  2800              CMP      r0,#0
000022  d0fb              BEQ      |L4.28|
                  |L4.36|
;;;482    
;;;483        switch (cmd)
000024  b30d              CBZ      r5,|L4.106|
000026  2d01              CMP      r5,#1
000028  d024              BEQ      |L4.116|
00002a  2d02              CMP      r5,#2
00002c  d10f              BNE      |L4.78|
;;;484        {
;;;485        case RT_THREAD_CTRL_CHANGE_PRIORITY:
;;;486            /* disable interrupt */
;;;487            temp = rt_hw_interrupt_disable();
00002e  f7fffffe          BL       rt_hw_interrupt_disable
000032  4607              MOV      r7,r0
;;;488    
;;;489            /* for ready thread, change queue */
;;;490            if (thread->stat == RT_THREAD_READY)
000034  f8940034          LDRB     r0,[r4,#0x34]
000038  2501              MOVS     r5,#1                 ;477
00003a  2801              CMP      r0,#1
00003c  d009              BEQ      |L4.82|
;;;491            {
;;;492                /* remove thread from schedule queue first */
;;;493                rt_schedule_remove_thread(thread);
;;;494    
;;;495                /* change thread priority */
;;;496                thread->current_priority = *(rt_uint8_t *)arg;
;;;497    
;;;498                /* recalculate priority attribute */
;;;499    #if RT_THREAD_PRIORITY_MAX > 32
;;;500                thread->number      = thread->current_priority >> 3;            /* 5bit */
;;;501                thread->number_mask = 1 << thread->number;
;;;502                thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
;;;503    #else
;;;504                thread->number_mask = 1 << thread->current_priority;
;;;505    #endif
;;;506    
;;;507                /* insert thread to schedule queue again */
;;;508                rt_schedule_insert_thread(thread);
;;;509            }
;;;510            else
;;;511            {
;;;512                thread->current_priority = *(rt_uint8_t *)arg;
00003e  7830              LDRB     r0,[r6,#0]
000040  f8840035          STRB     r0,[r4,#0x35]
;;;513    
;;;514                /* recalculate priority attribute */
;;;515    #if RT_THREAD_PRIORITY_MAX > 32
;;;516                thread->number      = thread->current_priority >> 3;            /* 5bit */
;;;517                thread->number_mask = 1 << thread->number;
;;;518                thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
;;;519    #else
;;;520                thread->number_mask = 1 << thread->current_priority;
000044  4085              LSLS     r5,r5,r0
000046  63a5              STR      r5,[r4,#0x38]
                  |L4.72|
;;;521    #endif
;;;522            }
;;;523    
;;;524            /* enable interrupt */
;;;525            rt_hw_interrupt_enable(temp);
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       rt_hw_interrupt_enable
                  |L4.78|
;;;526            break;
;;;527    
;;;528        case RT_THREAD_CTRL_STARTUP:
;;;529            return rt_thread_startup(thread);
;;;530    
;;;531    #ifdef RT_USING_HEAP
;;;532        case RT_THREAD_CTRL_CLOSE:
;;;533            return rt_thread_delete(thread);
;;;534    #endif
;;;535    
;;;536        default:
;;;537            break;
;;;538        }
;;;539    
;;;540        return RT_EOK;
00004e  2000              MOVS     r0,#0
;;;541    }
000050  bdf8              POP      {r3-r7,pc}
                  |L4.82|
000052  4620              MOV      r0,r4                 ;493
000054  f7fffffe          BL       rt_schedule_remove_thread
000058  7830              LDRB     r0,[r6,#0]            ;496
00005a  f8840035          STRB     r0,[r4,#0x35]         ;496
00005e  4085              LSLS     r5,r5,r0              ;504
000060  4620              MOV      r0,r4                 ;508
000062  63a5              STR      r5,[r4,#0x38]         ;508
000064  f7fffffe          BL       rt_schedule_insert_thread
000068  e7ee              B        |L4.72|
                  |L4.106|
00006a  4620              MOV      r0,r4                 ;529
00006c  e8bd40f8          POP      {r3-r7,lr}            ;529
000070  f7ffbffe          B.W      rt_thread_startup
                  |L4.116|
000074  4620              MOV      r0,r4                 ;533
000076  e8bd40f8          POP      {r3-r7,lr}            ;533
00007a  f7ffbffe          B.W      rt_thread_delete
;;;542    RTM_EXPORT(rt_thread_control);
                          ENDP

00007e  0000              DCW      0x0000
                  |L4.128|
                          DCD      ||.constdata||+0x63
                  |L4.132|
000084  74687265          DCB      "thread != RT_NULL",0
000088  61642021
00008c  3d205254
000090  5f4e554c
000094  4c00    
000096  00                DCB      0
000097  00                DCB      0
                  |L4.152|
000098  28257329          DCB      "(%s) assert failed at %s:%d \n",0
00009c  20617373
0000a0  65727420
0000a4  6661696c
0000a8  65642061
0000ac  74202573
0000b0  3a256420
0000b4  0a00    
0000b6  00                DCB      0
0000b7  00                DCB      0

                          AREA ||i.rt_thread_create||, CODE, READONLY, ALIGN=1

                  rt_thread_create PROC
;;;294     */
;;;295    rt_thread_t rt_thread_create(const char *name,
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;296                                 void (*entry)(void *parameter),
;;;297                                 void       *parameter,
;;;298                                 rt_uint32_t stack_size,
;;;299                                 rt_uint8_t  priority,
;;;300                                 rt_uint32_t tick)
;;;301    {
000004  4689              MOV      r9,r1
000006  e9dd760c          LDRD     r7,r6,[sp,#0x30]
00000a  4682              MOV      r10,r0
;;;302        struct rt_thread *thread;
;;;303        void *stack_start;
;;;304    
;;;305        thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
00000c  4601              MOV      r1,r0
00000e  461d              MOV      r5,r3                 ;301
000010  4690              MOV      r8,r2                 ;301
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       rt_object_allocate
000018  1e04              SUBS     r4,r0,#0
;;;306                                                        name);
;;;307        if (thread == RT_NULL)
00001a  d00d              BEQ      |L5.56|
;;;308            return RT_NULL;
;;;309    
;;;310        stack_start = (void *)RT_KERNEL_MALLOC(stack_size);
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       rt_malloc
;;;311        if (stack_start == RT_NULL)
000022  b160              CBZ      r0,|L5.62|
;;;312        {
;;;313            /* allocate stack failure */
;;;314            rt_object_delete((rt_object_t)thread);
;;;315    
;;;316            return RT_NULL;
;;;317        }
;;;318    
;;;319        _rt_thread_init(thread,
000024  9603              STR      r6,[sp,#0xc]
000026  e88d00a1          STM      sp,{r0,r5,r7}
00002a  4643              MOV      r3,r8
00002c  464a              MOV      r2,r9
00002e  4651              MOV      r1,r10
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       _rt_thread_init
;;;320                        name,
;;;321                        entry,
;;;322                        parameter,
;;;323                        stack_start,
;;;324                        stack_size,
;;;325                        priority,
;;;326                        tick);
;;;327    
;;;328        return thread;
000036  4620              MOV      r0,r4
                  |L5.56|
;;;329    }
000038  b004              ADD      sp,sp,#0x10
00003a  e8bd87f0          POP      {r4-r10,pc}
                  |L5.62|
00003e  4620              MOV      r0,r4                 ;314
000040  f7fffffe          BL       rt_object_delete
000044  2000              MOVS     r0,#0                 ;316
000046  e7f7              B        |L5.56|
;;;330    RTM_EXPORT(rt_thread_create);
                          ENDP


                          AREA ||i.rt_thread_delay||, CODE, READONLY, ALIGN=1

                  rt_thread_delay PROC
;;;457     */
;;;458    rt_err_t rt_thread_delay(rt_tick_t tick)
000000  f7ffbffe          B.W      rt_thread_sleep
;;;459    {
;;;460        return rt_thread_sleep(tick);
;;;461    }
;;;462    RTM_EXPORT(rt_thread_delay);
                          ENDP


                          AREA ||i.rt_thread_delete||, CODE, READONLY, ALIGN=2

                  rt_thread_delete PROC
;;;339     */
;;;340    rt_err_t rt_thread_delete(rt_thread_t thread)
000000  b538              PUSH     {r3-r5,lr}
;;;341    {
000002  0004              MOVS     r4,r0
000004  d10c              BNE      |L7.32|
;;;342        rt_base_t lock;
;;;343    
;;;344        /* thread check */
;;;345        RT_ASSERT(thread != RT_NULL);
000006  f88d0000          STRB     r0,[sp,#0]
00000a  f2401359          MOV      r3,#0x159
00000e  4a10              LDR      r2,|L7.80|
000010  a110              ADR      r1,|L7.84|
000012  a015              ADR      r0,|L7.104|
000014  f7fffffe          BL       rt_kprintf
                  |L7.24|
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  2800              CMP      r0,#0
00001e  d0fb              BEQ      |L7.24|
                  |L7.32|
;;;346    
;;;347        /* remove from schedule */
;;;348        rt_schedule_remove_thread(thread);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       rt_schedule_remove_thread
;;;349    
;;;350        /* release thread timer */
;;;351        rt_timer_detach(&(thread->thread_timer));
000026  f104004c          ADD      r0,r4,#0x4c
00002a  f7fffffe          BL       rt_timer_detach
;;;352    
;;;353        /* change stat */
;;;354        thread->stat = RT_THREAD_CLOSE;
00002e  2004              MOVS     r0,#4
000030  f8840034          STRB     r0,[r4,#0x34]
;;;355    
;;;356        /* disable interrupt */
;;;357        lock = rt_hw_interrupt_disable();
000034  f7fffffe          BL       rt_hw_interrupt_disable
000038  4605              MOV      r5,r0
;;;358    
;;;359        /* insert to defunct thread list */
;;;360        rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
00003a  f1040114          ADD      r1,r4,#0x14
00003e  4812              LDR      r0,|L7.136|
000040  f7fffffe          BL       rt_list_insert_after
;;;361    
;;;362        /* enable interrupt */
;;;363        rt_hw_interrupt_enable(lock);
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       rt_hw_interrupt_enable
;;;364    
;;;365        return RT_EOK;
00004a  2000              MOVS     r0,#0
;;;366    }
00004c  bd38              POP      {r3-r5,pc}
;;;367    RTM_EXPORT(rt_thread_delete);
                          ENDP

00004e  0000              DCW      0x0000
                  |L7.80|
                          DCD      ||.constdata||+0x42
                  |L7.84|
000054  74687265          DCB      "thread != RT_NULL",0
000058  61642021
00005c  3d205254
000060  5f4e554c
000064  4c00    
000066  00                DCB      0
000067  00                DCB      0
                  |L7.104|
000068  28257329          DCB      "(%s) assert failed at %s:%d \n",0
00006c  20617373
000070  65727420
000074  6661696c
000078  65642061
00007c  74202573
000080  3a256420
000084  0a00    
000086  00                DCB      0
000087  00                DCB      0
                  |L7.136|
                          DCD      rt_thread_defunct

                          AREA ||i.rt_thread_detach||, CODE, READONLY, ALIGN=2

                  rt_thread_detach PROC
;;;244     */
;;;245    rt_err_t rt_thread_detach(rt_thread_t thread)
000000  b538              PUSH     {r3-r5,lr}
;;;246    {
000002  0004              MOVS     r4,r0
000004  d10b              BNE      |L8.30|
;;;247        rt_base_t lock;
;;;248    
;;;249        /* thread check */
;;;250        RT_ASSERT(thread != RT_NULL);
000006  f88d0000          STRB     r0,[sp,#0]
00000a  23fa              MOVS     r3,#0xfa
00000c  4a12              LDR      r2,|L8.88|
00000e  a113              ADR      r1,|L8.92|
000010  a017              ADR      r0,|L8.112|
000012  f7fffffe          BL       rt_kprintf
                  |L8.22|
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  2800              CMP      r0,#0
00001c  d0fb              BEQ      |L8.22|
                  |L8.30|
;;;251    
;;;252        /* remove from schedule */
;;;253        rt_schedule_remove_thread(thread);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       rt_schedule_remove_thread
;;;254    
;;;255        /* release thread timer */
;;;256        rt_timer_detach(&(thread->thread_timer));
000024  f104004c          ADD      r0,r4,#0x4c
000028  f7fffffe          BL       rt_timer_detach
;;;257    
;;;258        /* change stat */
;;;259        thread->stat = RT_THREAD_CLOSE;
00002c  2004              MOVS     r0,#4
00002e  f8840034          STRB     r0,[r4,#0x34]
;;;260    
;;;261        /* detach object */
;;;262        rt_object_detach((rt_object_t)thread);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       rt_object_detach
;;;263    
;;;264        if (thread->cleanup != RT_NULL)
000038  6fa0              LDR      r0,[r4,#0x78]
00003a  b150              CBZ      r0,|L8.82|
;;;265        {
;;;266            /* disable interrupt */
;;;267            lock = rt_hw_interrupt_disable();
00003c  f7fffffe          BL       rt_hw_interrupt_disable
000040  4605              MOV      r5,r0
;;;268    
;;;269            /* insert to defunct thread list */
;;;270            rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
000042  f1040114          ADD      r1,r4,#0x14
000046  4812              LDR      r0,|L8.144|
000048  f7fffffe          BL       rt_list_insert_after
;;;271    
;;;272            /* enable interrupt */
;;;273            rt_hw_interrupt_enable(lock);
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       rt_hw_interrupt_enable
                  |L8.82|
;;;274        }
;;;275    
;;;276        return RT_EOK;
000052  2000              MOVS     r0,#0
;;;277    }
000054  bd38              POP      {r3-r5,pc}
;;;278    RTM_EXPORT(rt_thread_detach);
                          ENDP

000056  0000              DCW      0x0000
                  |L8.88|
                          DCD      ||.constdata||+0x31
                  |L8.92|
00005c  74687265          DCB      "thread != RT_NULL",0
000060  61642021
000064  3d205254
000068  5f4e554c
00006c  4c00    
00006e  00                DCB      0
00006f  00                DCB      0
                  |L8.112|
000070  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000074  20617373
000078  65727420
00007c  6661696c
000080  65642061
000084  74202573
000088  3a256420
00008c  0a00    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L8.144|
                          DCD      rt_thread_defunct

                          AREA ||i.rt_thread_exit||, CODE, READONLY, ALIGN=2

                  rt_thread_exit PROC
;;;46     
;;;47     static void rt_thread_exit(void)
000000  b570              PUSH     {r4-r6,lr}
;;;48     {
;;;49         struct rt_thread *thread;
;;;50         register rt_base_t level;
;;;51     
;;;52         /* get current thread */
;;;53         thread = rt_current_thread;
000002  4813              LDR      r0,|L9.80|
;;;54     
;;;55         /* disable interrupt */
;;;56         level = rt_hw_interrupt_disable();
000004  6804              LDR      r4,[r0,#0]  ; rt_current_thread
000006  f7fffffe          BL       rt_hw_interrupt_disable
00000a  4605              MOV      r5,r0
;;;57     
;;;58         /* remove from schedule */
;;;59         rt_schedule_remove_thread(thread);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       rt_schedule_remove_thread
;;;60         /* change stat */
;;;61         thread->stat = RT_THREAD_CLOSE;
000012  2004              MOVS     r0,#4
000014  f8840034          STRB     r0,[r4,#0x34]
;;;62     
;;;63         /* remove it from timer list */
;;;64         rt_timer_detach(&thread->thread_timer);
000018  f104004c          ADD      r0,r4,#0x4c
00001c  f7fffffe          BL       rt_timer_detach
;;;65     
;;;66         if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       rt_object_is_systemobject
000026  2801              CMP      r0,#1
000028  d101              BNE      |L9.46|
;;;67             thread->cleanup == RT_NULL)
00002a  6fa0              LDR      r0,[r4,#0x78]
00002c  b158              CBZ      r0,|L9.70|
                  |L9.46|
;;;68         {
;;;69             rt_object_detach((rt_object_t)thread);
;;;70         }
;;;71         else
;;;72         {
;;;73             /* insert to defunct thread list */
;;;74             rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
00002e  f1040114          ADD      r1,r4,#0x14
000032  4808              LDR      r0,|L9.84|
000034  f7fffffe          BL       rt_list_insert_after
                  |L9.56|
;;;75         }
;;;76     
;;;77         /* enable interrupt */
;;;78         rt_hw_interrupt_enable(level);
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       rt_hw_interrupt_enable
;;;79     
;;;80         /* switch to next task */
;;;81         rt_schedule();
00003e  e8bd4070          POP      {r4-r6,lr}
000042  f7ffbffe          B.W      rt_schedule
                  |L9.70|
000046  4620              MOV      r0,r4                 ;69
000048  f7fffffe          BL       rt_object_detach
00004c  e7f4              B        |L9.56|
;;;82     }
;;;83     
                          ENDP

00004e  0000              DCW      0x0000
                  |L9.80|
                          DCD      rt_current_thread
                  |L9.84|
                          DCD      rt_thread_defunct

                          AREA ||i.rt_thread_find||, CODE, READONLY, ALIGN=2

                  rt_thread_find PROC
;;;668     */
;;;669    rt_thread_t rt_thread_find(char *name)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;670    {
000004  4f10              LDR      r7,|L10.72|
000006  4680              MOV      r8,r0
000008  6838              LDR      r0,[r7,#0]  ; rt_current_thread
00000a  b108              CBZ      r0,|L10.16|
;;;671        struct rt_object_information *information;
;;;672        struct rt_object *object;
;;;673        struct rt_list_node *node;
;;;674    
;;;675        extern struct rt_object_information rt_object_container[];
;;;676    
;;;677        /* enter critical */
;;;678        if (rt_thread_self() != RT_NULL)
;;;679            rt_enter_critical();
00000c  f7fffffe          BL       rt_enter_critical
                  |L10.16|
;;;680    
;;;681        /* try to find device object */
;;;682        information = &rt_object_container[RT_Object_Class_Thread];
000010  4e0e              LDR      r6,|L10.76|
;;;683        for (node  = information->object_list.next;
000012  f8564f04          LDR      r4,[r6,#4]!
000016  e008              B        |L10.42|
                  |L10.24|
;;;684             node != &(information->object_list);
;;;685             node  = node->next)
;;;686        {
;;;687            object = rt_list_entry(node, struct rt_object, list);
000018  f1a4050c          SUB      r5,r4,#0xc
;;;688            if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
00001c  2208              MOVS     r2,#8
00001e  4641              MOV      r1,r8
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       rt_strncmp
000026  b148              CBZ      r0,|L10.60|
000028  6824              LDR      r4,[r4,#0]            ;685
                  |L10.42|
00002a  42b4              CMP      r4,r6                 ;684
00002c  d1f4              BNE      |L10.24|
;;;689            {
;;;690                /* leave critical */
;;;691                if (rt_thread_self() != RT_NULL)
;;;692                    rt_exit_critical();
;;;693    
;;;694                return (rt_thread_t)object;
;;;695            }
;;;696        }
;;;697    
;;;698        /* leave critical */
;;;699        if (rt_thread_self() != RT_NULL)
00002e  6838              LDR      r0,[r7,#0]  ; rt_current_thread
000030  b108              CBZ      r0,|L10.54|
;;;700            rt_exit_critical();
000032  f7fffffe          BL       rt_exit_critical
                  |L10.54|
;;;701    
;;;702        /* not found */
;;;703        return RT_NULL;
000036  2000              MOVS     r0,#0
                  |L10.56|
;;;704    }
000038  e8bd81f0          POP      {r4-r8,pc}
                  |L10.60|
00003c  6838              LDR      r0,[r7,#0]            ;691  ; rt_current_thread
00003e  b108              CBZ      r0,|L10.68|
000040  f7fffffe          BL       rt_exit_critical
                  |L10.68|
000044  4628              MOV      r0,r5                 ;694
000046  e7f7              B        |L10.56|
;;;705    RTM_EXPORT(rt_thread_find);
                          ENDP

                  |L10.72|
                          DCD      rt_current_thread
                  |L10.76|
                          DCD      rt_object_container

                          AREA ||i.rt_thread_init||, CODE, READONLY, ALIGN=2

                  rt_thread_init PROC
;;;157     */
;;;158    rt_err_t rt_thread_init(struct rt_thread *thread,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;159                            const char       *name,
;;;160                            void (*entry)(void *parameter),
;;;161                            void             *parameter,
;;;162                            void             *stack_start,
;;;163                            rt_uint32_t       stack_size,
;;;164                            rt_uint8_t        priority,
;;;165                            rt_uint32_t       tick)
;;;166    {
000004  b085              SUB      sp,sp,#0x14
000006  469b              MOV      r11,r3
000008  e9dd4912          LDRD     r4,r9,[sp,#0x48]
00000c  e9dd8714          LDRD     r8,r7,[sp,#0x50]
000010  468a              MOV      r10,r1
000012  0006              MOVS     r6,r0
000014  f04f0500          MOV      r5,#0
000018  d10b              BNE      |L11.50|
;;;167        /* thread check */
;;;168        RT_ASSERT(thread != RT_NULL);
00001a  f88d5000          STRB     r5,[sp,#0]
00001e  23a8              MOVS     r3,#0xa8
000020  4a13              LDR      r2,|L11.112|
000022  a114              ADR      r1,|L11.116|
000024  a018              ADR      r0,|L11.136|
000026  f7fffffe          BL       rt_kprintf
                  |L11.42|
00002a  f89d0000          LDRB     r0,[sp,#0]
00002e  2800              CMP      r0,#0
000030  d0fb              BEQ      |L11.42|
                  |L11.50|
;;;169        RT_ASSERT(stack_start != RT_NULL);
000032  b95c              CBNZ     r4,|L11.76|
000034  f88d5000          STRB     r5,[sp,#0]
000038  23a9              MOVS     r3,#0xa9
00003a  4a0d              LDR      r2,|L11.112|
00003c  a11a              ADR      r1,|L11.168|
00003e  a012              ADR      r0,|L11.136|
000040  f7fffffe          BL       rt_kprintf
                  |L11.68|
000044  f89d0000          LDRB     r0,[sp,#0]
000048  2800              CMP      r0,#0
00004a  d0fb              BEQ      |L11.68|
                  |L11.76|
;;;170    
;;;171        /* init thread object */
;;;172        rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
00004c  4652              MOV      r2,r10
00004e  2100              MOVS     r1,#0
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       rt_object_init
;;;173    
;;;174        return _rt_thread_init(thread,
000056  e9cd8702          STRD     r8,r7,[sp,#8]
00005a  e9cd4900          STRD     r4,r9,[sp,#0]
00005e  465b              MOV      r3,r11
000060  4651              MOV      r1,r10
000062  4630              MOV      r0,r6
000064  9a07              LDR      r2,[sp,#0x1c]
000066  f7fffffe          BL       _rt_thread_init
;;;175                               name,
;;;176                               entry,
;;;177                               parameter,
;;;178                               stack_start,
;;;179                               stack_size,
;;;180                               priority,
;;;181                               tick);
;;;182    }
00006a  b009              ADD      sp,sp,#0x24
00006c  e8bd8ff0          POP      {r4-r11,pc}
;;;183    RTM_EXPORT(rt_thread_init);
                          ENDP

                  |L11.112|
                          DCD      ||.constdata||+0x10
                  |L11.116|
000074  74687265          DCB      "thread != RT_NULL",0
000078  61642021
00007c  3d205254
000080  5f4e554c
000084  4c00    
000086  00                DCB      0
000087  00                DCB      0
                  |L11.136|
000088  28257329          DCB      "(%s) assert failed at %s:%d \n",0
00008c  20617373
000090  65727420
000094  6661696c
000098  65642061
00009c  74202573
0000a0  3a256420
0000a4  0a00    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L11.168|
0000a8  73746163          DCB      "stack_start != RT_NULL",0
0000ac  6b5f7374
0000b0  61727420
0000b4  213d2052
0000b8  545f4e55
0000bc  4c4c00  
0000bf  00                DCB      0

                          AREA ||i.rt_thread_resume||, CODE, READONLY, ALIGN=2

                  rt_thread_resume PROC
;;;594     */
;;;595    rt_err_t rt_thread_resume(rt_thread_t thread)
000000  b538              PUSH     {r3-r5,lr}
;;;596    {
000002  0004              MOVS     r4,r0
000004  d10c              BNE      |L12.32|
;;;597        register rt_base_t temp;
;;;598    
;;;599        /* thread check */
;;;600        RT_ASSERT(thread != RT_NULL);
000006  f88d0000          STRB     r0,[sp,#0]
00000a  f44f7316          MOV      r3,#0x258
00000e  4a11              LDR      r2,|L12.84|
000010  a111              ADR      r1,|L12.88|
000012  a016              ADR      r0,|L12.108|
000014  f7fffffe          BL       rt_kprintf
                  |L12.24|
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  2800              CMP      r0,#0
00001e  d0fb              BEQ      |L12.24|
                  |L12.32|
;;;601    
;;;602        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume:  %s\n", thread->name));
;;;603    
;;;604        if (thread->stat != RT_THREAD_SUSPEND)
000020  f8940034          LDRB     r0,[r4,#0x34]
000024  2802              CMP      r0,#2
000026  d002              BEQ      |L12.46|
;;;605        {
;;;606            RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume: thread disorder, %d\n",
;;;607                                           thread->stat));
;;;608    
;;;609            return -RT_ERROR;
000028  f04f30ff          MOV      r0,#0xffffffff
;;;610        }
;;;611    
;;;612        /* disable interrupt */
;;;613        temp = rt_hw_interrupt_disable();
;;;614    
;;;615        /* remove from suspend list */
;;;616        rt_list_remove(&(thread->tlist));
;;;617    
;;;618        rt_timer_stop(&thread->thread_timer);
;;;619    
;;;620        /* enable interrupt */
;;;621        rt_hw_interrupt_enable(temp);
;;;622    
;;;623        /* insert to schedule ready list */
;;;624        rt_schedule_insert_thread(thread);
;;;625    
;;;626        return RT_EOK;
;;;627    }
00002c  bd38              POP      {r3-r5,pc}
                  |L12.46|
00002e  f7fffffe          BL       rt_hw_interrupt_disable
000032  4605              MOV      r5,r0                 ;613
000034  f1040014          ADD      r0,r4,#0x14           ;616
000038  f7fffffe          BL       rt_list_remove
00003c  f104004c          ADD      r0,r4,#0x4c           ;618
000040  f7fffffe          BL       rt_timer_stop
000044  4628              MOV      r0,r5                 ;621
000046  f7fffffe          BL       rt_hw_interrupt_enable
00004a  4620              MOV      r0,r4                 ;624
00004c  f7fffffe          BL       rt_schedule_insert_thread
000050  2000              MOVS     r0,#0                 ;626
000052  bd38              POP      {r3-r5,pc}
;;;628    RTM_EXPORT(rt_thread_resume);
                          ENDP

                  |L12.84|
                          DCD      ||.constdata||+0x87
                  |L12.88|
000058  74687265          DCB      "thread != RT_NULL",0
00005c  61642021
000060  3d205254
000064  5f4e554c
000068  4c00    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L12.108|
00006c  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000070  20617373
000074  65727420
000078  6661696c
00007c  65642061
000080  74202573
000084  3a256420
000088  0a00    
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.rt_thread_self||, CODE, READONLY, ALIGN=2

                  rt_thread_self PROC
;;;189     */
;;;190    rt_thread_t rt_thread_self(void)
000000  4801              LDR      r0,|L13.8|
;;;191    {
;;;192        return rt_current_thread;
000002  6800              LDR      r0,[r0,#0]  ; rt_current_thread
;;;193    }
000004  4770              BX       lr
;;;194    RTM_EXPORT(rt_thread_self);
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      rt_current_thread

                          AREA ||i.rt_thread_sleep||, CODE, READONLY, ALIGN=2

                  rt_thread_sleep PROC
;;;420     */
;;;421    rt_err_t rt_thread_sleep(rt_tick_t tick)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;422    {
000002  b082              SUB      sp,sp,#8
;;;423        register rt_base_t temp;
;;;424        struct rt_thread *thread;
;;;425    
;;;426        /* disable interrupt */
;;;427        temp = rt_hw_interrupt_disable();
000004  f7fffffe          BL       rt_hw_interrupt_disable
000008  4606              MOV      r6,r0
;;;428        /* set to current thread */
;;;429        thread = rt_current_thread;
00000a  4814              LDR      r0,|L14.92|
00000c  2500              MOVS     r5,#0
;;;430        RT_ASSERT(thread != RT_NULL);
00000e  6804              LDR      r4,[r0,#0]  ; rt_current_thread
000010  b964              CBNZ     r4,|L14.44|
000012  f88d5000          STRB     r5,[sp,#0]
000016  f44f73d7          MOV      r3,#0x1ae
00001a  4a11              LDR      r2,|L14.96|
00001c  a111              ADR      r1,|L14.100|
00001e  a016              ADR      r0,|L14.120|
000020  f7fffffe          BL       rt_kprintf
                  |L14.36|
000024  f89d0000          LDRB     r0,[sp,#0]
000028  2800              CMP      r0,#0
00002a  d0fb              BEQ      |L14.36|
                  |L14.44|
;;;431    
;;;432        /* suspend thread */
;;;433        rt_thread_suspend(thread);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       rt_thread_suspend
;;;434    
;;;435        /* reset the timeout of thread timer and start it */
;;;436        rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
000032  f104004c          ADD      r0,r4,#0x4c
000036  aa02              ADD      r2,sp,#8
000038  2100              MOVS     r1,#0
00003a  4607              MOV      r7,r0
00003c  f7fffffe          BL       rt_timer_control
000040  4638              MOV      r0,r7
;;;437        rt_timer_start(&(thread->thread_timer));
000042  f7fffffe          BL       rt_timer_start
;;;438    
;;;439        /* enable interrupt */
;;;440        rt_hw_interrupt_enable(temp);
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       rt_hw_interrupt_enable
;;;441    
;;;442        rt_schedule();
00004c  f7fffffe          BL       rt_schedule
;;;443    
;;;444        /* clear error number of this thread to RT_EOK */
;;;445        if (thread->error == -RT_ETIMEOUT)
000050  6b20              LDR      r0,[r4,#0x30]
000052  1c80              ADDS     r0,r0,#2
000054  d100              BNE      |L14.88|
;;;446            thread->error = RT_EOK;
000056  6325              STR      r5,[r4,#0x30]
                  |L14.88|
;;;447    
;;;448        return RT_EOK;
000058  2000              MOVS     r0,#0
;;;449    }
00005a  bdfe              POP      {r1-r7,pc}
;;;450    
                          ENDP

                  |L14.92|
                          DCD      rt_current_thread
                  |L14.96|
                          DCD      ||.constdata||+0x53
                  |L14.100|
000064  74687265          DCB      "thread != RT_NULL",0
000068  61642021
00006c  3d205254
000070  5f4e554c
000074  4c00    
000076  00                DCB      0
000077  00                DCB      0
                  |L14.120|
000078  28257329          DCB      "(%s) assert failed at %s:%d \n",0
00007c  20617373
000080  65727420
000084  6661696c
000088  65642061
00008c  74202573
000090  3a256420
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0

                          AREA ||i.rt_thread_startup||, CODE, READONLY, ALIGN=2

                  rt_thread_startup PROC
;;;202     */
;;;203    rt_err_t rt_thread_startup(rt_thread_t thread)
000000  b538              PUSH     {r3-r5,lr}
;;;204    {
000002  0004              MOVS     r4,r0
000004  f04f0500          MOV      r5,#0
000008  d10b              BNE      |L15.34|
;;;205        /* thread check */
;;;206        RT_ASSERT(thread != RT_NULL);
00000a  f88d5000          STRB     r5,[sp,#0]
00000e  23ce              MOVS     r3,#0xce
000010  4a15              LDR      r2,|L15.104|
000012  a116              ADR      r1,|L15.108|
000014  a01a              ADR      r0,|L15.128|
000016  f7fffffe          BL       rt_kprintf
                  |L15.26|
00001a  f89d0000          LDRB     r0,[sp,#0]
00001e  2800              CMP      r0,#0
000020  d0fb              BEQ      |L15.26|
                  |L15.34|
;;;207        RT_ASSERT(thread->stat == RT_THREAD_INIT);
000022  f8940034          LDRB     r0,[r4,#0x34]
000026  b158              CBZ      r0,|L15.64|
000028  f88d5000          STRB     r5,[sp,#0]
00002c  23cf              MOVS     r3,#0xcf
00002e  4a0e              LDR      r2,|L15.104|
000030  a11b              ADR      r1,|L15.160|
000032  a013              ADR      r0,|L15.128|
000034  f7fffffe          BL       rt_kprintf
                  |L15.56|
000038  f89d0000          LDRB     r0,[sp,#0]
00003c  2800              CMP      r0,#0
00003e  d0fb              BEQ      |L15.56|
                  |L15.64|
;;;208    
;;;209        /* set current priority to init priority */
;;;210        thread->current_priority = thread->init_priority;
000040  f8940036          LDRB     r0,[r4,#0x36]
;;;211    
;;;212        /* calculate priority attribute */
;;;213    #if RT_THREAD_PRIORITY_MAX > 32
;;;214        thread->number      = thread->current_priority >> 3;            /* 5bit */
;;;215        thread->number_mask = 1L << thread->number;
;;;216        thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
;;;217    #else
;;;218        thread->number_mask = 1L << thread->current_priority;
000044  2101              MOVS     r1,#1
000046  f8840035          STRB     r0,[r4,#0x35]         ;210
00004a  4081              LSLS     r1,r1,r0
;;;219    #endif
;;;220    
;;;221        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("startup a thread:%s with priority:%d\n",
;;;222                                       thread->name, thread->init_priority));
;;;223        /* change thread stat */
;;;224        thread->stat = RT_THREAD_SUSPEND;
00004c  2002              MOVS     r0,#2
00004e  63a1              STR      r1,[r4,#0x38]
000050  f8840034          STRB     r0,[r4,#0x34]
;;;225        /* then resume it */
;;;226        rt_thread_resume(thread);
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       rt_thread_resume
00005a  4819              LDR      r0,|L15.192|
00005c  6800              LDR      r0,[r0,#0]  ; rt_current_thread
;;;227        if (rt_thread_self() != RT_NULL)
00005e  b108              CBZ      r0,|L15.100|
;;;228        {
;;;229            /* do a scheduling */
;;;230            rt_schedule();
000060  f7fffffe          BL       rt_schedule
                  |L15.100|
;;;231        }
;;;232    
;;;233        return RT_EOK;
000064  2000              MOVS     r0,#0
;;;234    }
000066  bd38              POP      {r3-r5,pc}
;;;235    RTM_EXPORT(rt_thread_startup);
                          ENDP

                  |L15.104|
                          DCD      ||.constdata||+0x1f
                  |L15.108|
00006c  74687265          DCB      "thread != RT_NULL",0
000070  61642021
000074  3d205254
000078  5f4e554c
00007c  4c00    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L15.128|
000080  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000084  20617373
000088  65727420
00008c  6661696c
000090  65642061
000094  74202573
000098  3a256420
00009c  0a00    
00009e  00                DCB      0
00009f  00                DCB      0
                  |L15.160|
0000a0  74687265          DCB      "thread->stat == RT_THREAD_INIT",0
0000a4  61642d3e
0000a8  73746174
0000ac  203d3d20
0000b0  52545f54
0000b4  48524541
0000b8  445f494e
0000bc  495400  
0000bf  00                DCB      0
                  |L15.192|
                          DCD      rt_current_thread

                          AREA ||i.rt_thread_suspend||, CODE, READONLY, ALIGN=2

                  rt_thread_suspend PROC
;;;553     */
;;;554    rt_err_t rt_thread_suspend(rt_thread_t thread)
000000  b538              PUSH     {r3-r5,lr}
;;;555    {
000002  0004              MOVS     r4,r0
000004  d10c              BNE      |L16.32|
;;;556        register rt_base_t temp;
;;;557    
;;;558        /* thread check */
;;;559        RT_ASSERT(thread != RT_NULL);
000006  f88d0000          STRB     r0,[sp,#0]
00000a  f240232f          MOV      r3,#0x22f
00000e  4a11              LDR      r2,|L16.84|
000010  a111              ADR      r1,|L16.88|
000012  a016              ADR      r0,|L16.108|
000014  f7fffffe          BL       rt_kprintf
                  |L16.24|
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  2800              CMP      r0,#0
00001e  d0fb              BEQ      |L16.24|
                  |L16.32|
;;;560    
;;;561        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend:  %s\n", thread->name));
;;;562    
;;;563        if (thread->stat != RT_THREAD_READY)
000020  f8940034          LDRB     r0,[r4,#0x34]
000024  2801              CMP      r0,#1
000026  d002              BEQ      |L16.46|
;;;564        {
;;;565            RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend: thread disorder, %d\n",
;;;566                                           thread->stat));
;;;567    
;;;568            return -RT_ERROR;
000028  f04f30ff          MOV      r0,#0xffffffff
;;;569        }
;;;570    
;;;571        /* disable interrupt */
;;;572        temp = rt_hw_interrupt_disable();
;;;573    
;;;574        /* change thread stat */
;;;575        thread->stat = RT_THREAD_SUSPEND;
;;;576        rt_schedule_remove_thread(thread);
;;;577    
;;;578        /* stop thread timer anyway */
;;;579        rt_timer_stop(&(thread->thread_timer));
;;;580    
;;;581        /* enable interrupt */
;;;582        rt_hw_interrupt_enable(temp);
;;;583    
;;;584        return RT_EOK;
;;;585    }
00002c  bd38              POP      {r3-r5,pc}
                  |L16.46|
00002e  f7fffffe          BL       rt_hw_interrupt_disable
000032  4605              MOV      r5,r0                 ;572
000034  2002              MOVS     r0,#2                 ;575
000036  f8840034          STRB     r0,[r4,#0x34]         ;575
00003a  4620              MOV      r0,r4                 ;576
00003c  f7fffffe          BL       rt_schedule_remove_thread
000040  f104004c          ADD      r0,r4,#0x4c           ;579
000044  f7fffffe          BL       rt_timer_stop
000048  4628              MOV      r0,r5                 ;582
00004a  f7fffffe          BL       rt_hw_interrupt_enable
00004e  2000              MOVS     r0,#0                 ;584
000050  bd38              POP      {r3-r5,pc}
;;;586    RTM_EXPORT(rt_thread_suspend);
                          ENDP

000052  0000              DCW      0x0000
                  |L16.84|
                          DCD      ||.constdata||+0x75
                  |L16.88|
000058  74687265          DCB      "thread != RT_NULL",0
00005c  61642021
000060  3d205254
000064  5f4e554c
000068  4c00    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L16.108|
00006c  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000070  20617373
000074  65727420
000078  6661696c
00007c  65642061
000080  74202573
000084  3a256420
000088  0a00    
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.rt_thread_timeout||, CODE, READONLY, ALIGN=2

                  rt_thread_timeout PROC
;;;635     */
;;;636    void rt_thread_timeout(void *parameter)
000000  b538              PUSH     {r3-r5,lr}
;;;637    {
000002  0004              MOVS     r4,r0
000004  f04f0500          MOV      r5,#0
000008  d10c              BNE      |L17.36|
;;;638        struct rt_thread *thread;
;;;639    
;;;640        thread = (struct rt_thread *)parameter;
;;;641    
;;;642        /* thread check */
;;;643        RT_ASSERT(thread != RT_NULL);
00000a  f88d5000          STRB     r5,[sp,#0]
00000e  f2402383          MOV      r3,#0x283
000012  4a14              LDR      r2,|L17.100|
000014  a114              ADR      r1,|L17.104|
000016  a019              ADR      r0,|L17.124|
000018  f7fffffe          BL       rt_kprintf
                  |L17.28|
00001c  f89d0000          LDRB     r0,[sp,#0]
000020  2800              CMP      r0,#0
000022  d0fb              BEQ      |L17.28|
                  |L17.36|
;;;644        RT_ASSERT(thread->stat == RT_THREAD_SUSPEND);
000024  f8940034          LDRB     r0,[r4,#0x34]
000028  2802              CMP      r0,#2
00002a  d00c              BEQ      |L17.70|
00002c  f88d5000          STRB     r5,[sp,#0]
000030  f44f7321          MOV      r3,#0x284
000034  4a0b              LDR      r2,|L17.100|
000036  a119              ADR      r1,|L17.156|
000038  a010              ADR      r0,|L17.124|
00003a  f7fffffe          BL       rt_kprintf
                  |L17.62|
00003e  f89d0000          LDRB     r0,[sp,#0]
000042  2800              CMP      r0,#0
000044  d0fb              BEQ      |L17.62|
                  |L17.70|
;;;645    
;;;646        /* set error number */
;;;647        thread->error = -RT_ETIMEOUT;
000046  f06f0001          MVN      r0,#1
;;;648    
;;;649        /* remove from suspend list */
;;;650        rt_list_remove(&(thread->tlist));
00004a  6320              STR      r0,[r4,#0x30]
00004c  f1040014          ADD      r0,r4,#0x14
000050  f7fffffe          BL       rt_list_remove
;;;651    
;;;652        /* insert to schedule ready list */
;;;653        rt_schedule_insert_thread(thread);
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       rt_schedule_insert_thread
;;;654    
;;;655        /* do schedule */
;;;656        rt_schedule();
00005a  e8bd4038          POP      {r3-r5,lr}
00005e  f7ffbffe          B.W      rt_schedule
;;;657    }
;;;658    RTM_EXPORT(rt_thread_timeout);
                          ENDP

000062  0000              DCW      0x0000
                  |L17.100|
                          DCD      ||.constdata||+0x98
                  |L17.104|
000068  74687265          DCB      "thread != RT_NULL",0
00006c  61642021
000070  3d205254
000074  5f4e554c
000078  4c00    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L17.124|
00007c  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000080  20617373
000084  65727420
000088  6661696c
00008c  65642061
000090  74202573
000094  3a256420
000098  0a00    
00009a  00                DCB      0
00009b  00                DCB      0
                  |L17.156|
00009c  74687265          DCB      "thread->stat == RT_THREAD_SUSPEND",0
0000a0  61642d3e
0000a4  73746174
0000a8  203d3d20
0000ac  52545f54
0000b0  48524541
0000b4  445f5355
0000b8  5350454e
0000bc  4400    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.rt_thread_yield||, CODE, READONLY, ALIGN=2

                  rt_thread_yield PROC
;;;376     */
;;;377    rt_err_t rt_thread_yield(void)
000000  b570              PUSH     {r4-r6,lr}
;;;378    {
;;;379        register rt_base_t level;
;;;380        struct rt_thread *thread;
;;;381    
;;;382        /* disable interrupt */
;;;383        level = rt_hw_interrupt_disable();
000002  f7fffffe          BL       rt_hw_interrupt_disable
000006  4606              MOV      r6,r0
;;;384    
;;;385        /* set to current thread */
;;;386        thread = rt_current_thread;
000008  4812              LDR      r0,|L18.84|
;;;387    
;;;388        /* if the thread stat is READY and on ready queue list */
;;;389        if (thread->stat == RT_THREAD_READY &&
00000a  6804              LDR      r4,[r0,#0]  ; rt_current_thread
00000c  f8940034          LDRB     r0,[r4,#0x34]
000010  2801              CMP      r0,#1
000012  d119              BNE      |L18.72|
000014  e9d40105          LDRD     r0,r1,[r4,#0x14]
;;;390            thread->tlist.next != thread->tlist.prev)
000018  4288              CMP      r0,r1
00001a  d015              BEQ      |L18.72|
;;;391        {
;;;392            /* remove thread from thread list */
;;;393            rt_list_remove(&(thread->tlist));
00001c  f1040014          ADD      r0,r4,#0x14
000020  4605              MOV      r5,r0
000022  f7fffffe          BL       rt_list_remove
;;;394    
;;;395            /* put thread to end of ready queue */
;;;396            rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
000026  f8940035          LDRB     r0,[r4,#0x35]
00002a  490b              LDR      r1,|L18.88|
00002c  eb0100c0          ADD      r0,r1,r0,LSL #3
000030  6841              LDR      r1,[r0,#4]
000032  600d              STR      r5,[r1,#0]
000034  6841              LDR      r1,[r0,#4]
000036  6069              STR      r1,[r5,#4]
000038  6045              STR      r5,[r0,#4]
;;;397                                  &(thread->tlist));
;;;398    
;;;399            /* enable interrupt */
;;;400            rt_hw_interrupt_enable(level);
00003a  6028              STR      r0,[r5,#0]
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       rt_hw_interrupt_enable
;;;401    
;;;402            rt_schedule();
000042  f7fffffe          BL       rt_schedule
;;;403    
;;;404            return RT_EOK;
000046  e002              B        |L18.78|
                  |L18.72|
;;;405        }
;;;406    
;;;407        /* enable interrupt */
;;;408        rt_hw_interrupt_enable(level);
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       rt_hw_interrupt_enable
                  |L18.78|
;;;409    
;;;410        return RT_EOK;
00004e  2000              MOVS     r0,#0
;;;411    }
000050  bd70              POP      {r4-r6,pc}
;;;412    RTM_EXPORT(rt_thread_yield);
                          ENDP

000052  0000              DCW      0x0000
                  |L18.84|
                          DCD      rt_current_thread
                  |L18.88|
                          DCD      rt_thread_priority_table

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  5f72745f          DCB      0x5f,0x72,0x74,0x5f
000004  74687265          DCB      0x74,0x68,0x72,0x65
000008  61645f69          DCB      0x61,0x64,0x5f,0x69
00000c  6e697400          DCB      0x6e,0x69,0x74,0x00
                  |symbol_number.55|
000010  72745f74          DCB      0x72,0x74,0x5f,0x74
000014  68726561          DCB      0x68,0x72,0x65,0x61
000018  645f696e          DCB      0x64,0x5f,0x69,0x6e
00001c  697400            DCB      0x69,0x74,0x00
                  |symbol_number.56|
00001f  72                DCB      0x72
000020  745f7468          DCB      0x74,0x5f,0x74,0x68
000024  72656164          DCB      0x72,0x65,0x61,0x64
000028  5f737461          DCB      0x5f,0x73,0x74,0x61
00002c  72747570          DCB      0x72,0x74,0x75,0x70
000030  00                DCB      0x00
                  |symbol_number.57|
000031  72745f            DCB      0x72,0x74,0x5f
000034  74687265          DCB      0x74,0x68,0x72,0x65
000038  61645f64          DCB      0x61,0x64,0x5f,0x64
00003c  65746163          DCB      0x65,0x74,0x61,0x63
000040  6800              DCB      0x68,0x00
                  |symbol_number.58|
000042  7274              DCB      0x72,0x74
000044  5f746872          DCB      0x5f,0x74,0x68,0x72
000048  6561645f          DCB      0x65,0x61,0x64,0x5f
00004c  64656c65          DCB      0x64,0x65,0x6c,0x65
000050  746500            DCB      0x74,0x65,0x00
                  |symbol_number.59|
000053  72                DCB      0x72
000054  745f7468          DCB      0x74,0x5f,0x74,0x68
000058  72656164          DCB      0x72,0x65,0x61,0x64
00005c  5f736c65          DCB      0x5f,0x73,0x6c,0x65
000060  657000            DCB      0x65,0x70,0x00
                  |symbol_number.60|
000063  72                DCB      0x72
000064  745f7468          DCB      0x74,0x5f,0x74,0x68
000068  72656164          DCB      0x72,0x65,0x61,0x64
00006c  5f636f6e          DCB      0x5f,0x63,0x6f,0x6e
000070  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000074  00                DCB      0x00
                  |symbol_number.61|
000075  72745f            DCB      0x72,0x74,0x5f
000078  74687265          DCB      0x74,0x68,0x72,0x65
00007c  61645f73          DCB      0x61,0x64,0x5f,0x73
000080  75737065          DCB      0x75,0x73,0x70,0x65
000084  6e6400            DCB      0x6e,0x64,0x00
                  |symbol_number.62|
000087  72                DCB      0x72
000088  745f7468          DCB      0x74,0x5f,0x74,0x68
00008c  72656164          DCB      0x72,0x65,0x61,0x64
000090  5f726573          DCB      0x5f,0x72,0x65,0x73
000094  756d6500          DCB      0x75,0x6d,0x65,0x00
                  |symbol_number.63|
000098  72745f74          DCB      0x72,0x74,0x5f,0x74
00009c  68726561          DCB      0x68,0x72,0x65,0x61
0000a0  645f7469          DCB      0x64,0x5f,0x74,0x69
0000a4  6d656f75          DCB      0x6d,0x65,0x6f,0x75
0000a8  7400              DCB      0x74,0x00
