; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\idle.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\idle.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\idle.crf ..\OS\src\idle.c]
                          THUMB

                          AREA ||i._has_defunct_thread||, CODE, READONLY, ALIGN=2

                  _has_defunct_thread PROC
;;;70     /* Return whether there is defunctional thread to be deleted. */
;;;71     rt_inline int _has_defunct_thread(void)
000000  4803              LDR      r0,|L1.16|
;;;72     {
;;;73         /* The rt_list_isempty has prototype of "int rt_list_isempty(const rt_list_t *l)".
;;;74          * So the compiler has a good reason that the rt_thread_defunct list does
;;;75          * not change within rt_thread_idle_excute thus optimize the "while" loop
;;;76          * into a "if".
;;;77          *
;;;78          * So add the volatile qualifier here. */
;;;79         const volatile rt_list_t *l = (const volatile rt_list_t*)&rt_thread_defunct;
;;;80     
;;;81         return l->next != l;
000002  6801              LDR      r1,[r0,#0]
000004  4281              CMP      r1,r0
000006  d001              BEQ      |L1.12|
000008  2001              MOVS     r0,#1
;;;82     }
00000a  4770              BX       lr
                  |L1.12|
00000c  2000              MOVS     r0,#0                 ;81
00000e  4770              BX       lr
;;;83     
                          ENDP

                  |L1.16|
                          DCD      rt_thread_defunct

                          AREA ||i.rt_thread_idle_entry||, CODE, READONLY, ALIGN=2

                  rt_thread_idle_entry PROC
;;;182    
;;;183    static void rt_thread_idle_entry(void *parameter)
000000  4c03              LDR      r4,|L2.16|
                  |L2.2|
;;;184    {
;;;185        while (1)
;;;186        {
;;;187            #ifdef RT_USING_HOOK
;;;188            if (rt_thread_idle_hook != RT_NULL)
000002  6820              LDR      r0,[r4,#0]  ; rt_thread_idle_hook
000004  b100              CBZ      r0,|L2.8|
;;;189                rt_thread_idle_hook();
000006  4780              BLX      r0
                  |L2.8|
;;;190            #endif
;;;191    
;;;192            rt_thread_idle_excute();
000008  f7fffffe          BL       rt_thread_idle_excute
00000c  e7f9              B        |L2.2|
;;;193        }
;;;194    }
;;;195    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      ||.data||

                          AREA ||i.rt_thread_idle_excute||, CODE, READONLY, ALIGN=2

                  rt_thread_idle_excute PROC
;;;88      */
;;;89     void rt_thread_idle_excute(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;90     {
000002  2500              MOVS     r5,#0
;;;91         /* Loop until there is no dead thread. So one call to rt_thread_idle_excute
;;;92          * will do all the cleanups. */
;;;93         while (_has_defunct_thread())
;;;94         {
;;;95             rt_base_t lock;
;;;96             rt_thread_t thread;
;;;97     #ifdef RT_USING_MODULE
;;;98             rt_module_t module = RT_NULL;
;;;99     #endif
;;;100            RT_DEBUG_NOT_IN_INTERRUPT;
;;;101    
;;;102            /* disable interrupt */
;;;103            lock = rt_hw_interrupt_disable();
;;;104    
;;;105            /* re-check whether list is empty */
;;;106            if (_has_defunct_thread())
;;;107            {
;;;108                /* get defunct thread */
;;;109                thread = rt_list_entry(rt_thread_defunct.next,
;;;110                                       struct rt_thread,
;;;111                                       tlist);
;;;112    #ifdef RT_USING_MODULE
;;;113                /* get thread's parent module */
;;;114                module = (rt_module_t)thread->module_id;
;;;115    
;;;116                /* if the thread is module's main thread */
;;;117                if (module != RT_NULL && module->module_thread == thread)
;;;118                {
;;;119                    /* detach module's main thread */
;;;120                    module->module_thread = RT_NULL;
;;;121                }
;;;122    #endif
;;;123                /* remove defunct thread */
;;;124                rt_list_remove(&(thread->tlist));
;;;125                /* invoke thread cleanup */
;;;126                if (thread->cleanup != RT_NULL)
;;;127                    thread->cleanup(thread);
;;;128    
;;;129                /* if it's a system object, not delete it */
;;;130                if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
;;;131                {
;;;132                    /* enable interrupt */
;;;133                    rt_hw_interrupt_enable(lock);
;;;134    
;;;135                    return;
;;;136                }
;;;137            }
;;;138            else
;;;139            {
;;;140                /* enable interrupt */
;;;141                rt_hw_interrupt_enable(lock);
;;;142    
;;;143                /* may the defunct thread list is removed by others, just return */
;;;144                return;
;;;145            }
;;;146    
;;;147            /* enable interrupt */
;;;148            rt_hw_interrupt_enable(lock);
;;;149    
;;;150    #ifdef RT_USING_HEAP
;;;151    #if defined(RT_USING_MODULE) && defined(RT_USING_SLAB)
;;;152            /* the thread belongs to an application module */
;;;153            if (thread->flags & RT_OBJECT_FLAG_MODULE)
;;;154                rt_module_free((rt_module_t)thread->module_id, thread->stack_addr);
;;;155            else
;;;156    #endif
;;;157            /* release thread's stack */
;;;158            RT_KERNEL_FREE(thread->stack_addr);
;;;159            /* delete thread object */
;;;160            rt_object_delete((rt_object_t)thread);
;;;161    #endif
;;;162    
;;;163    #ifdef RT_USING_MODULE
;;;164            if (module != RT_NULL)
;;;165            {
;;;166                extern rt_err_t rt_module_destroy(rt_module_t module);
;;;167    
;;;168                /* if sub thread list and main thread are all empty */
;;;169                if ((module->module_thread == RT_NULL) &&
;;;170                    rt_list_isempty(&module->module_object[RT_Object_Class_Thread].object_list))
;;;171                {
;;;172                    module->nref --;
;;;173                }
;;;174    
;;;175                /* destroy module */
;;;176                if (module->nref == 0)
;;;177                    rt_module_destroy(module);
;;;178            }
;;;179    #endif
;;;180        }
000004  e03c              B        |L3.128|
                  |L3.6|
000006  f7fffffe          BL       rt_hw_interrupt_disable
00000a  4604              MOV      r4,r0                 ;100
00000c  f7fffffe          BL       rt_interrupt_get_nest
000010  b178              CBZ      r0,|L3.50|
000012  4920              LDR      r1,|L3.148|
000014  a020              ADR      r0,|L3.152|
000016  f7fffffe          BL       rt_kprintf
00001a  f88d5000          STRB     r5,[sp,#0]            ;100
00001e  2364              MOVS     r3,#0x64              ;100
000020  4a1c              LDR      r2,|L3.148|
000022  a126              ADR      r1,|L3.188|
000024  a026              ADR      r0,|L3.192|
000026  f7fffffe          BL       rt_kprintf
                  |L3.42|
00002a  f89d0000          LDRB     r0,[sp,#0]            ;100
00002e  2800              CMP      r0,#0                 ;100
000030  d0fb              BEQ      |L3.42|
                  |L3.50|
000032  4620              MOV      r0,r4                 ;100
000034  f7fffffe          BL       rt_hw_interrupt_enable
000038  f7fffffe          BL       rt_hw_interrupt_disable
00003c  4606              MOV      r6,r0                 ;103
00003e  f7fffffe          BL       _has_defunct_thread
000042  b310              CBZ      r0,|L3.138|
000044  4826              LDR      r0,|L3.224|
000046  6801              LDR      r1,[r0,#0]            ;109  ; rt_thread_defunct
000048  f1a10414          SUB      r4,r1,#0x14           ;109
00004c  e9d10200          LDRD     r0,r2,[r1,#0]         ;109
000050  6042              STR      r2,[r0,#4]            ;109
000052  e9d10200          LDRD     r0,r2,[r1,#0]         ;109
000056  6010              STR      r0,[r2,#0]            ;109
000058  6049              STR      r1,[r1,#4]            ;109
00005a  6009              STR      r1,[r1,#0]            ;109
00005c  6e49              LDR      r1,[r1,#0x64]         ;126
00005e  b109              CBZ      r1,|L3.100|
000060  4620              MOV      r0,r4                 ;127
000062  4788              BLX      r1                    ;127
                  |L3.100|
000064  4620              MOV      r0,r4                 ;130
000066  f7fffffe          BL       rt_object_is_systemobject
00006a  2801              CMP      r0,#1                 ;130
00006c  d00d              BEQ      |L3.138|
00006e  4630              MOV      r0,r6                 ;148
000070  f7fffffe          BL       rt_hw_interrupt_enable
000074  6aa0              LDR      r0,[r4,#0x28]         ;158
000076  f7fffffe          BL       rt_free
00007a  4620              MOV      r0,r4                 ;160
00007c  f7fffffe          BL       rt_object_delete
                  |L3.128|
000080  f7fffffe          BL       _has_defunct_thread
000084  2800              CMP      r0,#0                 ;93
000086  d1be              BNE      |L3.6|
;;;181    }
000088  bdf8              POP      {r3-r7,pc}
                  |L3.138|
00008a  4630              MOV      r0,r6                 ;141
00008c  e8bd40f8          POP      {r3-r7,lr}            ;141
000090  f7ffbffe          B.W      rt_hw_interrupt_enable
;;;182    
                          ENDP

                  |L3.148|
                          DCD      ||.constdata||
                  |L3.152|
000098  46756e63          DCB      "Function[%s] shall not used in ISR\n",0
00009c  74696f6e
0000a0  5b25735d
0000a4  20736861
0000a8  6c6c206e
0000ac  6f742075
0000b0  73656420
0000b4  696e2049
0000b8  53520a00
                  |L3.188|
0000bc  3000              DCB      "0",0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L3.192|
0000c0  28257329          DCB      "(%s) assert failed at %s:%d \n",0
0000c4  20617373
0000c8  65727420
0000cc  6661696c
0000d0  65642061
0000d4  74202573
0000d8  3a256420
0000dc  0a00    
0000de  00                DCB      0
0000df  00                DCB      0
                  |L3.224|
                          DCD      rt_thread_defunct

                          AREA ||i.rt_thread_idle_init||, CODE, READONLY, ALIGN=2

                  rt_thread_idle_init PROC
;;;202     */
;;;203    void rt_thread_idle_init(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;204    {
;;;205        /* initialize thread */
;;;206        rt_thread_init(&idle,
000002  2320              MOVS     r3,#0x20
000004  4808              LDR      r0,|L4.40|
000006  221f              MOVS     r2,#0x1f
000008  0159              LSLS     r1,r3,#5
00000a  e88d000f          STM      sp,{r0-r3}
00000e  2300              MOVS     r3,#0
000010  4a06              LDR      r2,|L4.44|
000012  a107              ADR      r1,|L4.48|
000014  3880              SUBS     r0,r0,#0x80
000016  f7fffffe          BL       rt_thread_init
;;;207                       "tidle",
;;;208                       rt_thread_idle_entry,
;;;209                       RT_NULL,
;;;210                       &rt_thread_stack[0],
;;;211                       sizeof(rt_thread_stack),
;;;212                       RT_THREAD_PRIORITY_MAX - 1,
;;;213                       32);
;;;214    
;;;215        /* startup */
;;;216        rt_thread_startup(&idle);
00001a  b004              ADD      sp,sp,#0x10
00001c  4802              LDR      r0,|L4.40|
00001e  e8bd4010          POP      {r4,lr}
000022  3880              SUBS     r0,r0,#0x80
000024  f7ffbffe          B.W      rt_thread_startup
;;;217    }
                          ENDP

                  |L4.40|
                          DCD      ||.bss||+0x80
                  |L4.44|
                          DCD      rt_thread_idle_entry
                  |L4.48|
000030  7469646c          DCB      "tidle",0
000034  6500    
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i.rt_thread_idle_sethook||, CODE, READONLY, ALIGN=2

                  rt_thread_idle_sethook PROC
;;;61      */
;;;62     void rt_thread_idle_sethook(void (*hook)(void))
000000  4901              LDR      r1,|L5.8|
;;;63     {
;;;64         rt_thread_idle_hook = hook;
000002  6008              STR      r0,[r1,#0]  ; rt_thread_idle_hook
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  idle
                          %        128
                  rt_thread_stack
                          %        1024

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  72745f74          DCB      0x72,0x74,0x5f,0x74
000004  68726561          DCB      0x68,0x72,0x65,0x61
000008  645f6964          DCB      0x64,0x5f,0x69,0x64
00000c  6c655f65          DCB      0x6c,0x65,0x5f,0x65
000010  78637574          DCB      0x78,0x63,0x75,0x74
000014  6500              DCB      0x65,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  rt_thread_idle_hook
                          DCD      0x00000000
