; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\finsh_parser.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\finsh_parser.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\finsh_parser.crf ..\OS\components\finsh\finsh_parser.c]
                          THUMB

                          AREA ||i.finsh_parser_init||, CODE, READONLY, ALIGN=1

                  finsh_parser_init PROC
;;;999    
;;;1000   int finsh_parser_init(struct finsh_parser* self)
000000  b510              PUSH     {r4,lr}
;;;1001   {
;;;1002   	memset(self, 0, sizeof(struct finsh_parser));
000002  219c              MOVS     r1,#0x9c
000004  f7fffffe          BL       __aeabi_memclr4
;;;1003   
;;;1004   	return 0;
000008  2000              MOVS     r0,#0
;;;1005   }
00000a  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.finsh_parser_run||, CODE, READONLY, ALIGN=1

                  finsh_parser_run PROC
;;;915    */
;;;916    void finsh_parser_run(struct finsh_parser* self, const u_char* string)
000000  b570              PUSH     {r4-r6,lr}
;;;917    {
000002  4604              MOV      r4,r0
;;;918    	enum finsh_token_type token;
;;;919    	struct finsh_node *node;
;;;920    
;;;921        node = NULL;
;;;922    
;;;923    	/* init parser */
;;;924    	self->parser_string = (u_char*)string;
000004  c002              STM      r0!,{r1}
000006  2500              MOVS     r5,#0                 ;921
;;;925    
;;;926    	/* init token */
;;;927    	finsh_token_init(&(self->token), self->parser_string);
000008  f7fffffe          BL       finsh_token_init
;;;928    
;;;929    	/* get next token */
;;;930    	next_token(token, &(self->token));
00000c  1d20              ADDS     r0,r4,#4
00000e  f7fffffe          BL       finsh_token_token
;;;931    	while (token != finsh_token_type_eof && token != finsh_token_type_bad)
;;;932    	{
;;;933    		switch (token)
;;;934    		{
;;;935            case finsh_token_type_identifier:
;;;936                /* process expr_statement */
;;;937                finsh_token_replay(&(self->token));
000012  2601              MOVS     r6,#1
000014  e03c              B        |L2.144|
                  |L2.22|
000016  281f              CMP      r0,#0x1f              ;933
000018  d016              BEQ      |L2.72|
;;;938    
;;;939    			if (self->root != NULL)
;;;940    			{
;;;941    				finsh_node_sibling(node) = proc_expr_statement(self);
;;;942    				if (finsh_node_sibling(node) != NULL)
;;;943    					node = finsh_node_sibling(node);
;;;944    			}
;;;945    			else
;;;946    			{
;;;947                	node = proc_expr_statement(self);
;;;948    				self->root = node;
;;;949    			}
;;;950                break;
;;;951    
;;;952    		default:
;;;953                if (is_base_type(token) || token == finsh_token_type_unsigned)
00001a  2814              CMP      r0,#0x14
00001c  d020              BEQ      |L2.96|
00001e  2815              CMP      r0,#0x15
000020  d01e              BEQ      |L2.96|
000022  2816              CMP      r0,#0x16
000024  d01c              BEQ      |L2.96|
000026  2817              CMP      r0,#0x17
000028  d01a              BEQ      |L2.96|
00002a  2818              CMP      r0,#0x18
00002c  d018              BEQ      |L2.96|
00002e  2819              CMP      r0,#0x19
000030  d016              BEQ      |L2.96|
;;;954                {
;;;955                	/* variable decl */
;;;956                	finsh_token_replay(&(self->token));
;;;957    
;;;958    				if (self->root != NULL)
;;;959    				{
;;;960    					finsh_node_sibling(node) = proc_variable_decl(self);
;;;961    					if (finsh_node_sibling(node) != NULL)
;;;962    						node = finsh_node_sibling(node);
;;;963    				}
;;;964    				else
;;;965    				{
;;;966    					node = proc_variable_decl(self);
;;;967    					self->root = node;
;;;968    				}
;;;969                }
;;;970                else
;;;971                {
;;;972                	/* process expr_statement */
;;;973                    finsh_token_replay(&(self->token));
000032  7166              STRB     r6,[r4,#5]
;;;974    
;;;975    				if (self->root != NULL)
000034  f8d40098          LDR      r0,[r4,#0x98]
000038  b170              CBZ      r0,|L2.88|
;;;976    				{
;;;977                        finsh_node_sibling(node) = proc_expr_statement(self);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       proc_expr_statement
;;;978    					if (finsh_node_sibling(node) != NULL)
000040  60e8              STR      r0,[r5,#0xc]
000042  b350              CBZ      r0,|L2.154|
                  |L2.68|
;;;979    						node = finsh_node_sibling(node);
000044  4605              MOV      r5,r0
000046  e01c              B        |L2.130|
                  |L2.72|
000048  7166              STRB     r6,[r4,#5]            ;937
00004a  f8d40098          LDR      r0,[r4,#0x98]         ;939
00004e  b118              CBZ      r0,|L2.88|
000050  4620              MOV      r0,r4                 ;941
000052  f7fffffe          BL       proc_expr_statement
000056  e00b              B        |L2.112|
                  |L2.88|
000058  4620              MOV      r0,r4                 ;947
00005a  f7fffffe          BL       proc_expr_statement
00005e  e00d              B        |L2.124|
                  |L2.96|
000060  7166              STRB     r6,[r4,#5]            ;956
000062  f8d40098          LDR      r0,[r4,#0x98]         ;958
000066  2800              CMP      r0,#0                 ;958
000068  4620              MOV      r0,r4                 ;966
00006a  d005              BEQ      |L2.120|
00006c  f7fffffe          BL       proc_variable_decl
                  |L2.112|
000070  60e8              STR      r0,[r5,#0xc]          ;960
000072  2800              CMP      r0,#0                 ;960
000074  d1e6              BNE      |L2.68|
000076  e004              B        |L2.130|
                  |L2.120|
000078  f7fffffe          BL       proc_variable_decl
                  |L2.124|
;;;980    					else next_token(token, &(self->token));
;;;981    				}
;;;982    				else
;;;983    				{
;;;984    					node = proc_expr_statement(self);
00007c  4605              MOV      r5,r0
;;;985    					self->root = node;
00007e  f8c40098          STR      r0,[r4,#0x98]
                  |L2.130|
;;;986    				}
;;;987                }
;;;988    
;;;989    			break;
;;;990    		}
;;;991    
;;;992    		/* no root found, break out */
;;;993    		if (self->root == NULL) break;
000082  f8d40098          LDR      r0,[r4,#0x98]
000086  2800              CMP      r0,#0
000088  d006              BEQ      |L2.152|
;;;994    
;;;995            /* get next token */
;;;996    		next_token(token, &(self->token));
00008a  1d20              ADDS     r0,r4,#4
00008c  f7fffffe          BL       finsh_token_token
                  |L2.144|
000090  2821              CMP      r0,#0x21              ;931
000092  d001              BEQ      |L2.152|
000094  2820              CMP      r0,#0x20              ;931
000096  d1be              BNE      |L2.22|
                  |L2.152|
;;;997    	}
;;;998    }
000098  bd70              POP      {r4-r6,pc}
                  |L2.154|
00009a  1d20              ADDS     r0,r4,#4              ;980
00009c  f7fffffe          BL       finsh_token_token
0000a0  e7ef              B        |L2.130|
;;;999    
                          ENDP


                          AREA ||i.make_sys_node||, CODE, READONLY, ALIGN=1

                  make_sys_node PROC
;;;896    */
;;;897    static struct finsh_node* make_sys_node(u_char type, struct finsh_node* node1, struct finsh_node* node2)
000000  b570              PUSH     {r4-r6,lr}
;;;898    {
000002  4616              MOV      r6,r2
000004  460c              MOV      r4,r1
;;;899    	struct finsh_node* node;
;;;900    
;;;901    	node = finsh_node_allocate(type);
000006  f7fffffe          BL       finsh_node_allocate
00000a  4605              MOV      r5,r0
;;;902    
;;;903    	if ((node1 != NULL) && (node != NULL))
00000c  b11c              CBZ      r4,|L3.22|
00000e  b115              CBZ      r5,|L3.22|
;;;904    	{
;;;905    		finsh_node_child(node) = node1;
;;;906    		finsh_node_sibling(node1) = node2;
000010  612c              STR      r4,[r5,#0x10]
000012  60e6              STR      r6,[r4,#0xc]
000014  e002              B        |L3.28|
                  |L3.22|
;;;907    	}
;;;908    	else finsh_error_set(FINSH_ERROR_NULL_NODE);
000016  200e              MOVS     r0,#0xe
000018  f7fffffe          BL       finsh_error_set
                  |L3.28|
;;;909    
;;;910    	return node;
00001c  4628              MOV      r0,r5
;;;911    }
00001e  bd70              POP      {r4-r6,pc}
;;;912    
                          ENDP


                          AREA ||i.proc_additive_expr||, CODE, READONLY, ALIGN=1

                  proc_additive_expr PROC
;;;586    */
;;;587    static struct finsh_node* proc_additive_expr(struct finsh_parser* self)
000000  b570              PUSH     {r4-r6,lr}
;;;588    {
000002  4605              MOV      r5,r0
;;;589    	enum finsh_token_type token;
;;;590    	struct finsh_node* mul;
;;;591    	struct finsh_node* mul_new;
;;;592    
;;;593    	mul = proc_multiplicative_expr(self);
000004  f7fffffe          BL       proc_multiplicative_expr
;;;594    
;;;595    	next_token(token, &(self->token));
;;;596    	while ( token == finsh_token_type_sub || token == finsh_token_type_add )
000008  e01e              B        |L4.72|
                  |L4.10|
;;;597    	{
;;;598    		mul_new = proc_multiplicative_expr(self);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       proc_multiplicative_expr
000010  0002              MOVS     r2,r0
;;;599    		if (mul_new == NULL) finsh_error_set(FINSH_ERROR_EXPECT_OPERATOR);
000012  d003              BEQ      |L4.28|
;;;600    		else
;;;601    		{
;;;602    			switch (token)
000014  2c06              CMP      r4,#6
000016  d013              BEQ      |L4.64|
000018  2c08              CMP      r4,#8
00001a  d00e              BEQ      |L4.58|
                  |L4.28|
;;;603    			{
;;;604    			case finsh_token_type_sub:
;;;605    				mul = make_sys_node(FINSH_NODE_SYS_SUB, mul, mul_new);
;;;606    				break;
;;;607    			case finsh_token_type_add:
;;;608    				mul = make_sys_node(FINSH_NODE_SYS_ADD, mul, mul_new);
;;;609    				break;
;;;610    			default:
;;;611    				finsh_error_set(FINSH_ERROR_EXPECT_OPERATOR);
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       finsh_error_set
                  |L4.34|
;;;612    				break;
;;;613    			}
;;;614    		}
;;;615    		next_token(token, &(self->token));
000022  1d28              ADDS     r0,r5,#4
000024  f7fffffe          BL       finsh_token_token
000028  4604              MOV      r4,r0
00002a  2808              CMP      r0,#8                 ;596
00002c  d0ed              BEQ      |L4.10|
00002e  2c06              CMP      r4,#6                 ;596
000030  d0eb              BEQ      |L4.10|
;;;616    	}
;;;617    
;;;618    	finsh_token_replay(&(self->token));
000032  2001              MOVS     r0,#1
000034  7168              STRB     r0,[r5,#5]
;;;619    	return mul;
000036  4630              MOV      r0,r6
;;;620    }
000038  bd70              POP      {r4-r6,pc}
                  |L4.58|
00003a  4631              MOV      r1,r6                 ;605
00003c  2008              MOVS     r0,#8                 ;605
00003e  e001              B        |L4.68|
                  |L4.64|
000040  4631              MOV      r1,r6                 ;608
000042  2007              MOVS     r0,#7                 ;608
                  |L4.68|
000044  f7fffffe          BL       make_sys_node
                  |L4.72|
000048  4606              MOV      r6,r0                 ;593
00004a  e7ea              B        |L4.34|
;;;621    
                          ENDP


                          AREA ||i.proc_and_expr||, CODE, READONLY, ALIGN=1

                  proc_and_expr PROC
;;;518    */
;;;519    static struct finsh_node* proc_and_expr(struct finsh_parser* self)
000000  b570              PUSH     {r4-r6,lr}
;;;520    {
000002  4604              MOV      r4,r0
;;;521    	enum finsh_token_type token;
;;;522    	struct finsh_node* shift;
;;;523    	struct finsh_node* shift_new;
;;;524    
;;;525    	shift = proc_shift_expr(self);
000004  f7fffffe          BL       proc_shift_expr
;;;526    
;;;527    	next_token(token, &(self->token));
;;;528    	while ( token == finsh_token_type_and )
000008  e008              B        |L5.28|
                  |L5.10|
;;;529    	{
;;;530    		shift_new = proc_shift_expr(self);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       proc_shift_expr
000010  0002              MOVS     r2,r0
;;;531    
;;;532    		if (shift_new == NULL) finsh_error_set(FINSH_ERROR_EXPECT_OPERATOR);
000012  d00d              BEQ      |L5.48|
;;;533    		else shift = make_sys_node(FINSH_NODE_SYS_AND, shift, shift_new);
000014  4629              MOV      r1,r5
000016  200c              MOVS     r0,#0xc
000018  f7fffffe          BL       make_sys_node
                  |L5.28|
00001c  4605              MOV      r5,r0                 ;525
                  |L5.30|
;;;534    
;;;535    		next_token(token, &(self->token));
00001e  1d20              ADDS     r0,r4,#4
000020  f7fffffe          BL       finsh_token_token
000024  280d              CMP      r0,#0xd               ;528
000026  d0f0              BEQ      |L5.10|
;;;536    	}
;;;537    
;;;538    	finsh_token_replay(&(self->token));
000028  2001              MOVS     r0,#1
00002a  7160              STRB     r0,[r4,#5]
;;;539    	return shift;
00002c  4628              MOV      r0,r5
;;;540    }
00002e  bd70              POP      {r4-r6,pc}
                  |L5.48|
000030  2005              MOVS     r0,#5                 ;532
000032  f7fffffe          BL       finsh_error_set
000036  e7f2              B        |L5.30|
;;;541    
                          ENDP


                          AREA ||i.proc_assign_expr||, CODE, READONLY, ALIGN=1

                  proc_assign_expr PROC
;;;441    */
;;;442    static struct finsh_node* proc_assign_expr(struct finsh_parser* self)
000000  b570              PUSH     {r4-r6,lr}
;;;443    {
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       proc_exclusive_or_expr
;;;444    	enum finsh_token_type token;
;;;445    	struct finsh_node* or;
;;;446    	struct finsh_node* assign;
;;;447    
;;;448    	or = proc_inclusive_or_expr(self);
000008  e008              B        |L6.28|
                  |L6.10|
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       proc_exclusive_or_expr
000010  0002              MOVS     r2,r0
000012  d013              BEQ      |L6.60|
000014  4629              MOV      r1,r5
000016  200d              MOVS     r0,#0xd
000018  f7fffffe          BL       make_sys_node
                  |L6.28|
00001c  4605              MOV      r5,r0
                  |L6.30|
00001e  1d20              ADDS     r0,r4,#4
000020  f7fffffe          BL       finsh_token_token
000024  280e              CMP      r0,#0xe
000026  d0f0              BEQ      |L6.10|
000028  2601              MOVS     r6,#1
00002a  7166              STRB     r6,[r4,#5]
;;;449    
;;;450    	next_token(token, &(self->token));
00002c  1d20              ADDS     r0,r4,#4
00002e  f7fffffe          BL       finsh_token_token
;;;451    
;;;452    	if (token == finsh_token_type_assign)
000032  280c              CMP      r0,#0xc
000034  d006              BEQ      |L6.68|
;;;453    	{
;;;454    		assign = proc_assign_expr(self);
;;;455    
;;;456    		return make_sys_node(FINSH_NODE_SYS_ASSIGN, or, assign);
;;;457    	}
;;;458    	else finsh_token_replay(&(self->token));
000036  7166              STRB     r6,[r4,#5]
;;;459    
;;;460    	return or;
000038  4628              MOV      r0,r5
;;;461    }
00003a  bd70              POP      {r4-r6,pc}
                  |L6.60|
00003c  2005              MOVS     r0,#5
00003e  f7fffffe          BL       finsh_error_set
000042  e7ec              B        |L6.30|
                  |L6.68|
000044  4620              MOV      r0,r4                 ;454
000046  f7fffffe          BL       proc_assign_expr
00004a  4629              MOV      r1,r5                 ;456
00004c  e8bd4070          POP      {r4-r6,lr}            ;456
000050  4602              MOV      r2,r0                 ;454
000052  2013              MOVS     r0,#0x13              ;456
000054  f7ffbffe          B.W      make_sys_node
;;;462    
                          ENDP


                          AREA ||i.proc_cast_expr||, CODE, READONLY, ALIGN=1

                  proc_cast_expr PROC
;;;674    */
;;;675    static struct finsh_node* proc_cast_expr(struct finsh_parser* self)
000000  b570              PUSH     {r4-r6,lr}
;;;676    {
000002  4604              MOV      r4,r0
;;;677    	enum finsh_token_type token;
;;;678    	enum finsh_type type;
;;;679    	struct finsh_node* cast;
;;;680    
;;;681    	next_token(token, &(self->token));
000004  1d00              ADDS     r0,r0,#4
000006  f7fffffe          BL       finsh_token_token
00000a  2501              MOVS     r5,#1                 ;677
;;;682    	if (token == finsh_token_type_left_paren)
00000c  2801              CMP      r0,#1
00000e  d112              BNE      |L7.54|
;;;683    	{
;;;684    		type = proc_type(self);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       proc_type
000016  4606              MOV      r6,r0
;;;685    		match_token(token, &(self->token), finsh_token_type_right_paren);
000018  1d20              ADDS     r0,r4,#4
00001a  f7fffffe          BL       finsh_token_token
00001e  2802              CMP      r0,#2
000020  d003              BEQ      |L7.42|
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       finsh_error_set
000028  7165              STRB     r5,[r4,#5]
                  |L7.42|
;;;686    
;;;687    		cast = proc_cast_expr(self);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       proc_cast_expr
;;;688    		if (cast != NULL)
000030  b108              CBZ      r0,|L7.54|
;;;689    		{
;;;690    			cast->data_type = type;
000032  7046              STRB     r6,[r0,#1]
;;;691    			return cast;
;;;692    		}
;;;693    	}
;;;694    
;;;695    	finsh_token_replay(&(self->token));
;;;696    	return proc_unary_expr(self);
;;;697    }
000034  bd70              POP      {r4-r6,pc}
                  |L7.54|
000036  7165              STRB     r5,[r4,#5]            ;695
000038  4620              MOV      r0,r4                 ;696
00003a  e8bd4070          POP      {r4-r6,lr}            ;696
00003e  f7ffbffe          B.W      proc_unary_expr
;;;698    
                          ENDP


                          AREA ||i.proc_exclusive_or_expr||, CODE, READONLY, ALIGN=1

                  proc_exclusive_or_expr PROC
;;;493    */
;;;494    static struct finsh_node* proc_exclusive_or_expr(struct finsh_parser* self)
000000  b570              PUSH     {r4-r6,lr}
;;;495    {
000002  4604              MOV      r4,r0
;;;496    	enum finsh_token_type token;
;;;497    	struct finsh_node* and;
;;;498    	struct finsh_node* and_new;
;;;499    
;;;500    	and = proc_and_expr(self);
000004  f7fffffe          BL       proc_and_expr
;;;501    	next_token(token, &(self->token));
;;;502    	while ( token == finsh_token_type_xor )
000008  e008              B        |L8.28|
                  |L8.10|
;;;503    	{
;;;504    		and_new = proc_and_expr(self);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       proc_and_expr
000010  0002              MOVS     r2,r0
;;;505    		if (and_new == NULL) finsh_error_set(FINSH_ERROR_EXPECT_OPERATOR);
000012  d00d              BEQ      |L8.48|
;;;506    		else and = make_sys_node(FINSH_NODE_SYS_XOR, and, and_new);
000014  4629              MOV      r1,r5
000016  200e              MOVS     r0,#0xe
000018  f7fffffe          BL       make_sys_node
                  |L8.28|
00001c  4605              MOV      r5,r0                 ;500
                  |L8.30|
;;;507    
;;;508    		next_token(token, &(self->token));
00001e  1d20              ADDS     r0,r4,#4
000020  f7fffffe          BL       finsh_token_token
000024  280f              CMP      r0,#0xf               ;502
000026  d0f0              BEQ      |L8.10|
;;;509    	}
;;;510    
;;;511    	finsh_token_replay(&(self->token));
000028  2001              MOVS     r0,#1
00002a  7160              STRB     r0,[r4,#5]
;;;512    	return and;
00002c  4628              MOV      r0,r5
;;;513    }
00002e  bd70              POP      {r4-r6,pc}
                  |L8.48|
000030  2005              MOVS     r0,#5                 ;505
000032  f7fffffe          BL       finsh_error_set
000036  e7f2              B        |L8.30|
;;;514    
                          ENDP


                          AREA ||i.proc_expr||, CODE, READONLY, ALIGN=1

                  proc_expr PROC
;;;432    */
;;;433    static struct finsh_node* proc_expr(struct finsh_parser* self)
000000  f7ffbffe          B.W      proc_assign_expr
;;;434    {
;;;435    	return proc_assign_expr(self);
;;;436    }
;;;437    
                          ENDP


                          AREA ||i.proc_expr_statement||, CODE, READONLY, ALIGN=1

                  proc_expr_statement PROC
;;;411    */
;;;412    static struct finsh_node* proc_expr_statement(struct finsh_parser* self)
000000  b570              PUSH     {r4-r6,lr}
;;;413    {
000002  4604              MOV      r4,r0
;;;414    	enum finsh_token_type token;
;;;415    	struct finsh_node* expr;
;;;416    
;;;417    	expr = NULL;
000004  2500              MOVS     r5,#0
;;;418    	next_token(token, &(self->token));
000006  1d00              ADDS     r0,r0,#4
000008  f7fffffe          BL       finsh_token_token
;;;419    	if ( token != finsh_token_type_semicolon )
00000c  2804              CMP      r0,#4
00000e  d00e              BEQ      |L10.46|
;;;420    	{
;;;421    		finsh_token_replay(&(self->token));
000010  2601              MOVS     r6,#1
000012  7166              STRB     r6,[r4,#5]
;;;422    		expr = proc_expr(self);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       proc_expr
00001a  4605              MOV      r5,r0
;;;423    
;;;424    		match_token(token, &(self->token), finsh_token_type_semicolon);
00001c  1d20              ADDS     r0,r4,#4
00001e  f7fffffe          BL       finsh_token_token
000022  2804              CMP      r0,#4
000024  d003              BEQ      |L10.46|
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       finsh_error_set
00002c  7166              STRB     r6,[r4,#5]
                  |L10.46|
;;;425    	}
;;;426    
;;;427    	return expr;
00002e  4628              MOV      r0,r5
;;;428    }
000030  bd70              POP      {r4-r6,pc}
;;;429    
                          ENDP


                          AREA ||i.proc_identifier||, CODE, READONLY, ALIGN=1

                  proc_identifier PROC
;;;396    */
;;;397    static int proc_identifier(struct finsh_parser* self, char* id)
000000  b570              PUSH     {r4-r6,lr}
;;;398    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;399    	enum finsh_token_type token;
;;;400    
;;;401    	match_token(token, &(self->token), finsh_token_type_identifier);
000006  1d00              ADDS     r0,r0,#4
000008  f7fffffe          BL       finsh_token_token
00000c  281f              CMP      r0,#0x1f
00000e  d004              BEQ      |L11.26|
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       finsh_error_set
000016  2001              MOVS     r0,#1
000018  7160              STRB     r0,[r4,#5]
                  |L11.26|
;;;402    
;;;403    	strncpy(id, (char*)self->token.string, FINSH_NAME_MAX);
00001a  2210              MOVS     r2,#0x10
00001c  f1040114          ADD      r1,r4,#0x14
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       strncpy
;;;404    
;;;405    	return 0;
000026  2000              MOVS     r0,#0
;;;406    }
000028  bd70              POP      {r4-r6,pc}
;;;407    
                          ENDP


                          AREA ||i.proc_multiplicative_expr||, CODE, READONLY, ALIGN=1

                  proc_multiplicative_expr PROC
;;;627    */
;;;628    static struct finsh_node* proc_multiplicative_expr(struct finsh_parser* self)
000000  b570              PUSH     {r4-r6,lr}
;;;629    {
000002  4605              MOV      r5,r0
;;;630    	enum finsh_token_type token;
;;;631    	struct finsh_node* cast;
;;;632    	struct finsh_node* cast_new;
;;;633    
;;;634    	cast = proc_cast_expr(self);
000004  f7fffffe          BL       proc_cast_expr
;;;635    	next_token(token, &(self->token));
;;;636    	while (token == finsh_token_type_mul ||
000008  e025              B        |L12.86|
                  |L12.10|
;;;637    		token == finsh_token_type_div ||
;;;638    		token == finsh_token_type_mod )
;;;639    	{
;;;640    		cast_new = proc_cast_expr(self);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       proc_cast_expr
000010  0002              MOVS     r2,r0
;;;641    		if (cast_new == NULL) finsh_error_set(FINSH_ERROR_EXPECT_OPERATOR);
000012  d005              BEQ      |L12.32|
;;;642    		else
;;;643    		{
;;;644    			switch (token)
000014  2c05              CMP      r4,#5
000016  d014              BEQ      |L12.66|
000018  2c0a              CMP      r4,#0xa
00001a  d015              BEQ      |L12.72|
00001c  2c0b              CMP      r4,#0xb
00001e  d016              BEQ      |L12.78|
                  |L12.32|
;;;645    			{
;;;646    			case finsh_token_type_mul:
;;;647    				cast = make_sys_node(FINSH_NODE_SYS_MUL, cast, cast_new);
;;;648    				break;
;;;649    
;;;650    			case finsh_token_type_div:
;;;651    				cast = make_sys_node(FINSH_NODE_SYS_DIV, cast, cast_new);
;;;652    				break;
;;;653    
;;;654    			case finsh_token_type_mod:
;;;655    				cast = make_sys_node(FINSH_NODE_SYS_MOD, cast, cast_new);
;;;656    				break;
;;;657    
;;;658    			default:
;;;659    				finsh_error_set(FINSH_ERROR_EXPECT_OPERATOR);
000020  2005              MOVS     r0,#5
000022  f7fffffe          BL       finsh_error_set
                  |L12.38|
;;;660    				break;
;;;661    			}
;;;662    		}
;;;663    		next_token(token, &(self->token));
000026  1d28              ADDS     r0,r5,#4
000028  f7fffffe          BL       finsh_token_token
00002c  4604              MOV      r4,r0
00002e  2805              CMP      r0,#5                 ;636
000030  d0eb              BEQ      |L12.10|
000032  2c0a              CMP      r4,#0xa               ;637
000034  d0e9              BEQ      |L12.10|
000036  2c0b              CMP      r4,#0xb               ;638
000038  d0e7              BEQ      |L12.10|
;;;664    	}
;;;665    
;;;666    	finsh_token_replay(&(self->token));
00003a  2001              MOVS     r0,#1
00003c  7168              STRB     r0,[r5,#5]
;;;667    	return cast;
00003e  4630              MOV      r0,r6
;;;668    }
000040  bd70              POP      {r4-r6,pc}
                  |L12.66|
000042  4631              MOV      r1,r6                 ;647
000044  2009              MOVS     r0,#9                 ;647
000046  e004              B        |L12.82|
                  |L12.72|
000048  4631              MOV      r1,r6                 ;651
00004a  200a              MOVS     r0,#0xa               ;651
00004c  e001              B        |L12.82|
                  |L12.78|
00004e  4631              MOV      r1,r6                 ;655
000050  200b              MOVS     r0,#0xb               ;655
                  |L12.82|
000052  f7fffffe          BL       make_sys_node
                  |L12.86|
000056  4606              MOV      r6,r0                 ;634
000058  e7e5              B        |L12.38|
;;;669    
                          ENDP


                          AREA ||i.proc_postfix_expr||, CODE, READONLY, ALIGN=1

                  proc_postfix_expr PROC
;;;757    */
;;;758    static struct finsh_node* proc_postfix_expr(struct finsh_parser* self)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;759    {
000004  4604              MOV      r4,r0
;;;760    	enum finsh_token_type token;
;;;761    	struct finsh_node* postfix;
;;;762    
;;;763    	postfix = proc_primary_expr(self);
000006  f7fffffe          BL       proc_primary_expr
00000a  4680              MOV      r8,r0
;;;764    
;;;765    	next_token(token, &(self->token));
00000c  1d20              ADDS     r0,r4,#4
00000e  f7fffffe          BL       finsh_token_token
000012  2601              MOVS     r6,#1                 ;760
;;;766    	while ( token == finsh_token_type_inc 	||
000014  e040              B        |L13.152|
                  |L13.22|
;;;767    		token == finsh_token_type_dec 		||
;;;768    		token == finsh_token_type_left_paren )
;;;769    	{
;;;770    		switch (token)
000016  2801              CMP      r0,#1
000018  d00c              BEQ      |L13.52|
00001a  2807              CMP      r0,#7
00001c  d002              BEQ      |L13.36|
00001e  2809              CMP      r0,#9
000020  d137              BNE      |L13.146|
000022  e003              B        |L13.44|
                  |L13.36|
;;;771    		{
;;;772    		case finsh_token_type_inc :/* '++' */
;;;773    			postfix = make_sys_node(FINSH_NODE_SYS_INC, postfix, NULL);
000024  2200              MOVS     r2,#0
000026  4641              MOV      r1,r8
000028  2017              MOVS     r0,#0x17
;;;774    			break;
00002a  e02f              B        |L13.140|
                  |L13.44|
;;;775    
;;;776    		case finsh_token_type_dec :/* '--' */
;;;777    			postfix = make_sys_node(FINSH_NODE_SYS_DEC, postfix, NULL);
00002c  2200              MOVS     r2,#0
00002e  4641              MOV      r1,r8
000030  2018              MOVS     r0,#0x18
;;;778    			break;
000032  e02b              B        |L13.140|
                  |L13.52|
;;;779    
;;;780    		case finsh_token_type_left_paren :/* '(' */
;;;781    			{
;;;782    				struct finsh_node* param_list;
;;;783    
;;;784    				param_list = NULL;
000034  2700              MOVS     r7,#0
;;;785    				next_token(token, &(self->token));
000036  1d20              ADDS     r0,r4,#4
000038  f7fffffe          BL       finsh_token_token
;;;786    				if (token != finsh_token_type_right_paren)
00003c  2802              CMP      r0,#2
00003e  d022              BEQ      |L13.134|
;;;787    				{
;;;788    					finsh_token_replay(&(self->token));
000040  7166              STRB     r6,[r4,#5]
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       proc_assign_expr
000048  0005              MOVS     r5,r0
00004a  d001              BEQ      |L13.80|
00004c  4607              MOV      r7,r0
00004e  e00b              B        |L13.104|
                  |L13.80|
000050  2700              MOVS     r7,#0
000052  e00f              B        |L13.116|
                  |L13.84|
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       proc_assign_expr
00005a  60e8              STR      r0,[r5,#0xc]
00005c  b108              CBZ      r0,|L13.98|
00005e  4605              MOV      r5,r0
000060  e002              B        |L13.104|
                  |L13.98|
000062  2005              MOVS     r0,#5
000064  f7fffffe          BL       finsh_error_set
                  |L13.104|
000068  1d20              ADDS     r0,r4,#4
00006a  f7fffffe          BL       finsh_token_token
00006e  2803              CMP      r0,#3
000070  d0f0              BEQ      |L13.84|
000072  7166              STRB     r6,[r4,#5]
                  |L13.116|
;;;789    					param_list = proc_param_list(self);
;;;790    
;;;791    					match_token(token, &(self->token), finsh_token_type_right_paren);
000074  1d20              ADDS     r0,r4,#4
000076  f7fffffe          BL       finsh_token_token
00007a  2802              CMP      r0,#2
00007c  d003              BEQ      |L13.134|
00007e  2001              MOVS     r0,#1
000080  f7fffffe          BL       finsh_error_set
000084  7166              STRB     r6,[r4,#5]
                  |L13.134|
;;;792    				}
;;;793    
;;;794    				postfix = make_sys_node(FINSH_NODE_SYS_FUNC, postfix, param_list);
000086  463a              MOV      r2,r7
000088  4641              MOV      r1,r8
00008a  2012              MOVS     r0,#0x12
                  |L13.140|
00008c  f7fffffe          BL       make_sys_node
000090  4680              MOV      r8,r0
                  |L13.146|
;;;795    			}
;;;796    			break;
;;;797    
;;;798    		default:
;;;799    			break;
;;;800    		}
;;;801    
;;;802    		next_token(token, &(self->token));
000092  1d20              ADDS     r0,r4,#4
000094  f7fffffe          BL       finsh_token_token
                  |L13.152|
000098  2807              CMP      r0,#7                 ;766
00009a  d0bc              BEQ      |L13.22|
00009c  2809              CMP      r0,#9                 ;767
00009e  d0ba              BEQ      |L13.22|
0000a0  2801              CMP      r0,#1                 ;768
0000a2  d0b8              BEQ      |L13.22|
;;;803    	}
;;;804    
;;;805    	finsh_token_replay(&(self->token));
0000a4  7166              STRB     r6,[r4,#5]
;;;806    	return postfix;
0000a6  4640              MOV      r0,r8
;;;807    }
0000a8  e8bd81f0          POP      {r4-r8,pc}
;;;808    
                          ENDP


                          AREA ||i.proc_primary_expr||, CODE, READONLY, ALIGN=1

                  proc_primary_expr PROC
;;;813    */
;;;814    static struct finsh_node* proc_primary_expr(struct finsh_parser* self)
000000  b570              PUSH     {r4-r6,lr}
;;;815    {
000002  4604              MOV      r4,r0
000004  b086              SUB      sp,sp,#0x18
;;;816    	enum finsh_token_type token;
;;;817    	struct finsh_node* expr;
;;;818    
;;;819    	next_token(token, &(self->token));
000006  1d00              ADDS     r0,r0,#4
000008  f7fffffe          BL       finsh_token_token
;;;820    	switch ( token )
;;;821    	{
;;;822    	case finsh_token_type_identifier:
;;;823    		{
;;;824    			char id[FINSH_NAME_MAX + 1];
;;;825    
;;;826    			finsh_token_replay(&(self->token));
00000c  2501              MOVS     r5,#1
00000e  281c              CMP      r0,#0x1c              ;820
000010  d031              BEQ      |L14.118|
000012  dc06              BGT      |L14.34|
000014  2801              CMP      r0,#1                 ;820
000016  d019              BEQ      |L14.76|
000018  281a              CMP      r0,#0x1a              ;820
00001a  d032              BEQ      |L14.130|
00001c  281b              CMP      r0,#0x1b              ;820
00001e  d106              BNE      |L14.46|
000020  e023              B        |L14.106|
                  |L14.34|
000022  281d              CMP      r0,#0x1d              ;820
000024  d033              BEQ      |L14.142|
000026  281e              CMP      r0,#0x1e              ;820
000028  d038              BEQ      |L14.156|
00002a  281f              CMP      r0,#0x1f              ;820
00002c  d005              BEQ      |L14.58|
                  |L14.46|
;;;827    			proc_identifier(self, id);
;;;828    			return finsh_node_new_id(id);
;;;829    		}
;;;830    
;;;831    	case finsh_token_type_left_paren:
;;;832    		expr = proc_expr(self);
;;;833    		match_token(token, &(self->token), finsh_token_type_right_paren);
;;;834    		return expr;
;;;835    
;;;836    	case finsh_token_type_value_int:
;;;837    		return finsh_node_new_int(self->token.value.int_value);
;;;838    
;;;839    	case finsh_token_type_value_long:
;;;840    		return finsh_node_new_long(self->token.value.long_value);
;;;841    
;;;842    	case finsh_token_type_value_char:
;;;843    		return finsh_node_new_char(self->token.value.char_value);
;;;844    
;;;845    	case finsh_token_type_value_string:
;;;846    		return finsh_node_new_string((char*)self->token.string);
;;;847    
;;;848    	case finsh_token_type_value_null:
;;;849    		return finsh_node_new_ptr(NULL);
;;;850    
;;;851    	default:
;;;852    		finsh_error_set(FINSH_ERROR_INVALID_TOKEN);
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       finsh_error_set
;;;853    		break;
;;;854    	}
;;;855    
;;;856    	return NULL;
000034  2000              MOVS     r0,#0
                  |L14.54|
;;;857    }
000036  b006              ADD      sp,sp,#0x18
000038  bd70              POP      {r4-r6,pc}
                  |L14.58|
00003a  7165              STRB     r5,[r4,#5]            ;826
00003c  4669              MOV      r1,sp                 ;827
00003e  4620              MOV      r0,r4                 ;827
000040  f7fffffe          BL       proc_identifier
000044  4668              MOV      r0,sp                 ;828
000046  f7fffffe          BL       finsh_node_new_id
00004a  e7f4              B        |L14.54|
                  |L14.76|
00004c  4620              MOV      r0,r4                 ;832
00004e  f7fffffe          BL       proc_expr
000052  4606              MOV      r6,r0                 ;832
000054  1d20              ADDS     r0,r4,#4              ;833
000056  f7fffffe          BL       finsh_token_token
00005a  2802              CMP      r0,#2                 ;833
00005c  d003              BEQ      |L14.102|
00005e  2001              MOVS     r0,#1                 ;833
000060  f7fffffe          BL       finsh_error_set
000064  7165              STRB     r5,[r4,#5]            ;833
                  |L14.102|
000066  4630              MOV      r0,r6                 ;834
000068  e7e5              B        |L14.54|
                  |L14.106|
00006a  6920              LDR      r0,[r4,#0x10]         ;837
00006c  b006              ADD      sp,sp,#0x18           ;837
00006e  e8bd4070          POP      {r4-r6,lr}            ;837
000072  f7ffbffe          B.W      finsh_node_new_int
                  |L14.118|
000076  6920              LDR      r0,[r4,#0x10]         ;840
000078  b006              ADD      sp,sp,#0x18           ;840
00007a  e8bd4070          POP      {r4-r6,lr}            ;840
00007e  f7ffbffe          B.W      finsh_node_new_long
                  |L14.130|
000082  7c20              LDRB     r0,[r4,#0x10]         ;843
000084  b006              ADD      sp,sp,#0x18           ;843
000086  e8bd4070          POP      {r4-r6,lr}            ;843
00008a  f7ffbffe          B.W      finsh_node_new_char
                  |L14.142|
00008e  b006              ADD      sp,sp,#0x18           ;846
000090  f1040014          ADD      r0,r4,#0x14           ;846
000094  e8bd4070          POP      {r4-r6,lr}            ;846
000098  f7ffbffe          B.W      finsh_node_new_string
                  |L14.156|
00009c  b006              ADD      sp,sp,#0x18           ;849
00009e  2000              MOVS     r0,#0                 ;849
0000a0  e8bd4070          POP      {r4-r6,lr}            ;849
0000a4  f7ffbffe          B.W      finsh_node_new_ptr
;;;858    
                          ENDP


                          AREA ||i.proc_shift_expr||, CODE, READONLY, ALIGN=1

                  proc_shift_expr PROC
;;;546    */
;;;547    static struct finsh_node* proc_shift_expr(struct finsh_parser* self)
000000  b570              PUSH     {r4-r6,lr}
;;;548    {
000002  4605              MOV      r5,r0
;;;549    	enum finsh_token_type token;
;;;550    	struct finsh_node* add;
;;;551    	struct finsh_node* add_new;
;;;552    
;;;553    	add = proc_additive_expr(self);
000004  f7fffffe          BL       proc_additive_expr
;;;554    
;;;555    	next_token(token, &(self->token));
;;;556    	while ( token == finsh_token_type_shl || token == finsh_token_type_shr)
000008  e01e              B        |L15.72|
                  |L15.10|
;;;557    	{
;;;558    		add_new = proc_additive_expr(self);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       proc_additive_expr
000010  0002              MOVS     r2,r0
;;;559    		if (add_new == NULL) finsh_error_set(FINSH_ERROR_EXPECT_OPERATOR);
000012  d003              BEQ      |L15.28|
;;;560    		else
;;;561    		{
;;;562    			switch (token)
000014  2c11              CMP      r4,#0x11
000016  d010              BEQ      |L15.58|
000018  2c12              CMP      r4,#0x12
00001a  d011              BEQ      |L15.64|
                  |L15.28|
;;;563    			{
;;;564    			case finsh_token_type_shl:
;;;565    				add = make_sys_node(FINSH_NODE_SYS_SHL, add, add_new);
;;;566    				break;
;;;567    			case finsh_token_type_shr:
;;;568    				add = make_sys_node(FINSH_NODE_SYS_SHR, add, add_new);
;;;569    				break;
;;;570    			default:
;;;571    				finsh_error_set(FINSH_ERROR_EXPECT_OPERATOR);
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       finsh_error_set
                  |L15.34|
;;;572    				break;
;;;573    			}
;;;574    		}
;;;575    		next_token(token, &(self->token));
000022  1d28              ADDS     r0,r5,#4
000024  f7fffffe          BL       finsh_token_token
000028  4604              MOV      r4,r0
00002a  2811              CMP      r0,#0x11              ;556
00002c  d0ed              BEQ      |L15.10|
00002e  2c12              CMP      r4,#0x12              ;556
000030  d0eb              BEQ      |L15.10|
;;;576    	}
;;;577    
;;;578    	finsh_token_replay(&(self->token));
000032  2001              MOVS     r0,#1
000034  7168              STRB     r0,[r5,#5]
;;;579    	return add;
000036  4630              MOV      r0,r6
;;;580    }
000038  bd70              POP      {r4-r6,pc}
                  |L15.58|
00003a  4631              MOV      r1,r6                 ;565
00003c  2010              MOVS     r0,#0x10              ;565
00003e  e001              B        |L15.68|
                  |L15.64|
000040  4631              MOV      r1,r6                 ;568
000042  2011              MOVS     r0,#0x11              ;568
                  |L15.68|
000044  f7fffffe          BL       make_sys_node
                  |L15.72|
000048  4606              MOV      r6,r0                 ;553
00004a  e7ea              B        |L15.34|
;;;581    
                          ENDP


                          AREA ||i.proc_type||, CODE, READONLY, ALIGN=1

                  proc_type PROC
;;;272    */
;;;273    static enum finsh_type proc_type(struct finsh_parser* self)
000000  b570              PUSH     {r4-r6,lr}
;;;274    {
000002  4605              MOV      r5,r0
;;;275    	enum finsh_type type;
;;;276    	enum finsh_token_type token;
;;;277    
;;;278    	/* set init type */
;;;279    	type = finsh_type_unknown;
000004  2400              MOVS     r4,#0
;;;280    
;;;281    	next_token(token, &(self->token));
000006  1d00              ADDS     r0,r0,#4
000008  f7fffffe          BL       finsh_token_token
;;;282    	if ( is_base_type(token) ) /* base_type */
;;;283    	{
;;;284    		switch (token)
;;;285    		{
;;;286    		case finsh_token_type_void:
;;;287    			type = finsh_type_void;
00000c  2601              MOVS     r6,#1
00000e  2814              CMP      r0,#0x14              ;282
000010  d00a              BEQ      |L16.40|
000012  2815              CMP      r0,#0x15              ;282
000014  d008              BEQ      |L16.40|
000016  2816              CMP      r0,#0x16              ;282
000018  d006              BEQ      |L16.40|
00001a  2817              CMP      r0,#0x17              ;282
00001c  d004              BEQ      |L16.40|
00001e  2818              CMP      r0,#0x18              ;282
000020  d002              BEQ      |L16.40|
;;;288    			break;
;;;289    
;;;290    		case finsh_token_type_char:
;;;291    			type = finsh_type_char;
;;;292    			break;
;;;293    
;;;294    		case finsh_token_type_short:
;;;295    			type = finsh_type_short;
;;;296    			break;
;;;297    
;;;298    		case finsh_token_type_int:
;;;299    			type = finsh_type_int;
;;;300    			break;
;;;301    
;;;302    		case finsh_token_type_long:
;;;303    			type = finsh_type_long;
;;;304    			break;
;;;305    
;;;306    		default:
;;;307    			goto __return;
;;;308    		}
;;;309    	}
;;;310    	else if ( token == finsh_token_type_unsigned ) /* unsigned base_type */
000022  2819              CMP      r0,#0x19
000024  d012              BEQ      |L16.76|
000026  e032              B        |L16.142|
                  |L16.40|
000028  3814              SUBS     r0,r0,#0x14
00002a  2805              CMP      r0,#5                 ;284
00002c  d22f              BCS      |L16.142|
00002e  e8dff000          TBB      [pc,r0]               ;284
000032  0305              DCB      0x03,0x05
000034  07090b00          DCB      0x07,0x09,0x0b,0x00
000038  2401              MOVS     r4,#1                 ;287
00003a  e018              B        |L16.110|
00003c  2403              MOVS     r4,#3                 ;291
00003e  e016              B        |L16.110|
000040  2406              MOVS     r4,#6                 ;295
000042  e014              B        |L16.110|
000044  2409              MOVS     r4,#9                 ;299
000046  e012              B        |L16.110|
000048  240c              MOVS     r4,#0xc               ;303
00004a  e010              B        |L16.110|
                  |L16.76|
;;;311    	{
;;;312    		next_token(token, &(self->token));
00004c  1d28              ADDS     r0,r5,#4
00004e  f7fffffe          BL       finsh_token_token
;;;313    		if ( is_base_type(token) )
000052  2814              CMP      r0,#0x14
000054  d013              BEQ      |L16.126|
000056  2815              CMP      r0,#0x15
000058  d011              BEQ      |L16.126|
00005a  2816              CMP      r0,#0x16
00005c  d00f              BEQ      |L16.126|
00005e  2817              CMP      r0,#0x17
000060  d00d              BEQ      |L16.126|
000062  2818              CMP      r0,#0x18
000064  d00b              BEQ      |L16.126|
;;;314    		{
;;;315    			switch (token)
;;;316    			{
;;;317    			case finsh_token_type_char:
;;;318    				type = finsh_type_uchar;
;;;319    				break;
;;;320    
;;;321    			case finsh_token_type_short:
;;;322    				type = finsh_type_ushort;
;;;323    				break;
;;;324    
;;;325    			case finsh_token_type_int:
;;;326    				type = finsh_type_uint;
;;;327    				break;
;;;328    
;;;329    			case finsh_token_type_long:
;;;330    				type = finsh_type_ulong;
;;;331    				break;
;;;332    
;;;333    			default:
;;;334    				goto __return;
;;;335    			}
;;;336    		}
;;;337    		else
;;;338    		{
;;;339    			finsh_token_replay(&(self->token));
000066  716e              STRB     r6,[r5,#5]
;;;340    			finsh_error_set(FINSH_ERROR_EXPECT_TYPE);
000068  2002              MOVS     r0,#2
00006a  f7fffffe          BL       finsh_error_set
                  |L16.110|
;;;341    		}
;;;342    	}
;;;343    	else
;;;344    	{
;;;345    		goto __return;
;;;346    	}
;;;347    
;;;348    	/* parse for pointer */
;;;349    	next_token(token, &(self->token));
00006e  1d28              ADDS     r0,r5,#4
000070  f7fffffe          BL       finsh_token_token
;;;350    	if (token == finsh_token_type_mul)
000074  2805              CMP      r0,#5
000076  d017              BEQ      |L16.168|
;;;351    	{
;;;352    		switch (type)
;;;353    		{
;;;354    		case finsh_type_void:
;;;355    			type = finsh_type_voidp;
;;;356    			break;
;;;357    
;;;358    		case finsh_type_char:
;;;359    		case finsh_type_uchar:
;;;360    			type = finsh_type_charp;
;;;361    			break;
;;;362    
;;;363    		case finsh_type_short:
;;;364    		case finsh_type_ushort:
;;;365    			type = finsh_type_shortp;
;;;366    			break;
;;;367    
;;;368    		case finsh_type_int:
;;;369    		case finsh_type_uint:
;;;370    			type = finsh_type_intp;
;;;371    			break;
;;;372    
;;;373    		case finsh_type_long:
;;;374    		case finsh_type_ulong:
;;;375    			type = finsh_type_longp;
;;;376    			break;
;;;377    
;;;378    		default:
;;;379    			type = finsh_type_voidp;
;;;380    			break;
;;;381    		}
;;;382    	}
;;;383    	else finsh_token_replay(&(self->token));
000078  716e              STRB     r6,[r5,#5]
                  |L16.122|
;;;384    
;;;385    	return type;
00007a  4620              MOV      r0,r4
;;;386    
;;;387    __return:
;;;388    	finsh_token_replay(&(self->token));
;;;389    	finsh_error_set(FINSH_ERROR_UNKNOWN_TYPE);
;;;390    
;;;391    	return type;
;;;392    }
00007c  bd70              POP      {r4-r6,pc}
                  |L16.126|
00007e  2815              CMP      r0,#0x15              ;315
000080  d00a              BEQ      |L16.152|
000082  2816              CMP      r0,#0x16              ;315
000084  d00a              BEQ      |L16.156|
000086  2817              CMP      r0,#0x17              ;315
000088  d00a              BEQ      |L16.160|
00008a  2818              CMP      r0,#0x18              ;315
00008c  d00a              BEQ      |L16.164|
                  |L16.142|
00008e  716e              STRB     r6,[r5,#5]            ;388
000090  2003              MOVS     r0,#3                 ;389
000092  f7fffffe          BL       finsh_error_set
000096  e7f0              B        |L16.122|
                  |L16.152|
000098  2404              MOVS     r4,#4                 ;318
00009a  e7e8              B        |L16.110|
                  |L16.156|
00009c  2407              MOVS     r4,#7                 ;322
00009e  e7e6              B        |L16.110|
                  |L16.160|
0000a0  240a              MOVS     r4,#0xa               ;326
0000a2  e7e4              B        |L16.110|
                  |L16.164|
0000a4  240d              MOVS     r4,#0xd               ;330
0000a6  e7e2              B        |L16.110|
                  |L16.168|
0000a8  2c0e              CMP      r4,#0xe               ;352
0000aa  d210              BCS      |L16.206|
0000ac  e8dff004          TBB      [pc,r4]               ;352
0000b0  0f0f0f07          DCB      0x0f,0x0f,0x0f,0x07
0000b4  070f0909          DCB      0x07,0x0f,0x09,0x09
0000b8  0f0b0b0f          DCB      0x0f,0x0b,0x0b,0x0f
0000bc  0d0d              DCB      0x0d,0x0d
0000be  2405              MOVS     r4,#5                 ;360
0000c0  e7db              B        |L16.122|
0000c2  2408              MOVS     r4,#8                 ;365
0000c4  e7d9              B        |L16.122|
0000c6  240b              MOVS     r4,#0xb               ;370
0000c8  e7d7              B        |L16.122|
0000ca  240e              MOVS     r4,#0xe               ;375
0000cc  e7d5              B        |L16.122|
                  |L16.206|
0000ce  2402              MOVS     r4,#2                 ;379
0000d0  e7d3              B        |L16.122|
;;;393    
                          ENDP


                          AREA ||i.proc_unary_expr||, CODE, READONLY, ALIGN=1

                  proc_unary_expr PROC
;;;709    */
;;;710    static struct finsh_node* proc_unary_expr(struct finsh_parser* self)
000000  b510              PUSH     {r4,lr}
;;;711    {
000002  4604              MOV      r4,r0
;;;712    	enum finsh_token_type token;
;;;713    	struct finsh_node *cast;
;;;714    
;;;715    	next_token(token, &(self->token));
000004  1d00              ADDS     r0,r0,#4
000006  f7fffffe          BL       finsh_token_token
00000a  1f40              SUBS     r0,r0,#5
;;;716    	switch (token)
00000c  280c              CMP      r0,#0xc
00000e  d23d              BCS      |L17.140|
000010  e8dff000          TBB      [pc,r0]
000014  2b060b12          DCB      0x2b,0x06,0x0b,0x12
000018  1d3c3c3c          DCB      0x1d,0x3c,0x3c,0x3c
00001c  323c3c24          DCB      0x32,0x3c,0x3c,0x24
;;;717    	{
;;;718    	case finsh_token_type_add: /* + */
;;;719    		cast = proc_cast_expr(self);
000020  4620              MOV      r0,r4
000022  e8bd4010          POP      {r4,lr}
000026  f7ffbffe          B.W      proc_cast_expr
;;;720    		return cast;
;;;721    
;;;722    	case finsh_token_type_inc: /* ++ */
;;;723    		cast = proc_cast_expr(self);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       proc_cast_expr
000030  4601              MOV      r1,r0
;;;724    		return make_sys_node(FINSH_NODE_SYS_PREINC, cast, NULL);
000032  2200              MOVS     r2,#0
000034  2015              MOVS     r0,#0x15
000036  e025              B        |L17.132|
;;;725    
;;;726    	case finsh_token_type_sub: /* - */
;;;727    		cast = proc_cast_expr(self);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       proc_cast_expr
00003e  4604              MOV      r4,r0
;;;728    		return make_sys_node(FINSH_NODE_SYS_SUB, finsh_node_new_long(0), cast);
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       finsh_node_new_long
000046  4601              MOV      r1,r0
000048  4622              MOV      r2,r4
00004a  2008              MOVS     r0,#8
00004c  e01a              B        |L17.132|
;;;729    
;;;730    	case finsh_token_type_dec: /* -- */
;;;731    		cast = proc_cast_expr(self);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       proc_cast_expr
000054  4601              MOV      r1,r0
;;;732    		return make_sys_node(FINSH_NODE_SYS_PREDEC, cast, NULL);
000056  2200              MOVS     r2,#0
000058  2016              MOVS     r0,#0x16
00005a  e013              B        |L17.132|
;;;733    
;;;734    	case finsh_token_type_bitwise: /* ~ */
;;;735    		cast = proc_cast_expr(self);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       proc_cast_expr
000062  4601              MOV      r1,r0
;;;736    		return make_sys_node(FINSH_NODE_SYS_BITWISE, cast, NULL);
000064  2200              MOVS     r2,#0
000066  200f              MOVS     r0,#0xf
000068  e00c              B        |L17.132|
;;;737    
;;;738        case finsh_token_type_mul: /* * */
;;;739            cast = proc_cast_expr(self);
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       proc_cast_expr
000070  4601              MOV      r1,r0
;;;740            return make_sys_node(FINSH_NODE_SYS_GETVALUE, cast, NULL);
000072  2200              MOVS     r2,#0
000074  2019              MOVS     r0,#0x19
000076  e005              B        |L17.132|
;;;741    
;;;742        case finsh_token_type_and: /* & */
;;;743            cast = proc_cast_expr(self);
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       proc_cast_expr
00007e  4601              MOV      r1,r0
;;;744            return make_sys_node(FINSH_NODE_SYS_GETADDR, cast, NULL);
000080  2200              MOVS     r2,#0
000082  201a              MOVS     r0,#0x1a
                  |L17.132|
000084  e8bd4010          POP      {r4,lr}
000088  f7ffbffe          B.W      make_sys_node
                  |L17.140|
;;;745    
;;;746    	default:
;;;747    		finsh_token_replay(&(self->token));
00008c  2001              MOVS     r0,#1
00008e  7160              STRB     r0,[r4,#5]
;;;748    		return proc_postfix_expr(self);
000090  4620              MOV      r0,r4
000092  e8bd4010          POP      {r4,lr}
000096  f7ffbffe          B.W      proc_postfix_expr
;;;749    	}
;;;750    }
;;;751    
                          ENDP


                          AREA ||i.proc_variable_decl||, CODE, READONLY, ALIGN=1

                  proc_variable_decl PROC
;;;95     */
;;;96     static struct finsh_node* proc_variable_decl(struct finsh_parser* self)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;97     {
;;;98     	enum finsh_token_type token;
;;;99     	enum finsh_type type;
;;;100    	char id[FINSH_NAME_MAX + 1];
;;;101    
;;;102    	struct finsh_node *node;
;;;103    	struct finsh_node *end;
;;;104    	struct finsh_node *assign;
;;;105    
;;;106        node = NULL;
000004  2500              MOVS     r5,#0
000006  b085              SUB      sp,sp,#0x14           ;97
000008  4604              MOV      r4,r0                 ;97
;;;107    	end  = NULL;
00000a  462e              MOV      r6,r5
;;;108    
;;;109    	/* get type */
;;;110    	type = proc_type(self);
00000c  f7fffffe          BL       proc_type
000010  4681              MOV      r9,r0
;;;111    
;;;112    	/*process id.*/
;;;113    	if (proc_identifier(self, id) == 0)
000012  4669              MOV      r1,sp
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       proc_identifier
00001a  b940              CBNZ     r0,|L18.46|
;;;114    	{
;;;115    		/* if add variable failed */
;;;116    		if (finsh_var_insert(id, type) < 0)
00001c  4649              MOV      r1,r9
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       finsh_var_insert
000024  2800              CMP      r0,#0
000026  da02              BGE      |L18.46|
;;;117    		{
;;;118    			finsh_error_set(FINSH_ERROR_VARIABLE_EXIST);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       finsh_error_set
                  |L18.46|
;;;119    		}
;;;120    	}
;;;121    
;;;122    	next_token(token, &(self->token));
00002e  1d20              ADDS     r0,r4,#4
000030  f7fffffe          BL       finsh_token_token
;;;123    	switch ( token )
;;;124    	{
;;;125    	case finsh_token_type_comma:/*',', it's a variable_list declaration.*/
;;;126    		if (proc_identifier(self, id) == 0)
;;;127    		{
;;;128    			/* if add variable failed */
;;;129    			if (finsh_var_insert(id, type) < 0)
;;;130    			{
;;;131    				finsh_error_set(FINSH_ERROR_VARIABLE_EXIST);
;;;132    			}
;;;133    		}
;;;134    
;;;135    		next_token(token, &(self->token));
;;;136    		if ( token == finsh_token_type_assign )
;;;137    		{
;;;138    			/* get the right side of assign expression */
;;;139    			assign = proc_assign_expr(self);
;;;140    
;;;141    			if (assign != NULL)
;;;142    			{
;;;143    				struct finsh_node* idnode;
;;;144    
;;;145    				idnode = finsh_node_new_id(id);
;;;146    				end = make_sys_node(FINSH_NODE_SYS_ASSIGN, idnode, assign);
;;;147    				node = end;
;;;148    
;;;149    				next_token(token, &(self->token));
;;;150    			}
;;;151    		}
;;;152    
;;;153    		while ( token == finsh_token_type_comma )
;;;154    		{
;;;155    			if (proc_identifier(self, id) == 0)
;;;156    			{
;;;157    				/* if add variable failed */
;;;158    				if (finsh_var_insert(id, type) < 0)
;;;159    				{
;;;160    					finsh_error_set(FINSH_ERROR_VARIABLE_EXIST);
;;;161    				}
;;;162    			}
;;;163    
;;;164    			next_token(token, &(self->token));
;;;165    			if ( token == finsh_token_type_assign )
;;;166    			{
;;;167    				/* get the right side of assign expression */
;;;168    				assign = proc_assign_expr(self);
;;;169    
;;;170    				if (assign != NULL)
;;;171    				{
;;;172    					struct finsh_node* idnode;
;;;173    
;;;174    					idnode = finsh_node_new_id(id);
;;;175    
;;;176    					/* make assign expression node */
;;;177    					if (node != NULL)
;;;178    					{
;;;179    						finsh_node_sibling(end) = make_sys_node(FINSH_NODE_SYS_ASSIGN, idnode, assign);
;;;180    						end = finsh_node_sibling(end);
;;;181    					}
;;;182    					else
;;;183    					{
;;;184    						end = make_sys_node(FINSH_NODE_SYS_ASSIGN, idnode, assign);
;;;185    						node = end;
;;;186    					}
;;;187    
;;;188    					next_token(token, &(self->token));
;;;189    				}
;;;190    			}
;;;191    		}
;;;192    
;;;193    		check_token(token, &(self->token), finsh_token_type_semicolon);
000034  f04f0801          MOV      r8,#1
000038  2803              CMP      r0,#3                 ;123
00003a  d00a              BEQ      |L18.82|
00003c  2804              CMP      r0,#4                 ;123
00003e  d060              BEQ      |L18.258|
000040  280c              CMP      r0,#0xc               ;123
000042  d060              BEQ      |L18.262|
;;;194    		return node;
;;;195    
;;;196    	case finsh_token_type_assign:/*'=', it's a variable with assign declaration.*/
;;;197    	{
;;;198    		struct finsh_node *idnode;
;;;199    
;;;200    		assign = proc_assign_expr(self);
;;;201    		if (assign != NULL)
;;;202    		{
;;;203    			idnode = finsh_node_new_id(id);
;;;204    
;;;205    			/* make assign expression node */
;;;206    			end = make_sys_node(FINSH_NODE_SYS_ASSIGN, idnode, assign);
;;;207    			node = end;
;;;208    
;;;209    			next_token(token, &(self->token));
;;;210    		}
;;;211    
;;;212    		while ( token == finsh_token_type_comma )
;;;213    		{
;;;214    			if (proc_identifier(self, id) == 0)
;;;215    			{
;;;216    				/* if add variable failed */
;;;217    				if (finsh_var_insert(id, type) < 0)
;;;218    				{
;;;219    					finsh_error_set(FINSH_ERROR_VARIABLE_EXIST);
;;;220    				}
;;;221    			}
;;;222    
;;;223    			next_token(token, &(self->token));
;;;224    			if (token == finsh_token_type_assign)
;;;225    			{
;;;226    				/* get the right side of assign expression */
;;;227    				assign = proc_assign_expr(self);
;;;228    
;;;229    				if (assign != NULL)
;;;230    				{
;;;231    					idnode = finsh_node_new_id(id);
;;;232    
;;;233    					/* make assign expression node */
;;;234    					if (node != NULL)
;;;235    					{
;;;236    						finsh_node_sibling(end) = make_sys_node(FINSH_NODE_SYS_ASSIGN, idnode, assign);
;;;237    						end = finsh_node_sibling(end);
;;;238    					}
;;;239    					else
;;;240    					{
;;;241    						end = make_sys_node(FINSH_NODE_SYS_ASSIGN, idnode, assign);
;;;242    						node = end;
;;;243    					}
;;;244    
;;;245    					next_token(token, &(self->token));
;;;246    				}
;;;247    			}
;;;248    		}
;;;249    
;;;250    		check_token(token, &(self->token), finsh_token_type_semicolon);
;;;251    		return node;
;;;252    	}
;;;253    
;;;254    	case finsh_token_type_semicolon:/*';', it's a variable declaration.*/
;;;255    		return node;
;;;256    
;;;257    	default:
;;;258    		finsh_error_set(FINSH_ERROR_EXPECT_TYPE);
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       finsh_error_set
;;;259    
;;;260    		return NULL;
00004a  2000              MOVS     r0,#0
                  |L18.76|
;;;261    	}
;;;262    }
00004c  b005              ADD      sp,sp,#0x14
00004e  e8bd83f0          POP      {r4-r9,pc}
                  |L18.82|
000052  4669              MOV      r1,sp                 ;126
000054  4620              MOV      r0,r4                 ;126
000056  f7fffffe          BL       proc_identifier
00005a  b940              CBNZ     r0,|L18.110|
00005c  4649              MOV      r1,r9                 ;129
00005e  4668              MOV      r0,sp                 ;129
000060  f7fffffe          BL       finsh_var_insert
000064  2800              CMP      r0,#0                 ;129
000066  da02              BGE      |L18.110|
000068  2004              MOVS     r0,#4                 ;131
00006a  f7fffffe          BL       finsh_error_set
                  |L18.110|
00006e  1d20              ADDS     r0,r4,#4              ;135
000070  f7fffffe          BL       finsh_token_token
000074  280c              CMP      r0,#0xc               ;136
000076  d13b              BNE      |L18.240|
000078  4620              MOV      r0,r4                 ;139
00007a  f7fffffe          BL       proc_assign_expr
00007e  0006              MOVS     r6,r0                 ;139
000080  d03a              BEQ      |L18.248|
000082  4668              MOV      r0,sp                 ;145
000084  f7fffffe          BL       finsh_node_new_id
000088  4601              MOV      r1,r0                 ;145
00008a  4632              MOV      r2,r6                 ;146
00008c  2013              MOVS     r0,#0x13              ;146
00008e  f7fffffe          BL       make_sys_node
000092  4606              MOV      r6,r0                 ;146
000094  4605              MOV      r5,r0                 ;147
000096  e028              B        |L18.234|
                  |L18.152|
000098  4669              MOV      r1,sp                 ;155
00009a  4620              MOV      r0,r4                 ;155
00009c  f7fffffe          BL       proc_identifier
0000a0  b940              CBNZ     r0,|L18.180|
0000a2  4649              MOV      r1,r9                 ;158
0000a4  4668              MOV      r0,sp                 ;158
0000a6  f7fffffe          BL       finsh_var_insert
0000aa  2800              CMP      r0,#0                 ;158
0000ac  da02              BGE      |L18.180|
0000ae  2004              MOVS     r0,#4                 ;160
0000b0  f7fffffe          BL       finsh_error_set
                  |L18.180|
0000b4  1d20              ADDS     r0,r4,#4              ;164
0000b6  f7fffffe          BL       finsh_token_token
0000ba  280c              CMP      r0,#0xc               ;165
0000bc  d118              BNE      |L18.240|
0000be  4620              MOV      r0,r4                 ;168
0000c0  f7fffffe          BL       proc_assign_expr
0000c4  0007              MOVS     r7,r0                 ;168
0000c6  d017              BEQ      |L18.248|
0000c8  4668              MOV      r0,sp                 ;174
0000ca  f7fffffe          BL       finsh_node_new_id
0000ce  4601              MOV      r1,r0                 ;174
0000d0  463a              MOV      r2,r7                 ;184
0000d2  f04f0013          MOV      r0,#0x13              ;184
0000d6  b125              CBZ      r5,|L18.226|
0000d8  f7fffffe          BL       make_sys_node
0000dc  60f0              STR      r0,[r6,#0xc]          ;180
0000de  4606              MOV      r6,r0                 ;180
0000e0  e003              B        |L18.234|
                  |L18.226|
0000e2  f7fffffe          BL       make_sys_node
0000e6  4606              MOV      r6,r0                 ;184
0000e8  4635              MOV      r5,r6                 ;185
                  |L18.234|
0000ea  1d20              ADDS     r0,r4,#4              ;188
0000ec  f7fffffe          BL       finsh_token_token
                  |L18.240|
0000f0  2803              CMP      r0,#3                 ;153
0000f2  d0d1              BEQ      |L18.152|
                  |L18.244|
0000f4  2804              CMP      r0,#4                 ;193
0000f6  d004              BEQ      |L18.258|
                  |L18.248|
0000f8  2001              MOVS     r0,#1                 ;193
0000fa  f7fffffe          BL       finsh_error_set
0000fe  f8848005          STRB     r8,[r4,#5]            ;193
                  |L18.258|
000102  4628              MOV      r0,r5                 ;255
000104  e7a2              B        |L18.76|
                  |L18.262|
000106  4620              MOV      r0,r4                 ;200
000108  f7fffffe          BL       proc_assign_expr
00010c  0006              MOVS     r6,r0                 ;200
00010e  d0f3              BEQ      |L18.248|
000110  4668              MOV      r0,sp                 ;203
000112  f7fffffe          BL       finsh_node_new_id
000116  4601              MOV      r1,r0                 ;203
000118  4632              MOV      r2,r6                 ;206
00011a  2013              MOVS     r0,#0x13              ;206
00011c  f7fffffe          BL       make_sys_node
000120  4606              MOV      r6,r0                 ;206
000122  4605              MOV      r5,r0                 ;207
000124  e028              B        |L18.376|
                  |L18.294|
000126  4669              MOV      r1,sp                 ;214
000128  4620              MOV      r0,r4                 ;214
00012a  f7fffffe          BL       proc_identifier
00012e  b940              CBNZ     r0,|L18.322|
000130  4649              MOV      r1,r9                 ;217
000132  4668              MOV      r0,sp                 ;217
000134  f7fffffe          BL       finsh_var_insert
000138  2800              CMP      r0,#0                 ;217
00013a  da02              BGE      |L18.322|
00013c  2004              MOVS     r0,#4                 ;219
00013e  f7fffffe          BL       finsh_error_set
                  |L18.322|
000142  1d20              ADDS     r0,r4,#4              ;223
000144  f7fffffe          BL       finsh_token_token
000148  280c              CMP      r0,#0xc               ;224
00014a  d118              BNE      |L18.382|
00014c  4620              MOV      r0,r4                 ;227
00014e  f7fffffe          BL       proc_assign_expr
000152  0007              MOVS     r7,r0                 ;227
000154  d0d0              BEQ      |L18.248|
000156  4668              MOV      r0,sp                 ;231
000158  f7fffffe          BL       finsh_node_new_id
00015c  4601              MOV      r1,r0                 ;231
00015e  463a              MOV      r2,r7                 ;241
000160  f04f0013          MOV      r0,#0x13              ;241
000164  b125              CBZ      r5,|L18.368|
000166  f7fffffe          BL       make_sys_node
00016a  60f0              STR      r0,[r6,#0xc]          ;237
00016c  4606              MOV      r6,r0                 ;237
00016e  e003              B        |L18.376|
                  |L18.368|
000170  f7fffffe          BL       make_sys_node
000174  4606              MOV      r6,r0                 ;241
000176  4635              MOV      r5,r6                 ;242
                  |L18.376|
000178  1d20              ADDS     r0,r4,#4              ;245
00017a  f7fffffe          BL       finsh_token_token
                  |L18.382|
00017e  2803              CMP      r0,#3                 ;212
000180  d0d1              BEQ      |L18.294|
000182  e7b7              B        |L18.244|
;;;263    
                          ENDP

