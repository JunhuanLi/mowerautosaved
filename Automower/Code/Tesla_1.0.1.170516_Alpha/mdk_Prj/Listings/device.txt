; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\device.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\device.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\device.crf ..\OS\src\device.c]
                          THUMB

                          AREA ||i.rt_device_close||, CODE, READONLY, ALIGN=2

                  rt_device_close PROC
;;;236     */
;;;237    rt_err_t rt_device_close(rt_device_t dev)
000000  b5f8              PUSH     {r3-r7,lr}
;;;238    {
;;;239        rt_err_t result = RT_EOK;
000002  f04f0500          MOV      r5,#0
000006  0004              MOVS     r4,r0                 ;238
000008  462e              MOV      r6,r5
00000a  d10b              BNE      |L1.36|
;;;240    
;;;241        RT_ASSERT(dev != RT_NULL);
00000c  f88d6000          STRB     r6,[sp,#0]
000010  23f1              MOVS     r3,#0xf1
000012  4a10              LDR      r2,|L1.84|
000014  a110              ADR      r1,|L1.88|
000016  a014              ADR      r0,|L1.104|
000018  f7fffffe          BL       rt_kprintf
                  |L1.28|
00001c  f89d0000          LDRB     r0,[sp,#0]
000020  2800              CMP      r0,#0
000022  d0fb              BEQ      |L1.28|
                  |L1.36|
;;;242    
;;;243        if (dev->ref_count == 0)
000024  7ea0              LDRB     r0,[r4,#0x1a]
000026  b130              CBZ      r0,|L1.54|
000028  1e40              SUBS     r0,r0,#1
;;;244            return -RT_ERROR;
;;;245    
;;;246        dev->ref_count--;
00002a  f01000ff          ANDS     r0,r0,#0xff
00002e  76a0              STRB     r0,[r4,#0x1a]
;;;247    
;;;248        if (dev->ref_count != 0)
000030  d004              BEQ      |L1.60|
;;;249            return RT_EOK;
000032  2000              MOVS     r0,#0
;;;250    
;;;251        /* call device close interface */
;;;252        if (dev->close != RT_NULL)
;;;253        {
;;;254            result = dev->close(dev);
;;;255        }
;;;256    
;;;257        /* set open flag */
;;;258        if (result == RT_EOK || result == -RT_ENOSYS)
;;;259            dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
;;;260    
;;;261        return result;
;;;262    }
000034  bdf8              POP      {r3-r7,pc}
                  |L1.54|
000036  f04f30ff          MOV      r0,#0xffffffff        ;244
00003a  bdf8              POP      {r3-r7,pc}
                  |L1.60|
00003c  6ae1              LDR      r1,[r4,#0x2c]         ;252
00003e  b111              CBZ      r1,|L1.70|
000040  4620              MOV      r0,r4                 ;254
000042  4788              BLX      r1                    ;254
000044  4605              MOV      r5,r0                 ;254
                  |L1.70|
000046  b10d              CBZ      r5,|L1.76|
000048  1da8              ADDS     r0,r5,#6              ;258
00004a  d100              BNE      |L1.78|
                  |L1.76|
00004c  8326              STRH     r6,[r4,#0x18]         ;259
                  |L1.78|
00004e  4628              MOV      r0,r5                 ;261
000050  bdf8              POP      {r3-r7,pc}
;;;263    RTM_EXPORT(rt_device_close);
                          ENDP

000052  0000              DCW      0x0000
                  |L1.84|
                          DCD      ||.constdata||+0x33
                  |L1.88|
000058  64657620          DCB      "dev != RT_NULL",0
00005c  213d2052
000060  545f4e55
000064  4c4c00  
000067  00                DCB      0
                  |L1.104|
000068  28257329          DCB      "(%s) assert failed at %s:%d \n",0
00006c  20617373
000070  65727420
000074  6661696c
000078  65642061
00007c  74202573
000080  3a256420
000084  0a00    
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.rt_device_control||, CODE, READONLY, ALIGN=2

                  rt_device_control PROC
;;;349     */
;;;350    rt_err_t rt_device_control(rt_device_t dev, rt_uint8_t cmd, void *arg)
000000  b5f8              PUSH     {r3-r7,lr}
;;;351    {
000002  4615              MOV      r5,r2
000004  460e              MOV      r6,r1
000006  0004              MOVS     r4,r0
000008  d10c              BNE      |L2.36|
;;;352        RT_ASSERT(dev != RT_NULL);
00000a  f88d0000          STRB     r0,[sp,#0]
00000e  f44f73b0          MOV      r3,#0x160
000012  4a0a              LDR      r2,|L2.60|
000014  a10a              ADR      r1,|L2.64|
000016  a00e              ADR      r0,|L2.80|
000018  f7fffffe          BL       rt_kprintf
                  |L2.28|
00001c  f89d3000          LDRB     r3,[sp,#0]
000020  2b00              CMP      r3,#0
000022  d0fb              BEQ      |L2.28|
                  |L2.36|
;;;353    
;;;354        /* call device write interface */
;;;355        if (dev->control != RT_NULL)
000024  6ba3              LDR      r3,[r4,#0x38]
000026  b133              CBZ      r3,|L2.54|
;;;356        {
;;;357            return dev->control(dev, cmd, arg);
000028  b001              ADD      sp,sp,#4
00002a  462a              MOV      r2,r5
00002c  4631              MOV      r1,r6
00002e  4620              MOV      r0,r4
000030  e8bd40f0          POP      {r4-r7,lr}
000034  4718              BX       r3
                  |L2.54|
;;;358        }
;;;359    
;;;360        return RT_EOK;
000036  2000              MOVS     r0,#0
;;;361    }
000038  bdf8              POP      {r3-r7,pc}
;;;362    RTM_EXPORT(rt_device_control);
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      ||.constdata||+0x62
                  |L2.64|
000040  64657620          DCB      "dev != RT_NULL",0
000044  213d2052
000048  545f4e55
00004c  4c4c00  
00004f  00                DCB      0
                  |L2.80|
000050  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000054  20617373
000058  65727420
00005c  6661696c
000060  65642061
000064  74202573
000068  3a256420
00006c  0a00    
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i.rt_device_find||, CODE, READONLY, ALIGN=2

                  rt_device_find PROC
;;;97      */
;;;98     rt_device_t rt_device_find(const char *name)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;99     {
000004  4607              MOV      r7,r0
;;;100        struct rt_object *object;
;;;101        struct rt_list_node *node;
;;;102        struct rt_object_information *information;
;;;103    
;;;104        extern struct rt_object_information rt_object_container[];
;;;105    
;;;106        /* enter critical */
;;;107        if (rt_thread_self() != RT_NULL)
000006  f7fffffe          BL       rt_thread_self
00000a  b108              CBZ      r0,|L3.16|
;;;108            rt_enter_critical();
00000c  f7fffffe          BL       rt_enter_critical
                  |L3.16|
;;;109    
;;;110        /* try to find device object */
;;;111        information = &rt_object_container[RT_Object_Class_Device];
000010  4e0e              LDR      r6,|L3.76|
;;;112        for (node  = information->object_list.next;
000012  f8564f74          LDR      r4,[r6,#0x74]!
000016  e008              B        |L3.42|
                  |L3.24|
;;;113             node != &(information->object_list);
;;;114             node  = node->next)
;;;115        {
;;;116            object = rt_list_entry(node, struct rt_object, list);
000018  f1a4050c          SUB      r5,r4,#0xc
;;;117            if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
00001c  2208              MOVS     r2,#8
00001e  4639              MOV      r1,r7
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       rt_strncmp
000026  b150              CBZ      r0,|L3.62|
000028  6824              LDR      r4,[r4,#0]            ;114
                  |L3.42|
00002a  42b4              CMP      r4,r6                 ;113
00002c  d1f4              BNE      |L3.24|
;;;118            {
;;;119                /* leave critical */
;;;120                if (rt_thread_self() != RT_NULL)
;;;121                    rt_exit_critical();
;;;122    
;;;123                return (rt_device_t)object;
;;;124            }
;;;125        }
;;;126    
;;;127        /* leave critical */
;;;128        if (rt_thread_self() != RT_NULL)
00002e  f7fffffe          BL       rt_thread_self
000032  b108              CBZ      r0,|L3.56|
;;;129            rt_exit_critical();
000034  f7fffffe          BL       rt_exit_critical
                  |L3.56|
;;;130    
;;;131        /* not found */
;;;132        return RT_NULL;
000038  2000              MOVS     r0,#0
                  |L3.58|
;;;133    }
00003a  e8bd81f0          POP      {r4-r8,pc}
                  |L3.62|
00003e  f7fffffe          BL       rt_thread_self
000042  b108              CBZ      r0,|L3.72|
000044  f7fffffe          BL       rt_exit_critical
                  |L3.72|
000048  4628              MOV      r0,r5                 ;123
00004a  e7f6              B        |L3.58|
;;;134    RTM_EXPORT(rt_device_find);
                          ENDP

                  |L3.76|
                          DCD      rt_object_container

                          AREA ||i.rt_device_init||, CODE, READONLY, ALIGN=2

                  rt_device_init PROC
;;;142     */
;;;143    rt_err_t rt_device_init(rt_device_t dev)
000000  b538              PUSH     {r3-r5,lr}
;;;144    {
000002  0004              MOVS     r4,r0
;;;145        rt_err_t result = RT_EOK;
000004  f04f0500          MOV      r5,#0
000008  d10b              BNE      |L4.34|
;;;146    
;;;147        RT_ASSERT(dev != RT_NULL);
00000a  f88d0000          STRB     r0,[sp,#0]
00000e  2393              MOVS     r3,#0x93
000010  4a0e              LDR      r2,|L4.76|
000012  a10f              ADR      r1,|L4.80|
000014  a012              ADR      r0,|L4.96|
000016  f7fffffe          BL       rt_kprintf
                  |L4.26|
00001a  f89d0000          LDRB     r0,[sp,#0]
00001e  2800              CMP      r0,#0
000020  d0fb              BEQ      |L4.26|
                  |L4.34|
;;;148    
;;;149        /* get device init handler */
;;;150        if (dev->init != RT_NULL)
000022  6a61              LDR      r1,[r4,#0x24]
000024  b181              CBZ      r1,|L4.72|
;;;151        {
;;;152            if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
000026  7da0              LDRB     r0,[r4,#0x16]
000028  06c0              LSLS     r0,r0,#27
00002a  d40d              BMI      |L4.72|
;;;153            {
;;;154                result = dev->init(dev);
00002c  4620              MOV      r0,r4
00002e  4788              BLX      r1
000030  0005              MOVS     r5,r0
;;;155                if (result != RT_EOK)
000032  d005              BEQ      |L4.64|
;;;156                {
;;;157                    rt_kprintf("To initialize device:%s failed. The error code is %d\n",
000034  4602              MOV      r2,r0
000036  4621              MOV      r1,r4
000038  a011              ADR      r0,|L4.128|
00003a  f7fffffe          BL       rt_kprintf
00003e  e003              B        |L4.72|
                  |L4.64|
;;;158                               dev->parent.name, result);
;;;159                }
;;;160                else
;;;161                {
;;;162                    dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
000040  8ae0              LDRH     r0,[r4,#0x16]
000042  f0400010          ORR      r0,r0,#0x10
000046  82e0              STRH     r0,[r4,#0x16]
                  |L4.72|
;;;163                }
;;;164            }
;;;165        }
;;;166    
;;;167        return result;
000048  4628              MOV      r0,r5
;;;168    }
00004a  bd38              POP      {r3-r5,pc}
;;;169    
                          ENDP

                  |L4.76|
                          DCD      ||.constdata||+0x15
                  |L4.80|
000050  64657620          DCB      "dev != RT_NULL",0
000054  213d2052
000058  545f4e55
00005c  4c4c00  
00005f  00                DCB      0
                  |L4.96|
000060  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000064  20617373
000068  65727420
00006c  6661696c
000070  65642061
000074  74202573
000078  3a256420
00007c  0a00    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L4.128|
000080  546f2069          DCB      "To initialize device:%s failed. The error code is %d\n",0
000084  6e697469
000088  616c697a
00008c  65206465
000090  76696365
000094  3a257320
000098  6661696c
00009c  65642e20
0000a0  54686520
0000a4  6572726f
0000a8  7220636f
0000ac  64652069
0000b0  73202564
0000b4  0a00    
0000b6  00                DCB      0
0000b7  00                DCB      0

                          AREA ||i.rt_device_init_all||, CODE, READONLY, ALIGN=1

                  rt_device_init_all PROC
;;;85      */
;;;86     rt_err_t rt_device_init_all(void)
000000  2000              MOVS     r0,#0
;;;87     {
;;;88         return RT_EOK;
;;;89     }
000002  4770              BX       lr
;;;90     
                          ENDP


                          AREA ||i.rt_device_open||, CODE, READONLY, ALIGN=2

                  rt_device_open PROC
;;;177     */
;;;178    rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
000000  b5f8              PUSH     {r3-r7,lr}
;;;179    {
;;;180        rt_err_t result = RT_EOK;
000002  f04f0500          MOV      r5,#0
000006  460f              MOV      r7,r1                 ;179
000008  0004              MOVS     r4,r0                 ;179
00000a  462e              MOV      r6,r5
00000c  d10b              BNE      |L6.38|
;;;181    
;;;182        RT_ASSERT(dev != RT_NULL);
00000e  f88d6000          STRB     r6,[sp,#0]
000012  23b6              MOVS     r3,#0xb6
000014  4a22              LDR      r2,|L6.160|
000016  a123              ADR      r1,|L6.164|
000018  a026              ADR      r0,|L6.180|
00001a  f7fffffe          BL       rt_kprintf
                  |L6.30|
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  2800              CMP      r0,#0
000024  d0fb              BEQ      |L6.30|
                  |L6.38|
;;;183    
;;;184        /* if device is not initialized, initialize it. */
;;;185        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
000026  7da0              LDRB     r0,[r4,#0x16]
000028  06c0              LSLS     r0,r0,#27
00002a  d40f              BMI      |L6.76|
;;;186        {
;;;187            if (dev->init != RT_NULL)
00002c  6a61              LDR      r1,[r4,#0x24]
00002e  b149              CBZ      r1,|L6.68|
;;;188            {
;;;189                result = dev->init(dev);
000030  4620              MOV      r0,r4
000032  4788              BLX      r1
000034  0005              MOVS     r5,r0
;;;190                if (result != RT_EOK)
000036  d005              BEQ      |L6.68|
;;;191                {
;;;192                    rt_kprintf("To initialize device:%s failed. The error code is %d\n",
000038  4602              MOV      r2,r0
00003a  4621              MOV      r1,r4
00003c  a025              ADR      r0,|L6.212|
00003e  f7fffffe          BL       rt_kprintf
;;;193                               dev->parent.name, result);
;;;194    
;;;195                    return result;
000042  e02a              B        |L6.154|
                  |L6.68|
;;;196                }
;;;197            }
;;;198    
;;;199            dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
000044  8ae0              LDRH     r0,[r4,#0x16]
000046  f0400010          ORR      r0,r0,#0x10
00004a  82e0              STRH     r0,[r4,#0x16]
                  |L6.76|
;;;200        }
;;;201    
;;;202        /* device is a stand alone device and opened */
;;;203        if ((dev->flag & RT_DEVICE_FLAG_STANDALONE) &&
00004c  7da0              LDRB     r0,[r4,#0x16]
00004e  0700              LSLS     r0,r0,#28
000050  d505              BPL      |L6.94|
;;;204            (dev->open_flag & RT_DEVICE_OFLAG_OPEN))
000052  7e20              LDRB     r0,[r4,#0x18]
000054  0700              LSLS     r0,r0,#28
000056  d502              BPL      |L6.94|
;;;205        {
;;;206            return -RT_EBUSY;
000058  f06f0006          MVN      r0,#6
;;;207        }
;;;208    
;;;209        /* call device open interface */
;;;210        if (dev->open != RT_NULL)
;;;211        {
;;;212            result = dev->open(dev, oflag);
;;;213        }
;;;214    
;;;215        /* set open flag */
;;;216        if (result == RT_EOK || result == -RT_ENOSYS)
;;;217        {
;;;218            dev->open_flag = oflag | RT_DEVICE_OFLAG_OPEN;
;;;219    
;;;220            dev->ref_count++;
;;;221            /* don't let bad things happen silently. If you are bitten by this assert,
;;;222             * please set the ref_count to a bigger type. */
;;;223            RT_ASSERT(dev->ref_count != 0);
;;;224        }
;;;225    
;;;226        return result;
;;;227    }
00005c  bdf8              POP      {r3-r7,pc}
                  |L6.94|
00005e  6aa2              LDR      r2,[r4,#0x28]         ;210
000060  b11a              CBZ      r2,|L6.106|
000062  4639              MOV      r1,r7                 ;212
000064  4620              MOV      r0,r4                 ;212
000066  4790              BLX      r2                    ;212
000068  4605              MOV      r5,r0                 ;212
                  |L6.106|
00006a  b10d              CBZ      r5,|L6.112|
00006c  1da8              ADDS     r0,r5,#6              ;216
00006e  d114              BNE      |L6.154|
                  |L6.112|
000070  f0470008          ORR      r0,r7,#8              ;218
000074  8320              STRH     r0,[r4,#0x18]         ;218
000076  7ea0              LDRB     r0,[r4,#0x1a]         ;220
000078  1c40              ADDS     r0,r0,#1              ;220
00007a  f01000ff          ANDS     r0,r0,#0xff           ;220
00007e  76a0              STRB     r0,[r4,#0x1a]         ;220
000080  d10b              BNE      |L6.154|
000082  f88d6000          STRB     r6,[sp,#0]            ;223
000086  23df              MOVS     r3,#0xdf              ;223
000088  4a05              LDR      r2,|L6.160|
00008a  a120              ADR      r1,|L6.268|
00008c  a009              ADR      r0,|L6.180|
00008e  f7fffffe          BL       rt_kprintf
                  |L6.146|
000092  f89d0000          LDRB     r0,[sp,#0]            ;223
000096  2800              CMP      r0,#0                 ;223
000098  d0fb              BEQ      |L6.146|
                  |L6.154|
00009a  4628              MOV      r0,r5                 ;226
00009c  bdf8              POP      {r3-r7,pc}
;;;228    RTM_EXPORT(rt_device_open);
                          ENDP

00009e  0000              DCW      0x0000
                  |L6.160|
                          DCD      ||.constdata||+0x24
                  |L6.164|
0000a4  64657620          DCB      "dev != RT_NULL",0
0000a8  213d2052
0000ac  545f4e55
0000b0  4c4c00  
0000b3  00                DCB      0
                  |L6.180|
0000b4  28257329          DCB      "(%s) assert failed at %s:%d \n",0
0000b8  20617373
0000bc  65727420
0000c0  6661696c
0000c4  65642061
0000c8  74202573
0000cc  3a256420
0000d0  0a00    
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L6.212|
0000d4  546f2069          DCB      "To initialize device:%s failed. The error code is %d\n",0
0000d8  6e697469
0000dc  616c697a
0000e0  65206465
0000e4  76696365
0000e8  3a257320
0000ec  6661696c
0000f0  65642e20
0000f4  54686520
0000f8  6572726f
0000fc  7220636f
000100  64652069
000104  73202564
000108  0a00    
00010a  00                DCB      0
00010b  00                DCB      0
                  |L6.268|
00010c  6465762d          DCB      "dev->ref_count != 0",0
000110  3e726566
000114  5f636f75
000118  6e742021
00011c  3d203000

                          AREA ||i.rt_device_read||, CODE, READONLY, ALIGN=2

                  rt_device_read PROC
;;;276     */
;;;277    rt_size_t rt_device_read(rt_device_t dev,
000000  b5f8              PUSH     {r3-r7,lr}
;;;278                             rt_off_t    pos,
;;;279                             void       *buffer,
;;;280                             rt_size_t   size)
;;;281    {
000002  461d              MOV      r5,r3
000004  4616              MOV      r6,r2
000006  460f              MOV      r7,r1
000008  0004              MOVS     r4,r0
00000a  d10c              BNE      |L7.38|
;;;282        RT_ASSERT(dev != RT_NULL);
00000c  f88d0000          STRB     r0,[sp,#0]
000010  f44f738d          MOV      r3,#0x11a
000014  4a10              LDR      r2,|L7.88|
000016  a111              ADR      r1,|L7.92|
000018  a014              ADR      r0,|L7.108|
00001a  f7fffffe          BL       rt_kprintf
                  |L7.30|
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  2800              CMP      r0,#0
000024  d0fb              BEQ      |L7.30|
                  |L7.38|
;;;283    
;;;284        if (dev->ref_count == 0)
000026  7ea0              LDRB     r0,[r4,#0x1a]
000028  b160              CBZ      r0,|L7.68|
;;;285        {
;;;286            rt_set_errno(-RT_ERROR);
;;;287            return 0;
;;;288        }
;;;289    
;;;290        /* call device read interface */
;;;291        if (dev->read != RT_NULL)
00002a  f8d4c030          LDR      r12,[r4,#0x30]
00002e  f1bc0f00          CMP      r12,#0
000032  d00a              BEQ      |L7.74|
;;;292        {
;;;293            return dev->read(dev, pos, buffer, size);
000034  b001              ADD      sp,sp,#4
000036  462b              MOV      r3,r5
000038  4632              MOV      r2,r6
00003a  4639              MOV      r1,r7
00003c  4620              MOV      r0,r4
00003e  e8bd40f0          POP      {r4-r7,lr}
000042  4760              BX       r12
                  |L7.68|
000044  f04f30ff          MOV      r0,#0xffffffff        ;286
000048  e001              B        |L7.78|
                  |L7.74|
;;;294        }
;;;295    
;;;296        /* set error code */
;;;297        rt_set_errno(-RT_ENOSYS);
00004a  f06f0005          MVN      r0,#5
                  |L7.78|
00004e  f7fffffe          BL       rt_set_errno
;;;298    
;;;299        return 0;
000052  2000              MOVS     r0,#0
;;;300    }
000054  bdf8              POP      {r3-r7,pc}
;;;301    RTM_EXPORT(rt_device_read);
                          ENDP

000056  0000              DCW      0x0000
                  |L7.88|
                          DCD      ||.constdata||+0x43
                  |L7.92|
00005c  64657620          DCB      "dev != RT_NULL",0
000060  213d2052
000064  545f4e55
000068  4c4c00  
00006b  00                DCB      0
                  |L7.108|
00006c  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000070  20617373
000074  65727420
000078  6661696c
00007c  65642061
000080  74202573
000084  3a256420
000088  0a00    
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.rt_device_register||, CODE, READONLY, ALIGN=1

                  rt_device_register PROC
;;;42      */
;;;43     rt_err_t rt_device_register(rt_device_t dev,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;44                                 const char *name,
;;;45                                 rt_uint16_t flags)
;;;46     {
000004  4616              MOV      r6,r2
000006  0004              MOVS     r4,r0
000008  460f              MOV      r7,r1
;;;47         if (dev == RT_NULL)
;;;48             return -RT_ERROR;
00000a  f04f35ff          MOV      r5,#0xffffffff
00000e  d003              BEQ      |L8.24|
;;;49     
;;;50         if (rt_device_find(name) != RT_NULL)
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       rt_device_find
000016  b110              CBZ      r0,|L8.30|
                  |L8.24|
;;;51             return -RT_ERROR;
000018  4628              MOV      r0,r5
                  |L8.26|
;;;52     
;;;53         rt_object_init(&(dev->parent), RT_Object_Class_Device, name);
;;;54         dev->flag = flags;
;;;55         dev->ref_count = 0;
;;;56     
;;;57         return RT_EOK;
;;;58     }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L8.30|
00001e  463a              MOV      r2,r7                 ;53
000020  2107              MOVS     r1,#7                 ;53
000022  4620              MOV      r0,r4                 ;53
000024  f7fffffe          BL       rt_object_init
000028  82e6              STRH     r6,[r4,#0x16]         ;54
00002a  2000              MOVS     r0,#0                 ;55
00002c  76a0              STRB     r0,[r4,#0x1a]         ;55
00002e  e7f4              B        |L8.26|
;;;59     RTM_EXPORT(rt_device_register);
                          ENDP


                          AREA ||i.rt_device_set_rx_indicate||, CODE, READONLY, ALIGN=2

                  rt_device_set_rx_indicate PROC
;;;373    rt_err_t
;;;374    rt_device_set_rx_indicate(rt_device_t dev,
000000  b538              PUSH     {r3-r5,lr}
;;;375                              rt_err_t (*rx_ind)(rt_device_t dev, rt_size_t size))
;;;376    {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d10c              BNE      |L9.34|
;;;377        RT_ASSERT(dev != RT_NULL);
000008  f88d0000          STRB     r0,[sp,#0]
00000c  f2401379          MOV      r3,#0x179
000010  4a05              LDR      r2,|L9.40|
000012  a106              ADR      r1,|L9.44|
000014  a009              ADR      r0,|L9.60|
000016  f7fffffe          BL       rt_kprintf
                  |L9.26|
00001a  f89d2000          LDRB     r2,[sp,#0]
00001e  2a00              CMP      r2,#0
000020  d0fb              BEQ      |L9.26|
                  |L9.34|
;;;378    
;;;379        dev->rx_indicate = rx_ind;
;;;380    
;;;381        return RT_EOK;
000022  2000              MOVS     r0,#0
000024  61e5              STR      r5,[r4,#0x1c]
;;;382    }
000026  bd38              POP      {r3-r5,pc}
;;;383    RTM_EXPORT(rt_device_set_rx_indicate);
                          ENDP

                  |L9.40|
                          DCD      ||.constdata||+0x74
                  |L9.44|
00002c  64657620          DCB      "dev != RT_NULL",0
000030  213d2052
000034  545f4e55
000038  4c4c00  
00003b  00                DCB      0
                  |L9.60|
00003c  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000040  20617373
000044  65727420
000048  6661696c
00004c  65642061
000050  74202573
000054  3a256420
000058  0a00    
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.rt_device_set_tx_complete||, CODE, READONLY, ALIGN=2

                  rt_device_set_tx_complete PROC
;;;394    rt_err_t
;;;395    rt_device_set_tx_complete(rt_device_t dev,
000000  b538              PUSH     {r3-r5,lr}
;;;396                              rt_err_t (*tx_done)(rt_device_t dev, void *buffer))
;;;397    {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d10c              BNE      |L10.34|
;;;398        RT_ASSERT(dev != RT_NULL);
000008  f88d0000          STRB     r0,[sp,#0]
00000c  f44f73c7          MOV      r3,#0x18e
000010  4a05              LDR      r2,|L10.40|
000012  a106              ADR      r1,|L10.44|
000014  a009              ADR      r0,|L10.60|
000016  f7fffffe          BL       rt_kprintf
                  |L10.26|
00001a  f89d2000          LDRB     r2,[sp,#0]
00001e  2a00              CMP      r2,#0
000020  d0fb              BEQ      |L10.26|
                  |L10.34|
;;;399    
;;;400        dev->tx_complete = tx_done;
;;;401    
;;;402        return RT_EOK;
000022  2000              MOVS     r0,#0
000024  6225              STR      r5,[r4,#0x20]
;;;403    }
000026  bd38              POP      {r3-r5,pc}
;;;404    RTM_EXPORT(rt_device_set_tx_complete);
                          ENDP

                  |L10.40|
                          DCD      ||.constdata||+0x8e
                  |L10.44|
00002c  64657620          DCB      "dev != RT_NULL",0
000030  213d2052
000034  545f4e55
000038  4c4c00  
00003b  00                DCB      0
                  |L10.60|
00003c  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000040  20617373
000044  65727420
000048  6661696c
00004c  65642061
000050  74202573
000054  3a256420
000058  0a00    
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.rt_device_unregister||, CODE, READONLY, ALIGN=2

                  rt_device_unregister PROC
;;;67      */
;;;68     rt_err_t rt_device_unregister(rt_device_t dev)
000000  b538              PUSH     {r3-r5,lr}
;;;69     {
000002  0004              MOVS     r4,r0
000004  d10c              BNE      |L11.32|
;;;70         RT_ASSERT(dev != RT_NULL);
000006  2100              MOVS     r1,#0
000008  f88d1000          STRB     r1,[sp,#0]
00000c  2346              MOVS     r3,#0x46
00000e  4a07              LDR      r2,|L11.44|
000010  a107              ADR      r1,|L11.48|
000012  a00b              ADR      r0,|L11.64|
000014  f7fffffe          BL       rt_kprintf
                  |L11.24|
000018  f89d1000          LDRB     r1,[sp,#0]
00001c  2900              CMP      r1,#0
00001e  d0fb              BEQ      |L11.24|
                  |L11.32|
;;;71     
;;;72         rt_object_detach(&(dev->parent));
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       rt_object_detach
;;;73     
;;;74         return RT_EOK;
000026  2000              MOVS     r0,#0
;;;75     }
000028  bd38              POP      {r3-r5,pc}
;;;76     RTM_EXPORT(rt_device_unregister);
                          ENDP

00002a  0000              DCW      0x0000
                  |L11.44|
                          DCD      ||.constdata||
                  |L11.48|
000030  64657620          DCB      "dev != RT_NULL",0
000034  213d2052
000038  545f4e55
00003c  4c4c00  
00003f  00                DCB      0
                  |L11.64|
000040  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000044  20617373
000048  65727420
00004c  6661696c
000050  65642061
000054  74202573
000058  3a256420
00005c  0a00    
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.rt_device_write||, CODE, READONLY, ALIGN=2

                  rt_device_write PROC
;;;314     */
;;;315    rt_size_t rt_device_write(rt_device_t dev,
000000  b5f8              PUSH     {r3-r7,lr}
;;;316                              rt_off_t    pos,
;;;317                              const void *buffer,
;;;318                              rt_size_t   size)
;;;319    {
000002  461d              MOV      r5,r3
000004  4616              MOV      r6,r2
000006  460f              MOV      r7,r1
000008  0004              MOVS     r4,r0
00000a  d10c              BNE      |L12.38|
;;;320        RT_ASSERT(dev != RT_NULL);
00000c  f88d0000          STRB     r0,[sp,#0]
000010  f44f73a0          MOV      r3,#0x140
000014  4a10              LDR      r2,|L12.88|
000016  a111              ADR      r1,|L12.92|
000018  a014              ADR      r0,|L12.108|
00001a  f7fffffe          BL       rt_kprintf
                  |L12.30|
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  2800              CMP      r0,#0
000024  d0fb              BEQ      |L12.30|
                  |L12.38|
;;;321    
;;;322        if (dev->ref_count == 0)
000026  7ea0              LDRB     r0,[r4,#0x1a]
000028  b160              CBZ      r0,|L12.68|
;;;323        {
;;;324            rt_set_errno(-RT_ERROR);
;;;325            return 0;
;;;326        }
;;;327    
;;;328        /* call device write interface */
;;;329        if (dev->write != RT_NULL)
00002a  f8d4c034          LDR      r12,[r4,#0x34]
00002e  f1bc0f00          CMP      r12,#0
000032  d00a              BEQ      |L12.74|
;;;330        {
;;;331            return dev->write(dev, pos, buffer, size);
000034  b001              ADD      sp,sp,#4
000036  462b              MOV      r3,r5
000038  4632              MOV      r2,r6
00003a  4639              MOV      r1,r7
00003c  4620              MOV      r0,r4
00003e  e8bd40f0          POP      {r4-r7,lr}
000042  4760              BX       r12
                  |L12.68|
000044  f04f30ff          MOV      r0,#0xffffffff        ;324
000048  e001              B        |L12.78|
                  |L12.74|
;;;332        }
;;;333    
;;;334        /* set error code */
;;;335        rt_set_errno(-RT_ENOSYS);
00004a  f06f0005          MVN      r0,#5
                  |L12.78|
00004e  f7fffffe          BL       rt_set_errno
;;;336    
;;;337        return 0;
000052  2000              MOVS     r0,#0
;;;338    }
000054  bdf8              POP      {r3-r7,pc}
;;;339    RTM_EXPORT(rt_device_write);
                          ENDP

000056  0000              DCW      0x0000
                  |L12.88|
                          DCD      ||.constdata||+0x52
                  |L12.92|
00005c  64657620          DCB      "dev != RT_NULL",0
000060  213d2052
000064  545f4e55
000068  4c4c00  
00006b  00                DCB      0
                  |L12.108|
00006c  28257329          DCB      "(%s) assert failed at %s:%d \n",0
000070  20617373
000074  65727420
000078  6661696c
00007c  65642061
000080  74202573
000084  3a256420
000088  0a00    
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  72745f64          DCB      0x72,0x74,0x5f,0x64
000004  65766963          DCB      0x65,0x76,0x69,0x63
000008  655f756e          DCB      0x65,0x5f,0x75,0x6e
00000c  72656769          DCB      0x72,0x65,0x67,0x69
000010  73746572          DCB      0x73,0x74,0x65,0x72
000014  00                DCB      0x00
                  |symbol_number.39|
000015  72745f            DCB      0x72,0x74,0x5f
000018  64657669          DCB      0x64,0x65,0x76,0x69
00001c  63655f69          DCB      0x63,0x65,0x5f,0x69
000020  6e697400          DCB      0x6e,0x69,0x74,0x00
                  |symbol_number.40|
000024  72745f64          DCB      0x72,0x74,0x5f,0x64
000028  65766963          DCB      0x65,0x76,0x69,0x63
00002c  655f6f70          DCB      0x65,0x5f,0x6f,0x70
000030  656e00            DCB      0x65,0x6e,0x00
                  |symbol_number.41|
000033  72                DCB      0x72
000034  745f6465          DCB      0x74,0x5f,0x64,0x65
000038  76696365          DCB      0x76,0x69,0x63,0x65
00003c  5f636c6f          DCB      0x5f,0x63,0x6c,0x6f
000040  736500            DCB      0x73,0x65,0x00
                  |symbol_number.42|
000043  72                DCB      0x72
000044  745f6465          DCB      0x74,0x5f,0x64,0x65
000048  76696365          DCB      0x76,0x69,0x63,0x65
00004c  5f726561          DCB      0x5f,0x72,0x65,0x61
000050  6400              DCB      0x64,0x00
                  |symbol_number.43|
000052  7274              DCB      0x72,0x74
000054  5f646576          DCB      0x5f,0x64,0x65,0x76
000058  6963655f          DCB      0x69,0x63,0x65,0x5f
00005c  77726974          DCB      0x77,0x72,0x69,0x74
000060  6500              DCB      0x65,0x00
                  |symbol_number.44|
000062  7274              DCB      0x72,0x74
000064  5f646576          DCB      0x5f,0x64,0x65,0x76
000068  6963655f          DCB      0x69,0x63,0x65,0x5f
00006c  636f6e74          DCB      0x63,0x6f,0x6e,0x74
000070  726f6c00          DCB      0x72,0x6f,0x6c,0x00
                  |symbol_number.45|
000074  72745f64          DCB      0x72,0x74,0x5f,0x64
000078  65766963          DCB      0x65,0x76,0x69,0x63
00007c  655f7365          DCB      0x65,0x5f,0x73,0x65
000080  745f7278          DCB      0x74,0x5f,0x72,0x78
000084  5f696e64          DCB      0x5f,0x69,0x6e,0x64
000088  69636174          DCB      0x69,0x63,0x61,0x74
00008c  6500              DCB      0x65,0x00
                  |symbol_number.46|
00008e  7274              DCB      0x72,0x74
000090  5f646576          DCB      0x5f,0x64,0x65,0x76
000094  6963655f          DCB      0x69,0x63,0x65,0x5f
000098  7365745f          DCB      0x73,0x65,0x74,0x5f
00009c  74785f63          DCB      0x74,0x78,0x5f,0x63
0000a0  6f6d706c          DCB      0x6f,0x6d,0x70,0x6c
0000a4  65746500          DCB      0x65,0x74,0x65,0x00
