; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f4xx_cryp_des.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_cryp_des.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\OS -I..\OS\components\finsh -I..\OS\include -I..\OS\libcpu\arm\common -I..\OS\libcpu\arm\cortex-m4 -I..\OS\bsp\stm32f40x\Libraries\CMSIS\Include -I..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\OS\bsp\stm32f40x\Libraries\CMSIS\ST\STM32F4xx\Include -I..\OS\bsp\stm32f40x\applications -I..\OS\bsp\stm32f40x\drivers -I..\OS\bsp\stm32f40x -I..\ext\inc -I..\tb_Application -I..\tb_Algorithm -I..\tb_Driver -IE:\Robotic_Platform\mdk_Prj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.8.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F429xx -DUSE_STDPERIPH_DRIVER -DSTM32F429xx --omf_browse=.\objects\stm32f4xx_cryp_des.crf ..\OS\bsp\stm32f40x\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_des.c]
                          THUMB

                          AREA ||i.CRYP_DES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_DES_CBC PROC
;;;188      */
;;;189    ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;190                             uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;191    {
000004  b08f              SUB      sp,sp,#0x3c
;;;192      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;193      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;194      CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
;;;195      __IO uint32_t counter = 0;
000006  f04f0a00          MOV      r10,#0
00000a  e9ddb51c          LDRD     r11,r5,[sp,#0x70]     ;191
00000e  461c              MOV      r4,r3                 ;191
;;;196      uint32_t busystatus = 0;
;;;197      ErrorStatus status = SUCCESS;
000010  2701              MOVS     r7,#1
;;;198      uint32_t keyaddr    = (uint32_t)Key;
000012  4688              MOV      r8,r1
;;;199      uint32_t inputaddr  = (uint32_t)Input;
;;;200      uint32_t outputaddr = (uint32_t)Output;
;;;201      uint32_t ivaddr     = (uint32_t)InitVectors;
000014  4691              MOV      r9,r2
;;;202      uint32_t i = 0;
000016  4656              MOV      r6,r10
;;;203    
;;;204      /* Crypto structures initialisation*/
;;;205      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cda028          STR      r10,[sp,#0x28]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;206    
;;;207      /* Crypto Init for Encryption process */
;;;208      if(Mode == MODE_ENCRYPT) /* DES encryption */
000022  980f              LDR      r0,[sp,#0x3c]
000024  2801              CMP      r0,#1
000026  d027              BEQ      |L1.120|
;;;209      {
;;;210         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
;;;211      }
;;;212      else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
;;;213      {
;;;214         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
000028  2004              MOVS     r0,#4
00002a  f8ad0020          STRH     r0,[sp,#0x20]
                  |L1.46|
;;;215      }
;;;216    
;;;217      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
00002e  2018              MOVS     r0,#0x18
000030  f8ad0022          STRH     r0,[sp,#0x22]
;;;218      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000034  2080              MOVS     r0,#0x80
000036  f8ad0024          STRH     r0,[sp,#0x24]
;;;219      CRYP_Init(&DES_CRYP_InitStructure);
00003a  a808              ADD      r0,sp,#0x20
00003c  f7fffffe          BL       CRYP_Init
;;;220    
;;;221      /* Key Initialisation */
;;;222      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000040  f8d80000          LDR      r0,[r8,#0]
000044  ba00              REV      r0,r0
;;;223      keyaddr+=4;
;;;224      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000046  9002              STR      r0,[sp,#8]
000048  f8d80004          LDR      r0,[r8,#4]
00004c  ba00              REV      r0,r0
;;;225      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
00004e  9003              STR      r0,[sp,#0xc]
000050  4668              MOV      r0,sp
000052  f7fffffe          BL       CRYP_KeyInit
;;;226    
;;;227      /* Initialization Vectors */
;;;228      DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000056  f8d90000          LDR      r0,[r9,#0]
00005a  ba00              REV      r0,r0
;;;229      ivaddr+=4;
;;;230      DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
00005c  900b              STR      r0,[sp,#0x2c]
00005e  f8d90004          LDR      r0,[r9,#4]
000062  ba00              REV      r0,r0
;;;231      CRYP_IVInit(&DES_CRYP_IVInitStructure);
000064  900c              STR      r0,[sp,#0x30]
000066  a80b              ADD      r0,sp,#0x2c
000068  f7fffffe          BL       CRYP_IVInit
;;;232    
;;;233      /* Flush IN/OUT FIFO */
;;;234      CRYP_FIFOFlush();
00006c  f7fffffe          BL       CRYP_FIFOFlush
;;;235      
;;;236      /* Enable Crypto processor */
;;;237      CRYP_Cmd(ENABLE);
000070  2001              MOVS     r0,#1
000072  f7fffffe          BL       CRYP_Cmd
;;;238    
;;;239      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
000076  e024              B        |L1.194|
                  |L1.120|
000078  f8ada020          STRH     r10,[sp,#0x20]        ;210
00007c  e7d7              B        |L1.46|
                  |L1.126|
;;;240      {
;;;241        /* Write the Input block in the Input FIFO */
;;;242        CRYP_DataIn(*(uint32_t*)(inputaddr));
00007e  6820              LDR      r0,[r4,#0]
000080  f7fffffe          BL       CRYP_DataIn
;;;243        inputaddr+=4;
;;;244        CRYP_DataIn(*(uint32_t*)(inputaddr));
000084  f8540f04          LDR      r0,[r4,#4]!
000088  f7fffffe          BL       CRYP_DataIn
;;;245        inputaddr+=4;
;;;246    
;;;247        /* Wait until the complete message has been processed */
;;;248        counter = 0;
;;;249        do
;;;250        {
;;;251          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;252          counter++;
;;;253        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
00008c  f44f3880          MOV      r8,#0x10000
000090  1d24              ADDS     r4,r4,#4
000092  f8cda028          STR      r10,[sp,#0x28]
                  |L1.150|
000096  2010              MOVS     r0,#0x10              ;251
000098  f7fffffe          BL       CRYP_GetFlagStatus
00009c  990a              LDR      r1,[sp,#0x28]         ;252
00009e  1c49              ADDS     r1,r1,#1              ;252
0000a0  910a              STR      r1,[sp,#0x28]
0000a2  4541              CMP      r1,r8
0000a4  d002              BEQ      |L1.172|
0000a6  2800              CMP      r0,#0
0000a8  d1f5              BNE      |L1.150|
0000aa  e002              B        |L1.178|
                  |L1.172|
;;;254    
;;;255        if (busystatus != RESET)
0000ac  b108              CBZ      r0,|L1.178|
;;;256       {
;;;257           status = ERROR;
0000ae  2700              MOVS     r7,#0
0000b0  e006              B        |L1.192|
                  |L1.178|
;;;258        }
;;;259        else
;;;260        {
;;;261          /* Read the Output block from the Output FIFO */
;;;262          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000b2  f7fffffe          BL       CRYP_DataOut
;;;263          outputaddr+=4;
;;;264          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000b6  6028              STR      r0,[r5,#0]
0000b8  f7fffffe          BL       CRYP_DataOut
0000bc  6068              STR      r0,[r5,#4]
0000be  3508              ADDS     r5,r5,#8
                  |L1.192|
0000c0  3608              ADDS     r6,r6,#8
                  |L1.194|
0000c2  455e              CMP      r6,r11                ;239
0000c4  d201              BCS      |L1.202|
0000c6  2f00              CMP      r7,#0                 ;239
0000c8  d1d9              BNE      |L1.126|
                  |L1.202|
;;;265          outputaddr+=4;
;;;266        }
;;;267      }
;;;268    
;;;269      /* Disable Crypto */
;;;270      CRYP_Cmd(DISABLE);
0000ca  2000              MOVS     r0,#0
0000cc  f7fffffe          BL       CRYP_Cmd
;;;271    
;;;272      return status; 
;;;273    }
0000d0  b013              ADD      sp,sp,#0x4c
0000d2  4638              MOV      r0,r7                 ;272
0000d4  e8bd8ff0          POP      {r4-r11,pc}
;;;274    
                          ENDP


                          AREA ||i.CRYP_DES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_DES_ECB PROC
;;;93       */
;;;94     ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;95                              uint32_t Ilength, uint8_t *Output)
;;;96     {
000004  b08b              SUB      sp,sp,#0x2c
;;;97       CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;98       CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;99       __IO uint32_t counter = 0;
000006  f04f0900          MOV      r9,#0
00000a  4683              MOV      r11,r0                ;96
00000c  9d14              LDR      r5,[sp,#0x50]
00000e  469a              MOV      r10,r3                ;96
000010  4614              MOV      r4,r2                 ;96
;;;100      uint32_t busystatus = 0;
;;;101      ErrorStatus status = SUCCESS;
000012  2701              MOVS     r7,#1
;;;102      uint32_t keyaddr    = (uint32_t)Key;
000014  4688              MOV      r8,r1
;;;103      uint32_t inputaddr  = (uint32_t)Input;
;;;104      uint32_t outputaddr = (uint32_t)Output;
;;;105      uint32_t i = 0;
000016  464e              MOV      r6,r9
;;;106    
;;;107      /* Crypto structures initialisation*/
;;;108      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cd9028          STR      r9,[sp,#0x28]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;109    
;;;110      /* Crypto Init for Encryption process */
;;;111      if( Mode == MODE_ENCRYPT ) /* DES encryption */
000022  f1bb0f01          CMP      r11,#1
000026  d01c              BEQ      |L2.98|
;;;112      {
;;;113         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
;;;114      }
;;;115      else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
;;;116      {      
;;;117         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
000028  2004              MOVS     r0,#4
00002a  f8ad0020          STRH     r0,[sp,#0x20]
                  |L2.46|
;;;118      }
;;;119    
;;;120      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
00002e  2010              MOVS     r0,#0x10
000030  f8ad0022          STRH     r0,[sp,#0x22]
;;;121      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000034  2080              MOVS     r0,#0x80
000036  f8ad0024          STRH     r0,[sp,#0x24]
;;;122      CRYP_Init(&DES_CRYP_InitStructure);
00003a  a808              ADD      r0,sp,#0x20
00003c  f7fffffe          BL       CRYP_Init
;;;123    
;;;124      /* Key Initialisation */
;;;125      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000040  f8d80000          LDR      r0,[r8,#0]
000044  ba00              REV      r0,r0
;;;126      keyaddr+=4;
;;;127      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000046  9002              STR      r0,[sp,#8]
000048  f8d80004          LDR      r0,[r8,#4]
00004c  ba00              REV      r0,r0
;;;128      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
00004e  9003              STR      r0,[sp,#0xc]
000050  4668              MOV      r0,sp
000052  f7fffffe          BL       CRYP_KeyInit
;;;129    
;;;130      /* Flush IN/OUT FIFO */
;;;131      CRYP_FIFOFlush();
000056  f7fffffe          BL       CRYP_FIFOFlush
;;;132    
;;;133      /* Enable Crypto processor */
;;;134      CRYP_Cmd(ENABLE);
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       CRYP_Cmd
;;;135    
;;;136      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
000060  e024              B        |L2.172|
                  |L2.98|
000062  f8ad9020          STRH     r9,[sp,#0x20]         ;113
000066  e7e2              B        |L2.46|
                  |L2.104|
;;;137      {
;;;138    
;;;139        /* Write the Input block in the Input FIFO */
;;;140        CRYP_DataIn(*(uint32_t*)(inputaddr));
000068  6820              LDR      r0,[r4,#0]
00006a  f7fffffe          BL       CRYP_DataIn
;;;141        inputaddr+=4;
;;;142        CRYP_DataIn(*(uint32_t*)(inputaddr));
00006e  f8540f04          LDR      r0,[r4,#4]!
000072  f7fffffe          BL       CRYP_DataIn
;;;143        inputaddr+=4;
;;;144    
;;;145    /* Wait until the complete message has been processed */
;;;146        counter = 0;
;;;147        do
;;;148        {
;;;149          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;150          counter++;
;;;151        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
000076  f44f3880          MOV      r8,#0x10000
00007a  1d24              ADDS     r4,r4,#4
00007c  f8cd9028          STR      r9,[sp,#0x28]
                  |L2.128|
000080  2010              MOVS     r0,#0x10              ;149
000082  f7fffffe          BL       CRYP_GetFlagStatus
000086  990a              LDR      r1,[sp,#0x28]         ;150
000088  1c49              ADDS     r1,r1,#1              ;150
00008a  910a              STR      r1,[sp,#0x28]
00008c  4541              CMP      r1,r8
00008e  d002              BEQ      |L2.150|
000090  2800              CMP      r0,#0
000092  d1f5              BNE      |L2.128|
000094  e002              B        |L2.156|
                  |L2.150|
;;;152    
;;;153        if (busystatus != RESET)
000096  b108              CBZ      r0,|L2.156|
;;;154       {
;;;155           status = ERROR;
000098  2700              MOVS     r7,#0
00009a  e006              B        |L2.170|
                  |L2.156|
;;;156        }
;;;157        else
;;;158        {
;;;159    
;;;160          /* Read the Output block from the Output FIFO */
;;;161          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00009c  f7fffffe          BL       CRYP_DataOut
;;;162          outputaddr+=4;
;;;163          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000a0  6028              STR      r0,[r5,#0]
0000a2  f7fffffe          BL       CRYP_DataOut
0000a6  6068              STR      r0,[r5,#4]
0000a8  3508              ADDS     r5,r5,#8
                  |L2.170|
0000aa  3608              ADDS     r6,r6,#8
                  |L2.172|
0000ac  4556              CMP      r6,r10                ;136
0000ae  d201              BCS      |L2.180|
0000b0  2f00              CMP      r7,#0                 ;136
0000b2  d1d9              BNE      |L2.104|
                  |L2.180|
;;;164          outputaddr+=4;
;;;165        }
;;;166      }
;;;167    
;;;168      /* Disable Crypto */
;;;169      CRYP_Cmd(DISABLE);
0000b4  2000              MOVS     r0,#0
0000b6  f7fffffe          BL       CRYP_Cmd
;;;170    
;;;171      return status; 
;;;172    }
0000ba  b00b              ADD      sp,sp,#0x2c
0000bc  4638              MOV      r0,r7                 ;171
0000be  e8bd8ff0          POP      {r4-r11,pc}
;;;173    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\OS\\bsp\\stm32f40x\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_cryp_des.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_des_c_9174d91f____REV16|
#line 114 "..\\OS\\bsp\\stm32f40x\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f4xx_cryp_des_c_9174d91f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_des_c_9174d91f____REVSH|
#line 128
|__asm___20_stm32f4xx_cryp_des_c_9174d91f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
